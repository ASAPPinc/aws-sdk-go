package support

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"github.com/awslabs/aws-sdk-go/aws"
)

// AddAttachmentsToSetRequest generates a request for the AddAttachmentsToSet operation.
func (c *Support) AddAttachmentsToSetRequest(input *AddAttachmentsToSetInput) (req *aws.Request, output *AddAttachmentsToSetOutput) {
	if opAddAttachmentsToSet == nil {
		opAddAttachmentsToSet = &aws.Operation{
			Name:       "AddAttachmentsToSet",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAddAttachmentsToSet, input, output)
	output = &AddAttachmentsToSetOutput{}
	req.Data = output
	return
}

func (c *Support) AddAttachmentsToSet(input *AddAttachmentsToSetInput) (output *AddAttachmentsToSetOutput, err error) {
	req, out := c.AddAttachmentsToSetRequest(input)
	output = out
	err = req.Send()
	return
}

var opAddAttachmentsToSet *aws.Operation

// AddCommunicationToCaseRequest generates a request for the AddCommunicationToCase operation.
func (c *Support) AddCommunicationToCaseRequest(input *AddCommunicationToCaseInput) (req *aws.Request, output *AddCommunicationToCaseOutput) {
	if opAddCommunicationToCase == nil {
		opAddCommunicationToCase = &aws.Operation{
			Name:       "AddCommunicationToCase",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAddCommunicationToCase, input, output)
	output = &AddCommunicationToCaseOutput{}
	req.Data = output
	return
}

func (c *Support) AddCommunicationToCase(input *AddCommunicationToCaseInput) (output *AddCommunicationToCaseOutput, err error) {
	req, out := c.AddCommunicationToCaseRequest(input)
	output = out
	err = req.Send()
	return
}

var opAddCommunicationToCase *aws.Operation

// CreateCaseRequest generates a request for the CreateCase operation.
func (c *Support) CreateCaseRequest(input *CreateCaseInput) (req *aws.Request, output *CreateCaseOutput) {
	if opCreateCase == nil {
		opCreateCase = &aws.Operation{
			Name:       "CreateCase",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateCase, input, output)
	output = &CreateCaseOutput{}
	req.Data = output
	return
}

func (c *Support) CreateCase(input *CreateCaseInput) (output *CreateCaseOutput, err error) {
	req, out := c.CreateCaseRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateCase *aws.Operation

// DescribeAttachmentRequest generates a request for the DescribeAttachment operation.
func (c *Support) DescribeAttachmentRequest(input *DescribeAttachmentInput) (req *aws.Request, output *DescribeAttachmentOutput) {
	if opDescribeAttachment == nil {
		opDescribeAttachment = &aws.Operation{
			Name:       "DescribeAttachment",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeAttachment, input, output)
	output = &DescribeAttachmentOutput{}
	req.Data = output
	return
}

func (c *Support) DescribeAttachment(input *DescribeAttachmentInput) (output *DescribeAttachmentOutput, err error) {
	req, out := c.DescribeAttachmentRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeAttachment *aws.Operation

// DescribeCasesRequest generates a request for the DescribeCases operation.
func (c *Support) DescribeCasesRequest(input *DescribeCasesInput) (req *aws.Request, output *DescribeCasesOutput) {
	if opDescribeCases == nil {
		opDescribeCases = &aws.Operation{
			Name:       "DescribeCases",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "nextToken",
				OutputToken:     "nextToken",
				LimitToken:      "maxResults",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeCases, input, output)
	output = &DescribeCasesOutput{}
	req.Data = output
	return
}

func (c *Support) DescribeCases(input *DescribeCasesInput) (output *DescribeCasesOutput, err error) {
	req, out := c.DescribeCasesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *Support) DescribeCasesPages(input *DescribeCasesInput) <-chan *DescribeCasesOutput {
	page, _ := c.DescribeCasesRequest(input)
	ch := make(chan *DescribeCasesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeCasesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeCases *aws.Operation

// DescribeCommunicationsRequest generates a request for the DescribeCommunications operation.
func (c *Support) DescribeCommunicationsRequest(input *DescribeCommunicationsInput) (req *aws.Request, output *DescribeCommunicationsOutput) {
	if opDescribeCommunications == nil {
		opDescribeCommunications = &aws.Operation{
			Name:       "DescribeCommunications",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "nextToken",
				OutputToken:     "nextToken",
				LimitToken:      "maxResults",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeCommunications, input, output)
	output = &DescribeCommunicationsOutput{}
	req.Data = output
	return
}

func (c *Support) DescribeCommunications(input *DescribeCommunicationsInput) (output *DescribeCommunicationsOutput, err error) {
	req, out := c.DescribeCommunicationsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *Support) DescribeCommunicationsPages(input *DescribeCommunicationsInput) <-chan *DescribeCommunicationsOutput {
	page, _ := c.DescribeCommunicationsRequest(input)
	ch := make(chan *DescribeCommunicationsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeCommunicationsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeCommunications *aws.Operation

// DescribeServicesRequest generates a request for the DescribeServices operation.
func (c *Support) DescribeServicesRequest(input *DescribeServicesInput) (req *aws.Request, output *DescribeServicesOutput) {
	if opDescribeServices == nil {
		opDescribeServices = &aws.Operation{
			Name:       "DescribeServices",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeServices, input, output)
	output = &DescribeServicesOutput{}
	req.Data = output
	return
}

func (c *Support) DescribeServices(input *DescribeServicesInput) (output *DescribeServicesOutput, err error) {
	req, out := c.DescribeServicesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *Support) DescribeServicesPages(input *DescribeServicesInput) <-chan *DescribeServicesOutput {
	page, _ := c.DescribeServicesRequest(input)
	ch := make(chan *DescribeServicesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeServicesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeServices *aws.Operation

// DescribeSeverityLevelsRequest generates a request for the DescribeSeverityLevels operation.
func (c *Support) DescribeSeverityLevelsRequest(input *DescribeSeverityLevelsInput) (req *aws.Request, output *DescribeSeverityLevelsOutput) {
	if opDescribeSeverityLevels == nil {
		opDescribeSeverityLevels = &aws.Operation{
			Name:       "DescribeSeverityLevels",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeSeverityLevels, input, output)
	output = &DescribeSeverityLevelsOutput{}
	req.Data = output
	return
}

func (c *Support) DescribeSeverityLevels(input *DescribeSeverityLevelsInput) (output *DescribeSeverityLevelsOutput, err error) {
	req, out := c.DescribeSeverityLevelsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeSeverityLevels *aws.Operation

// DescribeTrustedAdvisorCheckRefreshStatusesRequest generates a request for the DescribeTrustedAdvisorCheckRefreshStatuses operation.
func (c *Support) DescribeTrustedAdvisorCheckRefreshStatusesRequest(input *DescribeTrustedAdvisorCheckRefreshStatusesInput) (req *aws.Request, output *DescribeTrustedAdvisorCheckRefreshStatusesOutput) {
	if opDescribeTrustedAdvisorCheckRefreshStatuses == nil {
		opDescribeTrustedAdvisorCheckRefreshStatuses = &aws.Operation{
			Name:       "DescribeTrustedAdvisorCheckRefreshStatuses",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeTrustedAdvisorCheckRefreshStatuses, input, output)
	output = &DescribeTrustedAdvisorCheckRefreshStatusesOutput{}
	req.Data = output
	return
}

func (c *Support) DescribeTrustedAdvisorCheckRefreshStatuses(input *DescribeTrustedAdvisorCheckRefreshStatusesInput) (output *DescribeTrustedAdvisorCheckRefreshStatusesOutput, err error) {
	req, out := c.DescribeTrustedAdvisorCheckRefreshStatusesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *Support) DescribeTrustedAdvisorCheckRefreshStatusesPages(input *DescribeTrustedAdvisorCheckRefreshStatusesInput) <-chan *DescribeTrustedAdvisorCheckRefreshStatusesOutput {
	page, _ := c.DescribeTrustedAdvisorCheckRefreshStatusesRequest(input)
	ch := make(chan *DescribeTrustedAdvisorCheckRefreshStatusesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeTrustedAdvisorCheckRefreshStatusesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeTrustedAdvisorCheckRefreshStatuses *aws.Operation

// DescribeTrustedAdvisorCheckResultRequest generates a request for the DescribeTrustedAdvisorCheckResult operation.
func (c *Support) DescribeTrustedAdvisorCheckResultRequest(input *DescribeTrustedAdvisorCheckResultInput) (req *aws.Request, output *DescribeTrustedAdvisorCheckResultOutput) {
	if opDescribeTrustedAdvisorCheckResult == nil {
		opDescribeTrustedAdvisorCheckResult = &aws.Operation{
			Name:       "DescribeTrustedAdvisorCheckResult",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeTrustedAdvisorCheckResult, input, output)
	output = &DescribeTrustedAdvisorCheckResultOutput{}
	req.Data = output
	return
}

func (c *Support) DescribeTrustedAdvisorCheckResult(input *DescribeTrustedAdvisorCheckResultInput) (output *DescribeTrustedAdvisorCheckResultOutput, err error) {
	req, out := c.DescribeTrustedAdvisorCheckResultRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeTrustedAdvisorCheckResult *aws.Operation

// DescribeTrustedAdvisorCheckSummariesRequest generates a request for the DescribeTrustedAdvisorCheckSummaries operation.
func (c *Support) DescribeTrustedAdvisorCheckSummariesRequest(input *DescribeTrustedAdvisorCheckSummariesInput) (req *aws.Request, output *DescribeTrustedAdvisorCheckSummariesOutput) {
	if opDescribeTrustedAdvisorCheckSummaries == nil {
		opDescribeTrustedAdvisorCheckSummaries = &aws.Operation{
			Name:       "DescribeTrustedAdvisorCheckSummaries",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeTrustedAdvisorCheckSummaries, input, output)
	output = &DescribeTrustedAdvisorCheckSummariesOutput{}
	req.Data = output
	return
}

func (c *Support) DescribeTrustedAdvisorCheckSummaries(input *DescribeTrustedAdvisorCheckSummariesInput) (output *DescribeTrustedAdvisorCheckSummariesOutput, err error) {
	req, out := c.DescribeTrustedAdvisorCheckSummariesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *Support) DescribeTrustedAdvisorCheckSummariesPages(input *DescribeTrustedAdvisorCheckSummariesInput) <-chan *DescribeTrustedAdvisorCheckSummariesOutput {
	page, _ := c.DescribeTrustedAdvisorCheckSummariesRequest(input)
	ch := make(chan *DescribeTrustedAdvisorCheckSummariesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeTrustedAdvisorCheckSummariesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeTrustedAdvisorCheckSummaries *aws.Operation

// DescribeTrustedAdvisorChecksRequest generates a request for the DescribeTrustedAdvisorChecks operation.
func (c *Support) DescribeTrustedAdvisorChecksRequest(input *DescribeTrustedAdvisorChecksInput) (req *aws.Request, output *DescribeTrustedAdvisorChecksOutput) {
	if opDescribeTrustedAdvisorChecks == nil {
		opDescribeTrustedAdvisorChecks = &aws.Operation{
			Name:       "DescribeTrustedAdvisorChecks",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeTrustedAdvisorChecks, input, output)
	output = &DescribeTrustedAdvisorChecksOutput{}
	req.Data = output
	return
}

func (c *Support) DescribeTrustedAdvisorChecks(input *DescribeTrustedAdvisorChecksInput) (output *DescribeTrustedAdvisorChecksOutput, err error) {
	req, out := c.DescribeTrustedAdvisorChecksRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeTrustedAdvisorChecks *aws.Operation

// RefreshTrustedAdvisorCheckRequest generates a request for the RefreshTrustedAdvisorCheck operation.
func (c *Support) RefreshTrustedAdvisorCheckRequest(input *RefreshTrustedAdvisorCheckInput) (req *aws.Request, output *RefreshTrustedAdvisorCheckOutput) {
	if opRefreshTrustedAdvisorCheck == nil {
		opRefreshTrustedAdvisorCheck = &aws.Operation{
			Name:       "RefreshTrustedAdvisorCheck",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRefreshTrustedAdvisorCheck, input, output)
	output = &RefreshTrustedAdvisorCheckOutput{}
	req.Data = output
	return
}

func (c *Support) RefreshTrustedAdvisorCheck(input *RefreshTrustedAdvisorCheckInput) (output *RefreshTrustedAdvisorCheckOutput, err error) {
	req, out := c.RefreshTrustedAdvisorCheckRequest(input)
	output = out
	err = req.Send()
	return
}

var opRefreshTrustedAdvisorCheck *aws.Operation

// ResolveCaseRequest generates a request for the ResolveCase operation.
func (c *Support) ResolveCaseRequest(input *ResolveCaseInput) (req *aws.Request, output *ResolveCaseOutput) {
	if opResolveCase == nil {
		opResolveCase = &aws.Operation{
			Name:       "ResolveCase",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opResolveCase, input, output)
	output = &ResolveCaseOutput{}
	req.Data = output
	return
}

func (c *Support) ResolveCase(input *ResolveCaseInput) (output *ResolveCaseOutput, err error) {
	req, out := c.ResolveCaseRequest(input)
	output = out
	err = req.Send()
	return
}

var opResolveCase *aws.Operation

type AddAttachmentsToSetInput struct {
	AttachmentSetID *string       `locationName:"attachmentSetId" type:"string"`
	Attachments     []*Attachment `locationName:"attachments" type:"list" required:"true"`

	metadataAddAttachmentsToSetInput `json:"-", xml:"-"`
}

type metadataAddAttachmentsToSetInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AddAttachmentsToSetOutput struct {
	AttachmentSetID *string `locationName:"attachmentSetId" type:"string"`
	ExpiryTime      *string `locationName:"expiryTime" type:"string"`

	metadataAddAttachmentsToSetOutput `json:"-", xml:"-"`
}

type metadataAddAttachmentsToSetOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AddCommunicationToCaseInput struct {
	AttachmentSetID   *string   `locationName:"attachmentSetId" type:"string"`
	CCEmailAddresses  []*string `locationName:"ccEmailAddresses" type:"list"`
	CaseID            *string   `locationName:"caseId" type:"string"`
	CommunicationBody *string   `locationName:"communicationBody" type:"string" required:"true"`

	metadataAddCommunicationToCaseInput `json:"-", xml:"-"`
}

type metadataAddCommunicationToCaseInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AddCommunicationToCaseOutput struct {
	Result *bool `locationName:"result" type:"boolean"`

	metadataAddCommunicationToCaseOutput `json:"-", xml:"-"`
}

type metadataAddCommunicationToCaseOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Attachment struct {
	Data     []byte  `locationName:"data" type:"blob"`
	FileName *string `locationName:"fileName" type:"string"`

	metadataAttachment `json:"-", xml:"-"`
}

type metadataAttachment struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttachmentDetails struct {
	AttachmentID *string `locationName:"attachmentId" type:"string"`
	FileName     *string `locationName:"fileName" type:"string"`

	metadataAttachmentDetails `json:"-", xml:"-"`
}

type metadataAttachmentDetails struct {
	SDKShapeTraits bool `type:"structure"`
}

type CaseDetails struct {
	CCEmailAddresses     []*string                 `locationName:"ccEmailAddresses" type:"list"`
	CaseID               *string                   `locationName:"caseId" type:"string"`
	CategoryCode         *string                   `locationName:"categoryCode" type:"string"`
	DisplayID            *string                   `locationName:"displayId" type:"string"`
	Language             *string                   `locationName:"language" type:"string"`
	RecentCommunications *RecentCaseCommunications `locationName:"recentCommunications" type:"structure"`
	ServiceCode          *string                   `locationName:"serviceCode" type:"string"`
	SeverityCode         *string                   `locationName:"severityCode" type:"string"`
	Status               *string                   `locationName:"status" type:"string"`
	Subject              *string                   `locationName:"subject" type:"string"`
	SubmittedBy          *string                   `locationName:"submittedBy" type:"string"`
	TimeCreated          *string                   `locationName:"timeCreated" type:"string"`

	metadataCaseDetails `json:"-", xml:"-"`
}

type metadataCaseDetails struct {
	SDKShapeTraits bool `type:"structure"`
}

type Category struct {
	Code *string `locationName:"code" type:"string"`
	Name *string `locationName:"name" type:"string"`

	metadataCategory `json:"-", xml:"-"`
}

type metadataCategory struct {
	SDKShapeTraits bool `type:"structure"`
}

type Communication struct {
	AttachmentSet []*AttachmentDetails `locationName:"attachmentSet" type:"list"`
	Body          *string              `locationName:"body" type:"string"`
	CaseID        *string              `locationName:"caseId" type:"string"`
	SubmittedBy   *string              `locationName:"submittedBy" type:"string"`
	TimeCreated   *string              `locationName:"timeCreated" type:"string"`

	metadataCommunication `json:"-", xml:"-"`
}

type metadataCommunication struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateCaseInput struct {
	AttachmentSetID   *string   `locationName:"attachmentSetId" type:"string"`
	CCEmailAddresses  []*string `locationName:"ccEmailAddresses" type:"list"`
	CategoryCode      *string   `locationName:"categoryCode" type:"string"`
	CommunicationBody *string   `locationName:"communicationBody" type:"string" required:"true"`
	IssueType         *string   `locationName:"issueType" type:"string"`
	Language          *string   `locationName:"language" type:"string"`
	ServiceCode       *string   `locationName:"serviceCode" type:"string"`
	SeverityCode      *string   `locationName:"severityCode" type:"string"`
	Subject           *string   `locationName:"subject" type:"string" required:"true"`

	metadataCreateCaseInput `json:"-", xml:"-"`
}

type metadataCreateCaseInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateCaseOutput struct {
	CaseID *string `locationName:"caseId" type:"string"`

	metadataCreateCaseOutput `json:"-", xml:"-"`
}

type metadataCreateCaseOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAttachmentInput struct {
	AttachmentID *string `locationName:"attachmentId" type:"string" required:"true"`

	metadataDescribeAttachmentInput `json:"-", xml:"-"`
}

type metadataDescribeAttachmentInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAttachmentOutput struct {
	Attachment *Attachment `locationName:"attachment" type:"structure"`

	metadataDescribeAttachmentOutput `json:"-", xml:"-"`
}

type metadataDescribeAttachmentOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeCasesInput struct {
	AfterTime             *string   `locationName:"afterTime" type:"string"`
	BeforeTime            *string   `locationName:"beforeTime" type:"string"`
	CaseIDList            []*string `locationName:"caseIdList" type:"list"`
	DisplayID             *string   `locationName:"displayId" type:"string"`
	IncludeCommunications *bool     `locationName:"includeCommunications" type:"boolean"`
	IncludeResolvedCases  *bool     `locationName:"includeResolvedCases" type:"boolean"`
	Language              *string   `locationName:"language" type:"string"`
	MaxResults            *int64    `locationName:"maxResults" type:"integer"`
	NextToken             *string   `locationName:"nextToken" type:"string"`

	metadataDescribeCasesInput `json:"-", xml:"-"`
}

type metadataDescribeCasesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeCasesOutput struct {
	Cases     []*CaseDetails `locationName:"cases" type:"list"`
	NextToken *string        `locationName:"nextToken" type:"string"`

	metadataDescribeCasesOutput `json:"-", xml:"-"`
}

type metadataDescribeCasesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeCommunicationsInput struct {
	AfterTime  *string `locationName:"afterTime" type:"string"`
	BeforeTime *string `locationName:"beforeTime" type:"string"`
	CaseID     *string `locationName:"caseId" type:"string" required:"true"`
	MaxResults *int64  `locationName:"maxResults" type:"integer"`
	NextToken  *string `locationName:"nextToken" type:"string"`

	metadataDescribeCommunicationsInput `json:"-", xml:"-"`
}

type metadataDescribeCommunicationsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeCommunicationsOutput struct {
	Communications []*Communication `locationName:"communications" type:"list"`
	NextToken      *string          `locationName:"nextToken" type:"string"`

	metadataDescribeCommunicationsOutput `json:"-", xml:"-"`
}

type metadataDescribeCommunicationsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeServicesInput struct {
	Language        *string   `locationName:"language" type:"string"`
	ServiceCodeList []*string `locationName:"serviceCodeList" type:"list"`

	metadataDescribeServicesInput `json:"-", xml:"-"`
}

type metadataDescribeServicesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeServicesOutput struct {
	Services []*Service `locationName:"services" type:"list"`

	metadataDescribeServicesOutput `json:"-", xml:"-"`
}

type metadataDescribeServicesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSeverityLevelsInput struct {
	Language *string `locationName:"language" type:"string"`

	metadataDescribeSeverityLevelsInput `json:"-", xml:"-"`
}

type metadataDescribeSeverityLevelsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSeverityLevelsOutput struct {
	SeverityLevels []*SeverityLevel `locationName:"severityLevels" type:"list"`

	metadataDescribeSeverityLevelsOutput `json:"-", xml:"-"`
}

type metadataDescribeSeverityLevelsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTrustedAdvisorCheckRefreshStatusesInput struct {
	CheckIDs []*string `locationName:"checkIds" type:"list" required:"true"`

	metadataDescribeTrustedAdvisorCheckRefreshStatusesInput `json:"-", xml:"-"`
}

type metadataDescribeTrustedAdvisorCheckRefreshStatusesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTrustedAdvisorCheckRefreshStatusesOutput struct {
	Statuses []*TrustedAdvisorCheckRefreshStatus `locationName:"statuses" type:"list" required:"true"`

	metadataDescribeTrustedAdvisorCheckRefreshStatusesOutput `json:"-", xml:"-"`
}

type metadataDescribeTrustedAdvisorCheckRefreshStatusesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTrustedAdvisorCheckResultInput struct {
	CheckID  *string `locationName:"checkId" type:"string" required:"true"`
	Language *string `locationName:"language" type:"string"`

	metadataDescribeTrustedAdvisorCheckResultInput `json:"-", xml:"-"`
}

type metadataDescribeTrustedAdvisorCheckResultInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTrustedAdvisorCheckResultOutput struct {
	Result *TrustedAdvisorCheckResult `locationName:"result" type:"structure"`

	metadataDescribeTrustedAdvisorCheckResultOutput `json:"-", xml:"-"`
}

type metadataDescribeTrustedAdvisorCheckResultOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTrustedAdvisorCheckSummariesInput struct {
	CheckIDs []*string `locationName:"checkIds" type:"list" required:"true"`

	metadataDescribeTrustedAdvisorCheckSummariesInput `json:"-", xml:"-"`
}

type metadataDescribeTrustedAdvisorCheckSummariesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTrustedAdvisorCheckSummariesOutput struct {
	Summaries []*TrustedAdvisorCheckSummary `locationName:"summaries" type:"list" required:"true"`

	metadataDescribeTrustedAdvisorCheckSummariesOutput `json:"-", xml:"-"`
}

type metadataDescribeTrustedAdvisorCheckSummariesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTrustedAdvisorChecksInput struct {
	Language *string `locationName:"language" type:"string" required:"true"`

	metadataDescribeTrustedAdvisorChecksInput `json:"-", xml:"-"`
}

type metadataDescribeTrustedAdvisorChecksInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTrustedAdvisorChecksOutput struct {
	Checks []*TrustedAdvisorCheckDescription `locationName:"checks" type:"list" required:"true"`

	metadataDescribeTrustedAdvisorChecksOutput `json:"-", xml:"-"`
}

type metadataDescribeTrustedAdvisorChecksOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RecentCaseCommunications struct {
	Communications []*Communication `locationName:"communications" type:"list"`
	NextToken      *string          `locationName:"nextToken" type:"string"`

	metadataRecentCaseCommunications `json:"-", xml:"-"`
}

type metadataRecentCaseCommunications struct {
	SDKShapeTraits bool `type:"structure"`
}

type RefreshTrustedAdvisorCheckInput struct {
	CheckID *string `locationName:"checkId" type:"string" required:"true"`

	metadataRefreshTrustedAdvisorCheckInput `json:"-", xml:"-"`
}

type metadataRefreshTrustedAdvisorCheckInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RefreshTrustedAdvisorCheckOutput struct {
	Status *TrustedAdvisorCheckRefreshStatus `locationName:"status" type:"structure" required:"true"`

	metadataRefreshTrustedAdvisorCheckOutput `json:"-", xml:"-"`
}

type metadataRefreshTrustedAdvisorCheckOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ResolveCaseInput struct {
	CaseID *string `locationName:"caseId" type:"string"`

	metadataResolveCaseInput `json:"-", xml:"-"`
}

type metadataResolveCaseInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ResolveCaseOutput struct {
	FinalCaseStatus   *string `locationName:"finalCaseStatus" type:"string"`
	InitialCaseStatus *string `locationName:"initialCaseStatus" type:"string"`

	metadataResolveCaseOutput `json:"-", xml:"-"`
}

type metadataResolveCaseOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Service struct {
	Categories []*Category `locationName:"categories" type:"list"`
	Code       *string     `locationName:"code" type:"string"`
	Name       *string     `locationName:"name" type:"string"`

	metadataService `json:"-", xml:"-"`
}

type metadataService struct {
	SDKShapeTraits bool `type:"structure"`
}

type SeverityLevel struct {
	Code *string `locationName:"code" type:"string"`
	Name *string `locationName:"name" type:"string"`

	metadataSeverityLevel `json:"-", xml:"-"`
}

type metadataSeverityLevel struct {
	SDKShapeTraits bool `type:"structure"`
}

type TrustedAdvisorCategorySpecificSummary struct {
	CostOptimizing *TrustedAdvisorCostOptimizingSummary `locationName:"costOptimizing" type:"structure"`

	metadataTrustedAdvisorCategorySpecificSummary `json:"-", xml:"-"`
}

type metadataTrustedAdvisorCategorySpecificSummary struct {
	SDKShapeTraits bool `type:"structure"`
}

type TrustedAdvisorCheckDescription struct {
	Category    *string   `locationName:"category" type:"string" required:"true"`
	Description *string   `locationName:"description" type:"string" required:"true"`
	ID          *string   `locationName:"id" type:"string" required:"true"`
	Metadata    []*string `locationName:"metadata" type:"list" required:"true"`
	Name        *string   `locationName:"name" type:"string" required:"true"`

	metadataTrustedAdvisorCheckDescription `json:"-", xml:"-"`
}

type metadataTrustedAdvisorCheckDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type TrustedAdvisorCheckRefreshStatus struct {
	CheckID                    *string `locationName:"checkId" type:"string" required:"true"`
	MillisUntilNextRefreshable *int64  `locationName:"millisUntilNextRefreshable" type:"long" required:"true"`
	Status                     *string `locationName:"status" type:"string" required:"true"`

	metadataTrustedAdvisorCheckRefreshStatus `json:"-", xml:"-"`
}

type metadataTrustedAdvisorCheckRefreshStatus struct {
	SDKShapeTraits bool `type:"structure"`
}

type TrustedAdvisorCheckResult struct {
	CategorySpecificSummary *TrustedAdvisorCategorySpecificSummary `locationName:"categorySpecificSummary" type:"structure" required:"true"`
	CheckID                 *string                                `locationName:"checkId" type:"string" required:"true"`
	FlaggedResources        []*TrustedAdvisorResourceDetail        `locationName:"flaggedResources" type:"list" required:"true"`
	ResourcesSummary        *TrustedAdvisorResourcesSummary        `locationName:"resourcesSummary" type:"structure" required:"true"`
	Status                  *string                                `locationName:"status" type:"string" required:"true"`
	Timestamp               *string                                `locationName:"timestamp" type:"string" required:"true"`

	metadataTrustedAdvisorCheckResult `json:"-", xml:"-"`
}

type metadataTrustedAdvisorCheckResult struct {
	SDKShapeTraits bool `type:"structure"`
}

type TrustedAdvisorCheckSummary struct {
	CategorySpecificSummary *TrustedAdvisorCategorySpecificSummary `locationName:"categorySpecificSummary" type:"structure" required:"true"`
	CheckID                 *string                                `locationName:"checkId" type:"string" required:"true"`
	HasFlaggedResources     *bool                                  `locationName:"hasFlaggedResources" type:"boolean"`
	ResourcesSummary        *TrustedAdvisorResourcesSummary        `locationName:"resourcesSummary" type:"structure" required:"true"`
	Status                  *string                                `locationName:"status" type:"string" required:"true"`
	Timestamp               *string                                `locationName:"timestamp" type:"string" required:"true"`

	metadataTrustedAdvisorCheckSummary `json:"-", xml:"-"`
}

type metadataTrustedAdvisorCheckSummary struct {
	SDKShapeTraits bool `type:"structure"`
}

type TrustedAdvisorCostOptimizingSummary struct {
	EstimatedMonthlySavings        *float64 `locationName:"estimatedMonthlySavings" type:"double" required:"true"`
	EstimatedPercentMonthlySavings *float64 `locationName:"estimatedPercentMonthlySavings" type:"double" required:"true"`

	metadataTrustedAdvisorCostOptimizingSummary `json:"-", xml:"-"`
}

type metadataTrustedAdvisorCostOptimizingSummary struct {
	SDKShapeTraits bool `type:"structure"`
}

type TrustedAdvisorResourceDetail struct {
	IsSuppressed *bool     `locationName:"isSuppressed" type:"boolean"`
	Metadata     []*string `locationName:"metadata" type:"list" required:"true"`
	Region       *string   `locationName:"region" type:"string" required:"true"`
	ResourceID   *string   `locationName:"resourceId" type:"string" required:"true"`
	Status       *string   `locationName:"status" type:"string" required:"true"`

	metadataTrustedAdvisorResourceDetail `json:"-", xml:"-"`
}

type metadataTrustedAdvisorResourceDetail struct {
	SDKShapeTraits bool `type:"structure"`
}

type TrustedAdvisorResourcesSummary struct {
	ResourcesFlagged    *int64 `locationName:"resourcesFlagged" type:"long" required:"true"`
	ResourcesIgnored    *int64 `locationName:"resourcesIgnored" type:"long" required:"true"`
	ResourcesProcessed  *int64 `locationName:"resourcesProcessed" type:"long" required:"true"`
	ResourcesSuppressed *int64 `locationName:"resourcesSuppressed" type:"long" required:"true"`

	metadataTrustedAdvisorResourcesSummary `json:"-", xml:"-"`
}

type metadataTrustedAdvisorResourcesSummary struct {
	SDKShapeTraits bool `type:"structure"`
}