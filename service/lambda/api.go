package lambda

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"time"

	"github.com/awslabs/aws-sdk-go/aws"
)

// AddEventSourceRequest generates a request for the AddEventSource operation.
func (c *Lambda) AddEventSourceRequest(input *AddEventSourceInput) (req *aws.Request, output *EventSourceConfiguration) {
	if opAddEventSource == nil {
		opAddEventSource = &aws.Operation{
			Name:       "AddEventSource",
			HTTPMethod: "POST",
			HTTPPath:   "/2014-11-13/event-source-mappings/",
		}
	}

	req = aws.NewRequest(c.Service, opAddEventSource, input, output)
	output = &EventSourceConfiguration{}
	req.Data = output
	return
}

func (c *Lambda) AddEventSource(input *AddEventSourceInput) (output *EventSourceConfiguration, err error) {
	req, out := c.AddEventSourceRequest(input)
	output = out
	err = req.Send()
	return
}

var opAddEventSource *aws.Operation

// DeleteFunctionRequest generates a request for the DeleteFunction operation.
func (c *Lambda) DeleteFunctionRequest(input *DeleteFunctionInput) (req *aws.Request, output *DeleteFunctionOutput) {
	if opDeleteFunction == nil {
		opDeleteFunction = &aws.Operation{
			Name:       "DeleteFunction",
			HTTPMethod: "DELETE",
			HTTPPath:   "/2014-11-13/functions/{FunctionName}",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteFunction, input, output)
	output = &DeleteFunctionOutput{}
	req.Data = output
	return
}

func (c *Lambda) DeleteFunction(input *DeleteFunctionInput) (output *DeleteFunctionOutput, err error) {
	req, out := c.DeleteFunctionRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteFunction *aws.Operation

// GetEventSourceRequest generates a request for the GetEventSource operation.
func (c *Lambda) GetEventSourceRequest(input *GetEventSourceInput) (req *aws.Request, output *EventSourceConfiguration) {
	if opGetEventSource == nil {
		opGetEventSource = &aws.Operation{
			Name:       "GetEventSource",
			HTTPMethod: "GET",
			HTTPPath:   "/2014-11-13/event-source-mappings/{UUID}",
		}
	}

	req = aws.NewRequest(c.Service, opGetEventSource, input, output)
	output = &EventSourceConfiguration{}
	req.Data = output
	return
}

func (c *Lambda) GetEventSource(input *GetEventSourceInput) (output *EventSourceConfiguration, err error) {
	req, out := c.GetEventSourceRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetEventSource *aws.Operation

// GetFunctionRequest generates a request for the GetFunction operation.
func (c *Lambda) GetFunctionRequest(input *GetFunctionInput) (req *aws.Request, output *GetFunctionOutput) {
	if opGetFunction == nil {
		opGetFunction = &aws.Operation{
			Name:       "GetFunction",
			HTTPMethod: "GET",
			HTTPPath:   "/2014-11-13/functions/{FunctionName}",
		}
	}

	req = aws.NewRequest(c.Service, opGetFunction, input, output)
	output = &GetFunctionOutput{}
	req.Data = output
	return
}

func (c *Lambda) GetFunction(input *GetFunctionInput) (output *GetFunctionOutput, err error) {
	req, out := c.GetFunctionRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetFunction *aws.Operation

// GetFunctionConfigurationRequest generates a request for the GetFunctionConfiguration operation.
func (c *Lambda) GetFunctionConfigurationRequest(input *GetFunctionConfigurationInput) (req *aws.Request, output *FunctionConfiguration) {
	if opGetFunctionConfiguration == nil {
		opGetFunctionConfiguration = &aws.Operation{
			Name:       "GetFunctionConfiguration",
			HTTPMethod: "GET",
			HTTPPath:   "/2014-11-13/functions/{FunctionName}/configuration",
		}
	}

	req = aws.NewRequest(c.Service, opGetFunctionConfiguration, input, output)
	output = &FunctionConfiguration{}
	req.Data = output
	return
}

func (c *Lambda) GetFunctionConfiguration(input *GetFunctionConfigurationInput) (output *FunctionConfiguration, err error) {
	req, out := c.GetFunctionConfigurationRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetFunctionConfiguration *aws.Operation

// InvokeAsyncRequest generates a request for the InvokeAsync operation.
func (c *Lambda) InvokeAsyncRequest(input *InvokeAsyncInput) (req *aws.Request, output *InvokeAsyncOutput) {
	if opInvokeAsync == nil {
		opInvokeAsync = &aws.Operation{
			Name:       "InvokeAsync",
			HTTPMethod: "POST",
			HTTPPath:   "/2014-11-13/functions/{FunctionName}/invoke-async/",
		}
	}

	req = aws.NewRequest(c.Service, opInvokeAsync, input, output)
	output = &InvokeAsyncOutput{}
	req.Data = output
	return
}

func (c *Lambda) InvokeAsync(input *InvokeAsyncInput) (output *InvokeAsyncOutput, err error) {
	req, out := c.InvokeAsyncRequest(input)
	output = out
	err = req.Send()
	return
}

var opInvokeAsync *aws.Operation

// ListEventSourcesRequest generates a request for the ListEventSources operation.
func (c *Lambda) ListEventSourcesRequest(input *ListEventSourcesInput) (req *aws.Request, output *ListEventSourcesOutput) {
	if opListEventSources == nil {
		opListEventSources = &aws.Operation{
			Name:       "ListEventSources",
			HTTPMethod: "GET",
			HTTPPath:   "/2014-11-13/event-source-mappings/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "NextMarker",
				LimitToken:      "MaxItems",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListEventSources, input, output)
	output = &ListEventSourcesOutput{}
	req.Data = output
	return
}

func (c *Lambda) ListEventSources(input *ListEventSourcesInput) (output *ListEventSourcesOutput, err error) {
	req, out := c.ListEventSourcesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *Lambda) ListEventSourcesPages(input *ListEventSourcesInput) <-chan *ListEventSourcesOutput {
	page, _ := c.ListEventSourcesRequest(input)
	ch := make(chan *ListEventSourcesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListEventSourcesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListEventSources *aws.Operation

// ListFunctionsRequest generates a request for the ListFunctions operation.
func (c *Lambda) ListFunctionsRequest(input *ListFunctionsInput) (req *aws.Request, output *ListFunctionsOutput) {
	if opListFunctions == nil {
		opListFunctions = &aws.Operation{
			Name:       "ListFunctions",
			HTTPMethod: "GET",
			HTTPPath:   "/2014-11-13/functions/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "NextMarker",
				LimitToken:      "MaxItems",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListFunctions, input, output)
	output = &ListFunctionsOutput{}
	req.Data = output
	return
}

func (c *Lambda) ListFunctions(input *ListFunctionsInput) (output *ListFunctionsOutput, err error) {
	req, out := c.ListFunctionsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *Lambda) ListFunctionsPages(input *ListFunctionsInput) <-chan *ListFunctionsOutput {
	page, _ := c.ListFunctionsRequest(input)
	ch := make(chan *ListFunctionsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListFunctionsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListFunctions *aws.Operation

// RemoveEventSourceRequest generates a request for the RemoveEventSource operation.
func (c *Lambda) RemoveEventSourceRequest(input *RemoveEventSourceInput) (req *aws.Request, output *RemoveEventSourceOutput) {
	if opRemoveEventSource == nil {
		opRemoveEventSource = &aws.Operation{
			Name:       "RemoveEventSource",
			HTTPMethod: "DELETE",
			HTTPPath:   "/2014-11-13/event-source-mappings/{UUID}",
		}
	}

	req = aws.NewRequest(c.Service, opRemoveEventSource, input, output)
	output = &RemoveEventSourceOutput{}
	req.Data = output
	return
}

func (c *Lambda) RemoveEventSource(input *RemoveEventSourceInput) (output *RemoveEventSourceOutput, err error) {
	req, out := c.RemoveEventSourceRequest(input)
	output = out
	err = req.Send()
	return
}

var opRemoveEventSource *aws.Operation

// UpdateFunctionConfigurationRequest generates a request for the UpdateFunctionConfiguration operation.
func (c *Lambda) UpdateFunctionConfigurationRequest(input *UpdateFunctionConfigurationInput) (req *aws.Request, output *FunctionConfiguration) {
	if opUpdateFunctionConfiguration == nil {
		opUpdateFunctionConfiguration = &aws.Operation{
			Name:       "UpdateFunctionConfiguration",
			HTTPMethod: "PUT",
			HTTPPath:   "/2014-11-13/functions/{FunctionName}/configuration",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateFunctionConfiguration, input, output)
	output = &FunctionConfiguration{}
	req.Data = output
	return
}

func (c *Lambda) UpdateFunctionConfiguration(input *UpdateFunctionConfigurationInput) (output *FunctionConfiguration, err error) {
	req, out := c.UpdateFunctionConfigurationRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateFunctionConfiguration *aws.Operation

// UploadFunctionRequest generates a request for the UploadFunction operation.
func (c *Lambda) UploadFunctionRequest(input *UploadFunctionInput) (req *aws.Request, output *FunctionConfiguration) {
	if opUploadFunction == nil {
		opUploadFunction = &aws.Operation{
			Name:       "UploadFunction",
			HTTPMethod: "PUT",
			HTTPPath:   "/2014-11-13/functions/{FunctionName}",
		}
	}

	req = aws.NewRequest(c.Service, opUploadFunction, input, output)
	output = &FunctionConfiguration{}
	req.Data = output
	return
}

func (c *Lambda) UploadFunction(input *UploadFunctionInput) (output *FunctionConfiguration, err error) {
	req, out := c.UploadFunctionRequest(input)
	output = out
	err = req.Send()
	return
}

var opUploadFunction *aws.Operation

type AddEventSourceInput struct {
	BatchSize    *int64              `type:"integer"`
	EventSource  *string             `type:"string" required:"true"`
	FunctionName *string             `type:"string" required:"true"`
	Parameters   *map[string]*string `type:"map"`
	Role         *string             `type:"string" required:"true"`

	metadataAddEventSourceInput `json:"-", xml:"-"`
}

type metadataAddEventSourceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteFunctionInput struct {
	FunctionName *string `location:"uri" locationName:"FunctionName" type:"string" required:"true"`

	metadataDeleteFunctionInput `json:"-", xml:"-"`
}

type metadataDeleteFunctionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteFunctionOutput struct {
	metadataDeleteFunctionOutput `json:"-", xml:"-"`
}

type metadataDeleteFunctionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EventSourceConfiguration struct {
	BatchSize    *int64              `type:"integer"`
	EventSource  *string             `type:"string"`
	FunctionName *string             `type:"string"`
	IsActive     *bool               `type:"boolean"`
	LastModified *time.Time          `type:"timestamp" timestampFormat:"unix"`
	Parameters   *map[string]*string `type:"map"`
	Role         *string             `type:"string"`
	Status       *string             `type:"string"`
	UUID         *string             `type:"string"`

	metadataEventSourceConfiguration `json:"-", xml:"-"`
}

type metadataEventSourceConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type FunctionCodeLocation struct {
	Location       *string `type:"string"`
	RepositoryType *string `type:"string"`

	metadataFunctionCodeLocation `json:"-", xml:"-"`
}

type metadataFunctionCodeLocation struct {
	SDKShapeTraits bool `type:"structure"`
}

type FunctionConfiguration struct {
	CodeSize        *int64     `type:"long"`
	ConfigurationID *string    `locationName:"ConfigurationId" type:"string"`
	Description     *string    `type:"string"`
	FunctionARN     *string    `type:"string"`
	FunctionName    *string    `type:"string"`
	Handler         *string    `type:"string"`
	LastModified    *time.Time `type:"timestamp" timestampFormat:"unix"`
	MemorySize      *int64     `type:"integer"`
	Mode            *string    `type:"string"`
	Role            *string    `type:"string"`
	Runtime         *string    `type:"string"`
	Timeout         *int64     `type:"integer"`

	metadataFunctionConfiguration `json:"-", xml:"-"`
}

type metadataFunctionConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetEventSourceInput struct {
	UUID *string `location:"uri" locationName:"UUID" type:"string" required:"true"`

	metadataGetEventSourceInput `json:"-", xml:"-"`
}

type metadataGetEventSourceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetFunctionConfigurationInput struct {
	FunctionName *string `location:"uri" locationName:"FunctionName" type:"string" required:"true"`

	metadataGetFunctionConfigurationInput `json:"-", xml:"-"`
}

type metadataGetFunctionConfigurationInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetFunctionInput struct {
	FunctionName *string `location:"uri" locationName:"FunctionName" type:"string" required:"true"`

	metadataGetFunctionInput `json:"-", xml:"-"`
}

type metadataGetFunctionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetFunctionOutput struct {
	Code          *FunctionCodeLocation  `type:"structure"`
	Configuration *FunctionConfiguration `type:"structure"`

	metadataGetFunctionOutput `json:"-", xml:"-"`
}

type metadataGetFunctionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvokeAsyncInput struct {
	FunctionName *string `location:"uri" locationName:"FunctionName" type:"string" required:"true"`
	InvokeArgs   []byte  `type:"blob" required:"true"`

	metadataInvokeAsyncInput `json:"-", xml:"-"`
}

type metadataInvokeAsyncInput struct {
	SDKShapeTraits bool `type:"structure" payload:"InvokeArgs"`
}

type InvokeAsyncOutput struct {
	Status *int64 `location:"statusCode" type:"integer"`

	metadataInvokeAsyncOutput `json:"-", xml:"-"`
}

type metadataInvokeAsyncOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListEventSourcesInput struct {
	EventSourceARN *string `location:"querystring" locationName:"EventSource" type:"string"`
	FunctionName   *string `location:"querystring" locationName:"FunctionName" type:"string"`
	Marker         *string `location:"querystring" locationName:"Marker" type:"string"`
	MaxItems       *int64  `location:"querystring" locationName:"MaxItems" type:"integer"`

	metadataListEventSourcesInput `json:"-", xml:"-"`
}

type metadataListEventSourcesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListEventSourcesOutput struct {
	EventSources []*EventSourceConfiguration `type:"list"`
	NextMarker   *string                     `type:"string"`

	metadataListEventSourcesOutput `json:"-", xml:"-"`
}

type metadataListEventSourcesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListFunctionsInput struct {
	Marker   *string `location:"querystring" locationName:"Marker" type:"string"`
	MaxItems *int64  `location:"querystring" locationName:"MaxItems" type:"integer"`

	metadataListFunctionsInput `json:"-", xml:"-"`
}

type metadataListFunctionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListFunctionsOutput struct {
	Functions  []*FunctionConfiguration `type:"list"`
	NextMarker *string                  `type:"string"`

	metadataListFunctionsOutput `json:"-", xml:"-"`
}

type metadataListFunctionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RemoveEventSourceInput struct {
	UUID *string `location:"uri" locationName:"UUID" type:"string" required:"true"`

	metadataRemoveEventSourceInput `json:"-", xml:"-"`
}

type metadataRemoveEventSourceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RemoveEventSourceOutput struct {
	metadataRemoveEventSourceOutput `json:"-", xml:"-"`
}

type metadataRemoveEventSourceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateFunctionConfigurationInput struct {
	Description  *string `location:"querystring" locationName:"Description" type:"string"`
	FunctionName *string `location:"uri" locationName:"FunctionName" type:"string" required:"true"`
	Handler      *string `location:"querystring" locationName:"Handler" type:"string"`
	MemorySize   *int64  `location:"querystring" locationName:"MemorySize" type:"integer"`
	Role         *string `location:"querystring" locationName:"Role" type:"string"`
	Timeout      *int64  `location:"querystring" locationName:"Timeout" type:"integer"`

	metadataUpdateFunctionConfigurationInput `json:"-", xml:"-"`
}

type metadataUpdateFunctionConfigurationInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UploadFunctionInput struct {
	Description  *string `location:"querystring" locationName:"Description" type:"string"`
	FunctionName *string `location:"uri" locationName:"FunctionName" type:"string" required:"true"`
	FunctionZip  []byte  `type:"blob" required:"true"`
	Handler      *string `location:"querystring" locationName:"Handler" type:"string" required:"true"`
	MemorySize   *int64  `location:"querystring" locationName:"MemorySize" type:"integer"`
	Mode         *string `location:"querystring" locationName:"Mode" type:"string" required:"true"`
	Role         *string `location:"querystring" locationName:"Role" type:"string" required:"true"`
	Runtime      *string `location:"querystring" locationName:"Runtime" type:"string" required:"true"`
	Timeout      *int64  `location:"querystring" locationName:"Timeout" type:"integer"`

	metadataUploadFunctionInput `json:"-", xml:"-"`
}

type metadataUploadFunctionInput struct {
	SDKShapeTraits bool `type:"structure" payload:"FunctionZip"`
}