package cloudwatch

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"time"

	"github.com/awslabs/aws-sdk-go/aws"
)

// DeleteAlarmsRequest generates a request for the DeleteAlarms operation.
func (c *CloudWatch) DeleteAlarmsRequest(input *DeleteAlarmsInput) (req *aws.Request, output *DeleteAlarmsOutput) {
	if opDeleteAlarms == nil {
		opDeleteAlarms = &aws.Operation{
			Name:       "DeleteAlarms",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteAlarms, input, output)
	output = &DeleteAlarmsOutput{}
	req.Data = output
	return
}

func (c *CloudWatch) DeleteAlarms(input *DeleteAlarmsInput) (output *DeleteAlarmsOutput, err error) {
	req, out := c.DeleteAlarmsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteAlarms *aws.Operation

// DescribeAlarmHistoryRequest generates a request for the DescribeAlarmHistory operation.
func (c *CloudWatch) DescribeAlarmHistoryRequest(input *DescribeAlarmHistoryInput) (req *aws.Request, output *DescribeAlarmHistoryOutput) {
	if opDescribeAlarmHistory == nil {
		opDescribeAlarmHistory = &aws.Operation{
			Name:       "DescribeAlarmHistory",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "NextToken",
				OutputToken:     "NextToken",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeAlarmHistory, input, output)
	output = &DescribeAlarmHistoryOutput{}
	req.Data = output
	return
}

func (c *CloudWatch) DescribeAlarmHistory(input *DescribeAlarmHistoryInput) (output *DescribeAlarmHistoryOutput, err error) {
	req, out := c.DescribeAlarmHistoryRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *CloudWatch) DescribeAlarmHistoryPages(input *DescribeAlarmHistoryInput) <-chan *DescribeAlarmHistoryOutput {
	page, _ := c.DescribeAlarmHistoryRequest(input)
	ch := make(chan *DescribeAlarmHistoryOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeAlarmHistoryOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeAlarmHistory *aws.Operation

// DescribeAlarmsRequest generates a request for the DescribeAlarms operation.
func (c *CloudWatch) DescribeAlarmsRequest(input *DescribeAlarmsInput) (req *aws.Request, output *DescribeAlarmsOutput) {
	if opDescribeAlarms == nil {
		opDescribeAlarms = &aws.Operation{
			Name:       "DescribeAlarms",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "NextToken",
				OutputToken:     "NextToken",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeAlarms, input, output)
	output = &DescribeAlarmsOutput{}
	req.Data = output
	return
}

func (c *CloudWatch) DescribeAlarms(input *DescribeAlarmsInput) (output *DescribeAlarmsOutput, err error) {
	req, out := c.DescribeAlarmsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *CloudWatch) DescribeAlarmsPages(input *DescribeAlarmsInput) <-chan *DescribeAlarmsOutput {
	page, _ := c.DescribeAlarmsRequest(input)
	ch := make(chan *DescribeAlarmsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeAlarmsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeAlarms *aws.Operation

// DescribeAlarmsForMetricRequest generates a request for the DescribeAlarmsForMetric operation.
func (c *CloudWatch) DescribeAlarmsForMetricRequest(input *DescribeAlarmsForMetricInput) (req *aws.Request, output *DescribeAlarmsForMetricOutput) {
	if opDescribeAlarmsForMetric == nil {
		opDescribeAlarmsForMetric = &aws.Operation{
			Name:       "DescribeAlarmsForMetric",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeAlarmsForMetric, input, output)
	output = &DescribeAlarmsForMetricOutput{}
	req.Data = output
	return
}

func (c *CloudWatch) DescribeAlarmsForMetric(input *DescribeAlarmsForMetricInput) (output *DescribeAlarmsForMetricOutput, err error) {
	req, out := c.DescribeAlarmsForMetricRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *CloudWatch) DescribeAlarmsForMetricPages(input *DescribeAlarmsForMetricInput) <-chan *DescribeAlarmsForMetricOutput {
	page, _ := c.DescribeAlarmsForMetricRequest(input)
	ch := make(chan *DescribeAlarmsForMetricOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeAlarmsForMetricOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeAlarmsForMetric *aws.Operation

// DisableAlarmActionsRequest generates a request for the DisableAlarmActions operation.
func (c *CloudWatch) DisableAlarmActionsRequest(input *DisableAlarmActionsInput) (req *aws.Request, output *DisableAlarmActionsOutput) {
	if opDisableAlarmActions == nil {
		opDisableAlarmActions = &aws.Operation{
			Name:       "DisableAlarmActions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDisableAlarmActions, input, output)
	output = &DisableAlarmActionsOutput{}
	req.Data = output
	return
}

func (c *CloudWatch) DisableAlarmActions(input *DisableAlarmActionsInput) (output *DisableAlarmActionsOutput, err error) {
	req, out := c.DisableAlarmActionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDisableAlarmActions *aws.Operation

// EnableAlarmActionsRequest generates a request for the EnableAlarmActions operation.
func (c *CloudWatch) EnableAlarmActionsRequest(input *EnableAlarmActionsInput) (req *aws.Request, output *EnableAlarmActionsOutput) {
	if opEnableAlarmActions == nil {
		opEnableAlarmActions = &aws.Operation{
			Name:       "EnableAlarmActions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opEnableAlarmActions, input, output)
	output = &EnableAlarmActionsOutput{}
	req.Data = output
	return
}

func (c *CloudWatch) EnableAlarmActions(input *EnableAlarmActionsInput) (output *EnableAlarmActionsOutput, err error) {
	req, out := c.EnableAlarmActionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opEnableAlarmActions *aws.Operation

// GetMetricStatisticsRequest generates a request for the GetMetricStatistics operation.
func (c *CloudWatch) GetMetricStatisticsRequest(input *GetMetricStatisticsInput) (req *aws.Request, output *GetMetricStatisticsOutput) {
	if opGetMetricStatistics == nil {
		opGetMetricStatistics = &aws.Operation{
			Name:       "GetMetricStatistics",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetMetricStatistics, input, output)
	output = &GetMetricStatisticsOutput{}
	req.Data = output
	return
}

func (c *CloudWatch) GetMetricStatistics(input *GetMetricStatisticsInput) (output *GetMetricStatisticsOutput, err error) {
	req, out := c.GetMetricStatisticsRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetMetricStatistics *aws.Operation

// ListMetricsRequest generates a request for the ListMetrics operation.
func (c *CloudWatch) ListMetricsRequest(input *ListMetricsInput) (req *aws.Request, output *ListMetricsOutput) {
	if opListMetrics == nil {
		opListMetrics = &aws.Operation{
			Name:       "ListMetrics",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "NextToken",
				OutputToken:     "NextToken",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListMetrics, input, output)
	output = &ListMetricsOutput{}
	req.Data = output
	return
}

func (c *CloudWatch) ListMetrics(input *ListMetricsInput) (output *ListMetricsOutput, err error) {
	req, out := c.ListMetricsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *CloudWatch) ListMetricsPages(input *ListMetricsInput) <-chan *ListMetricsOutput {
	page, _ := c.ListMetricsRequest(input)
	ch := make(chan *ListMetricsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListMetricsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListMetrics *aws.Operation

// PutMetricAlarmRequest generates a request for the PutMetricAlarm operation.
func (c *CloudWatch) PutMetricAlarmRequest(input *PutMetricAlarmInput) (req *aws.Request, output *PutMetricAlarmOutput) {
	if opPutMetricAlarm == nil {
		opPutMetricAlarm = &aws.Operation{
			Name:       "PutMetricAlarm",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPutMetricAlarm, input, output)
	output = &PutMetricAlarmOutput{}
	req.Data = output
	return
}

func (c *CloudWatch) PutMetricAlarm(input *PutMetricAlarmInput) (output *PutMetricAlarmOutput, err error) {
	req, out := c.PutMetricAlarmRequest(input)
	output = out
	err = req.Send()
	return
}

var opPutMetricAlarm *aws.Operation

// PutMetricDataRequest generates a request for the PutMetricData operation.
func (c *CloudWatch) PutMetricDataRequest(input *PutMetricDataInput) (req *aws.Request, output *PutMetricDataOutput) {
	if opPutMetricData == nil {
		opPutMetricData = &aws.Operation{
			Name:       "PutMetricData",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPutMetricData, input, output)
	output = &PutMetricDataOutput{}
	req.Data = output
	return
}

func (c *CloudWatch) PutMetricData(input *PutMetricDataInput) (output *PutMetricDataOutput, err error) {
	req, out := c.PutMetricDataRequest(input)
	output = out
	err = req.Send()
	return
}

var opPutMetricData *aws.Operation

// SetAlarmStateRequest generates a request for the SetAlarmState operation.
func (c *CloudWatch) SetAlarmStateRequest(input *SetAlarmStateInput) (req *aws.Request, output *SetAlarmStateOutput) {
	if opSetAlarmState == nil {
		opSetAlarmState = &aws.Operation{
			Name:       "SetAlarmState",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opSetAlarmState, input, output)
	output = &SetAlarmStateOutput{}
	req.Data = output
	return
}

func (c *CloudWatch) SetAlarmState(input *SetAlarmStateInput) (output *SetAlarmStateOutput, err error) {
	req, out := c.SetAlarmStateRequest(input)
	output = out
	err = req.Send()
	return
}

var opSetAlarmState *aws.Operation

type AlarmHistoryItem struct {
	AlarmName       *string    `type:"string"`
	HistoryData     *string    `type:"string"`
	HistoryItemType *string    `type:"string"`
	HistorySummary  *string    `type:"string"`
	Timestamp       *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataAlarmHistoryItem `json:"-", xml:"-"`
}

type metadataAlarmHistoryItem struct {
	SDKShapeTraits bool `type:"structure"`
}

type Datapoint struct {
	Average     *float64   `type:"double"`
	Maximum     *float64   `type:"double"`
	Minimum     *float64   `type:"double"`
	SampleCount *float64   `type:"double"`
	Sum         *float64   `type:"double"`
	Timestamp   *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Unit        *string    `type:"string"`

	metadataDatapoint `json:"-", xml:"-"`
}

type metadataDatapoint struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteAlarmsInput struct {
	AlarmNames []*string `type:"list" required:"true"`

	metadataDeleteAlarmsInput `json:"-", xml:"-"`
}

type metadataDeleteAlarmsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteAlarmsOutput struct {
	metadataDeleteAlarmsOutput `json:"-", xml:"-"`
}

type metadataDeleteAlarmsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAlarmHistoryInput struct {
	AlarmName       *string    `type:"string"`
	EndDate         *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	HistoryItemType *string    `type:"string"`
	MaxRecords      *int64     `type:"integer"`
	NextToken       *string    `type:"string"`
	StartDate       *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataDescribeAlarmHistoryInput `json:"-", xml:"-"`
}

type metadataDescribeAlarmHistoryInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAlarmHistoryOutput struct {
	AlarmHistoryItems []*AlarmHistoryItem `type:"list"`
	NextToken         *string             `type:"string"`

	metadataDescribeAlarmHistoryOutput `json:"-", xml:"-"`
}

type metadataDescribeAlarmHistoryOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAlarmsForMetricInput struct {
	Dimensions []*Dimension `type:"list"`
	MetricName *string      `type:"string" required:"true"`
	Namespace  *string      `type:"string" required:"true"`
	Period     *int64       `type:"integer"`
	Statistic  *string      `type:"string"`
	Unit       *string      `type:"string"`

	metadataDescribeAlarmsForMetricInput `json:"-", xml:"-"`
}

type metadataDescribeAlarmsForMetricInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAlarmsForMetricOutput struct {
	MetricAlarms []*MetricAlarm `type:"list"`

	metadataDescribeAlarmsForMetricOutput `json:"-", xml:"-"`
}

type metadataDescribeAlarmsForMetricOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAlarmsInput struct {
	ActionPrefix    *string   `type:"string"`
	AlarmNamePrefix *string   `type:"string"`
	AlarmNames      []*string `type:"list"`
	MaxRecords      *int64    `type:"integer"`
	NextToken       *string   `type:"string"`
	StateValue      *string   `type:"string"`

	metadataDescribeAlarmsInput `json:"-", xml:"-"`
}

type metadataDescribeAlarmsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAlarmsOutput struct {
	MetricAlarms []*MetricAlarm `type:"list"`
	NextToken    *string        `type:"string"`

	metadataDescribeAlarmsOutput `json:"-", xml:"-"`
}

type metadataDescribeAlarmsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Dimension struct {
	Name  *string `type:"string" required:"true"`
	Value *string `type:"string" required:"true"`

	metadataDimension `json:"-", xml:"-"`
}

type metadataDimension struct {
	SDKShapeTraits bool `type:"structure"`
}

type DimensionFilter struct {
	Name  *string `type:"string" required:"true"`
	Value *string `type:"string"`

	metadataDimensionFilter `json:"-", xml:"-"`
}

type metadataDimensionFilter struct {
	SDKShapeTraits bool `type:"structure"`
}

type DisableAlarmActionsInput struct {
	AlarmNames []*string `type:"list" required:"true"`

	metadataDisableAlarmActionsInput `json:"-", xml:"-"`
}

type metadataDisableAlarmActionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DisableAlarmActionsOutput struct {
	metadataDisableAlarmActionsOutput `json:"-", xml:"-"`
}

type metadataDisableAlarmActionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnableAlarmActionsInput struct {
	AlarmNames []*string `type:"list" required:"true"`

	metadataEnableAlarmActionsInput `json:"-", xml:"-"`
}

type metadataEnableAlarmActionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnableAlarmActionsOutput struct {
	metadataEnableAlarmActionsOutput `json:"-", xml:"-"`
}

type metadataEnableAlarmActionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetMetricStatisticsInput struct {
	Dimensions []*Dimension `type:"list"`
	EndTime    *time.Time   `type:"timestamp" timestampFormat:"iso8601" required:"true"`
	MetricName *string      `type:"string" required:"true"`
	Namespace  *string      `type:"string" required:"true"`
	Period     *int64       `type:"integer" required:"true"`
	StartTime  *time.Time   `type:"timestamp" timestampFormat:"iso8601" required:"true"`
	Statistics []*string    `type:"list" required:"true"`
	Unit       *string      `type:"string"`

	metadataGetMetricStatisticsInput `json:"-", xml:"-"`
}

type metadataGetMetricStatisticsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetMetricStatisticsOutput struct {
	Datapoints []*Datapoint `type:"list"`
	Label      *string      `type:"string"`

	metadataGetMetricStatisticsOutput `json:"-", xml:"-"`
}

type metadataGetMetricStatisticsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListMetricsInput struct {
	Dimensions []*DimensionFilter `type:"list"`
	MetricName *string            `type:"string"`
	Namespace  *string            `type:"string"`
	NextToken  *string            `type:"string"`

	metadataListMetricsInput `json:"-", xml:"-"`
}

type metadataListMetricsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListMetricsOutput struct {
	Metrics   []*Metric `type:"list"`
	NextToken *string   `type:"string"`

	metadataListMetricsOutput `json:"-", xml:"-"`
}

type metadataListMetricsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Metric struct {
	Dimensions []*Dimension `type:"list"`
	MetricName *string      `type:"string"`
	Namespace  *string      `type:"string"`

	metadataMetric `json:"-", xml:"-"`
}

type metadataMetric struct {
	SDKShapeTraits bool `type:"structure"`
}

type MetricAlarm struct {
	ActionsEnabled                     *bool        `type:"boolean"`
	AlarmARN                           *string      `locationName:"AlarmArn" type:"string"`
	AlarmActions                       []*string    `type:"list"`
	AlarmConfigurationUpdatedTimestamp *time.Time   `type:"timestamp" timestampFormat:"iso8601"`
	AlarmDescription                   *string      `type:"string"`
	AlarmName                          *string      `type:"string"`
	ComparisonOperator                 *string      `type:"string"`
	Dimensions                         []*Dimension `type:"list"`
	EvaluationPeriods                  *int64       `type:"integer"`
	InsufficientDataActions            []*string    `type:"list"`
	MetricName                         *string      `type:"string"`
	Namespace                          *string      `type:"string"`
	OKActions                          []*string    `type:"list"`
	Period                             *int64       `type:"integer"`
	StateReason                        *string      `type:"string"`
	StateReasonData                    *string      `type:"string"`
	StateUpdatedTimestamp              *time.Time   `type:"timestamp" timestampFormat:"iso8601"`
	StateValue                         *string      `type:"string"`
	Statistic                          *string      `type:"string"`
	Threshold                          *float64     `type:"double"`
	Unit                               *string      `type:"string"`

	metadataMetricAlarm `json:"-", xml:"-"`
}

type metadataMetricAlarm struct {
	SDKShapeTraits bool `type:"structure"`
}

type MetricDatum struct {
	Dimensions      []*Dimension  `type:"list"`
	MetricName      *string       `type:"string" required:"true"`
	StatisticValues *StatisticSet `type:"structure"`
	Timestamp       *time.Time    `type:"timestamp" timestampFormat:"iso8601"`
	Unit            *string       `type:"string"`
	Value           *float64      `type:"double"`

	metadataMetricDatum `json:"-", xml:"-"`
}

type metadataMetricDatum struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutMetricAlarmInput struct {
	ActionsEnabled          *bool        `type:"boolean"`
	AlarmActions            []*string    `type:"list"`
	AlarmDescription        *string      `type:"string"`
	AlarmName               *string      `type:"string" required:"true"`
	ComparisonOperator      *string      `type:"string" required:"true"`
	Dimensions              []*Dimension `type:"list"`
	EvaluationPeriods       *int64       `type:"integer" required:"true"`
	InsufficientDataActions []*string    `type:"list"`
	MetricName              *string      `type:"string" required:"true"`
	Namespace               *string      `type:"string" required:"true"`
	OKActions               []*string    `type:"list"`
	Period                  *int64       `type:"integer" required:"true"`
	Statistic               *string      `type:"string" required:"true"`
	Threshold               *float64     `type:"double" required:"true"`
	Unit                    *string      `type:"string"`

	metadataPutMetricAlarmInput `json:"-", xml:"-"`
}

type metadataPutMetricAlarmInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutMetricAlarmOutput struct {
	metadataPutMetricAlarmOutput `json:"-", xml:"-"`
}

type metadataPutMetricAlarmOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutMetricDataInput struct {
	MetricData []*MetricDatum `type:"list" required:"true"`
	Namespace  *string        `type:"string" required:"true"`

	metadataPutMetricDataInput `json:"-", xml:"-"`
}

type metadataPutMetricDataInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutMetricDataOutput struct {
	metadataPutMetricDataOutput `json:"-", xml:"-"`
}

type metadataPutMetricDataOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type SetAlarmStateInput struct {
	AlarmName       *string `type:"string" required:"true"`
	StateReason     *string `type:"string" required:"true"`
	StateReasonData *string `type:"string"`
	StateValue      *string `type:"string" required:"true"`

	metadataSetAlarmStateInput `json:"-", xml:"-"`
}

type metadataSetAlarmStateInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type SetAlarmStateOutput struct {
	metadataSetAlarmStateOutput `json:"-", xml:"-"`
}

type metadataSetAlarmStateOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type StatisticSet struct {
	Maximum     *float64 `type:"double" required:"true"`
	Minimum     *float64 `type:"double" required:"true"`
	SampleCount *float64 `type:"double" required:"true"`
	Sum         *float64 `type:"double" required:"true"`

	metadataStatisticSet `json:"-", xml:"-"`
}

type metadataStatisticSet struct {
	SDKShapeTraits bool `type:"structure"`
}