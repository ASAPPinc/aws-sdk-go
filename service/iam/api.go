package iam

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"time"

	"github.com/awslabs/aws-sdk-go/aws"
)

// AddClientIDToOpenIDConnectProviderRequest generates a request for the AddClientIDToOpenIDConnectProvider operation.
func (c *IAM) AddClientIDToOpenIDConnectProviderRequest(input *AddClientIDToOpenIDConnectProviderInput) (req *aws.Request, output *AddClientIDToOpenIDConnectProviderOutput) {
	if opAddClientIDToOpenIDConnectProvider == nil {
		opAddClientIDToOpenIDConnectProvider = &aws.Operation{
			Name:       "AddClientIDToOpenIDConnectProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAddClientIDToOpenIDConnectProvider, input, output)
	output = &AddClientIDToOpenIDConnectProviderOutput{}
	req.Data = output
	return
}

func (c *IAM) AddClientIDToOpenIDConnectProvider(input *AddClientIDToOpenIDConnectProviderInput) (output *AddClientIDToOpenIDConnectProviderOutput, err error) {
	req, out := c.AddClientIDToOpenIDConnectProviderRequest(input)
	output = out
	err = req.Send()
	return
}

var opAddClientIDToOpenIDConnectProvider *aws.Operation

// AddRoleToInstanceProfileRequest generates a request for the AddRoleToInstanceProfile operation.
func (c *IAM) AddRoleToInstanceProfileRequest(input *AddRoleToInstanceProfileInput) (req *aws.Request, output *AddRoleToInstanceProfileOutput) {
	if opAddRoleToInstanceProfile == nil {
		opAddRoleToInstanceProfile = &aws.Operation{
			Name:       "AddRoleToInstanceProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAddRoleToInstanceProfile, input, output)
	output = &AddRoleToInstanceProfileOutput{}
	req.Data = output
	return
}

func (c *IAM) AddRoleToInstanceProfile(input *AddRoleToInstanceProfileInput) (output *AddRoleToInstanceProfileOutput, err error) {
	req, out := c.AddRoleToInstanceProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opAddRoleToInstanceProfile *aws.Operation

// AddUserToGroupRequest generates a request for the AddUserToGroup operation.
func (c *IAM) AddUserToGroupRequest(input *AddUserToGroupInput) (req *aws.Request, output *AddUserToGroupOutput) {
	if opAddUserToGroup == nil {
		opAddUserToGroup = &aws.Operation{
			Name:       "AddUserToGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAddUserToGroup, input, output)
	output = &AddUserToGroupOutput{}
	req.Data = output
	return
}

func (c *IAM) AddUserToGroup(input *AddUserToGroupInput) (output *AddUserToGroupOutput, err error) {
	req, out := c.AddUserToGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opAddUserToGroup *aws.Operation

// AttachGroupPolicyRequest generates a request for the AttachGroupPolicy operation.
func (c *IAM) AttachGroupPolicyRequest(input *AttachGroupPolicyInput) (req *aws.Request, output *AttachGroupPolicyOutput) {
	if opAttachGroupPolicy == nil {
		opAttachGroupPolicy = &aws.Operation{
			Name:       "AttachGroupPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAttachGroupPolicy, input, output)
	output = &AttachGroupPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) AttachGroupPolicy(input *AttachGroupPolicyInput) (output *AttachGroupPolicyOutput, err error) {
	req, out := c.AttachGroupPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opAttachGroupPolicy *aws.Operation

// AttachRolePolicyRequest generates a request for the AttachRolePolicy operation.
func (c *IAM) AttachRolePolicyRequest(input *AttachRolePolicyInput) (req *aws.Request, output *AttachRolePolicyOutput) {
	if opAttachRolePolicy == nil {
		opAttachRolePolicy = &aws.Operation{
			Name:       "AttachRolePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAttachRolePolicy, input, output)
	output = &AttachRolePolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) AttachRolePolicy(input *AttachRolePolicyInput) (output *AttachRolePolicyOutput, err error) {
	req, out := c.AttachRolePolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opAttachRolePolicy *aws.Operation

// AttachUserPolicyRequest generates a request for the AttachUserPolicy operation.
func (c *IAM) AttachUserPolicyRequest(input *AttachUserPolicyInput) (req *aws.Request, output *AttachUserPolicyOutput) {
	if opAttachUserPolicy == nil {
		opAttachUserPolicy = &aws.Operation{
			Name:       "AttachUserPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAttachUserPolicy, input, output)
	output = &AttachUserPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) AttachUserPolicy(input *AttachUserPolicyInput) (output *AttachUserPolicyOutput, err error) {
	req, out := c.AttachUserPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opAttachUserPolicy *aws.Operation

// ChangePasswordRequest generates a request for the ChangePassword operation.
func (c *IAM) ChangePasswordRequest(input *ChangePasswordInput) (req *aws.Request, output *ChangePasswordOutput) {
	if opChangePassword == nil {
		opChangePassword = &aws.Operation{
			Name:       "ChangePassword",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opChangePassword, input, output)
	output = &ChangePasswordOutput{}
	req.Data = output
	return
}

func (c *IAM) ChangePassword(input *ChangePasswordInput) (output *ChangePasswordOutput, err error) {
	req, out := c.ChangePasswordRequest(input)
	output = out
	err = req.Send()
	return
}

var opChangePassword *aws.Operation

// CreateAccessKeyRequest generates a request for the CreateAccessKey operation.
func (c *IAM) CreateAccessKeyRequest(input *CreateAccessKeyInput) (req *aws.Request, output *CreateAccessKeyOutput) {
	if opCreateAccessKey == nil {
		opCreateAccessKey = &aws.Operation{
			Name:       "CreateAccessKey",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateAccessKey, input, output)
	output = &CreateAccessKeyOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateAccessKey(input *CreateAccessKeyInput) (output *CreateAccessKeyOutput, err error) {
	req, out := c.CreateAccessKeyRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateAccessKey *aws.Operation

// CreateAccountAliasRequest generates a request for the CreateAccountAlias operation.
func (c *IAM) CreateAccountAliasRequest(input *CreateAccountAliasInput) (req *aws.Request, output *CreateAccountAliasOutput) {
	if opCreateAccountAlias == nil {
		opCreateAccountAlias = &aws.Operation{
			Name:       "CreateAccountAlias",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateAccountAlias, input, output)
	output = &CreateAccountAliasOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateAccountAlias(input *CreateAccountAliasInput) (output *CreateAccountAliasOutput, err error) {
	req, out := c.CreateAccountAliasRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateAccountAlias *aws.Operation

// CreateGroupRequest generates a request for the CreateGroup operation.
func (c *IAM) CreateGroupRequest(input *CreateGroupInput) (req *aws.Request, output *CreateGroupOutput) {
	if opCreateGroup == nil {
		opCreateGroup = &aws.Operation{
			Name:       "CreateGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateGroup, input, output)
	output = &CreateGroupOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateGroup(input *CreateGroupInput) (output *CreateGroupOutput, err error) {
	req, out := c.CreateGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateGroup *aws.Operation

// CreateInstanceProfileRequest generates a request for the CreateInstanceProfile operation.
func (c *IAM) CreateInstanceProfileRequest(input *CreateInstanceProfileInput) (req *aws.Request, output *CreateInstanceProfileOutput) {
	if opCreateInstanceProfile == nil {
		opCreateInstanceProfile = &aws.Operation{
			Name:       "CreateInstanceProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateInstanceProfile, input, output)
	output = &CreateInstanceProfileOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateInstanceProfile(input *CreateInstanceProfileInput) (output *CreateInstanceProfileOutput, err error) {
	req, out := c.CreateInstanceProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateInstanceProfile *aws.Operation

// CreateLoginProfileRequest generates a request for the CreateLoginProfile operation.
func (c *IAM) CreateLoginProfileRequest(input *CreateLoginProfileInput) (req *aws.Request, output *CreateLoginProfileOutput) {
	if opCreateLoginProfile == nil {
		opCreateLoginProfile = &aws.Operation{
			Name:       "CreateLoginProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateLoginProfile, input, output)
	output = &CreateLoginProfileOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateLoginProfile(input *CreateLoginProfileInput) (output *CreateLoginProfileOutput, err error) {
	req, out := c.CreateLoginProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateLoginProfile *aws.Operation

// CreateOpenIDConnectProviderRequest generates a request for the CreateOpenIDConnectProvider operation.
func (c *IAM) CreateOpenIDConnectProviderRequest(input *CreateOpenIDConnectProviderInput) (req *aws.Request, output *CreateOpenIDConnectProviderOutput) {
	if opCreateOpenIDConnectProvider == nil {
		opCreateOpenIDConnectProvider = &aws.Operation{
			Name:       "CreateOpenIDConnectProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateOpenIDConnectProvider, input, output)
	output = &CreateOpenIDConnectProviderOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateOpenIDConnectProvider(input *CreateOpenIDConnectProviderInput) (output *CreateOpenIDConnectProviderOutput, err error) {
	req, out := c.CreateOpenIDConnectProviderRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateOpenIDConnectProvider *aws.Operation

// CreatePolicyRequest generates a request for the CreatePolicy operation.
func (c *IAM) CreatePolicyRequest(input *CreatePolicyInput) (req *aws.Request, output *CreatePolicyOutput) {
	if opCreatePolicy == nil {
		opCreatePolicy = &aws.Operation{
			Name:       "CreatePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreatePolicy, input, output)
	output = &CreatePolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) CreatePolicy(input *CreatePolicyInput) (output *CreatePolicyOutput, err error) {
	req, out := c.CreatePolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreatePolicy *aws.Operation

// CreatePolicyVersionRequest generates a request for the CreatePolicyVersion operation.
func (c *IAM) CreatePolicyVersionRequest(input *CreatePolicyVersionInput) (req *aws.Request, output *CreatePolicyVersionOutput) {
	if opCreatePolicyVersion == nil {
		opCreatePolicyVersion = &aws.Operation{
			Name:       "CreatePolicyVersion",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreatePolicyVersion, input, output)
	output = &CreatePolicyVersionOutput{}
	req.Data = output
	return
}

func (c *IAM) CreatePolicyVersion(input *CreatePolicyVersionInput) (output *CreatePolicyVersionOutput, err error) {
	req, out := c.CreatePolicyVersionRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreatePolicyVersion *aws.Operation

// CreateRoleRequest generates a request for the CreateRole operation.
func (c *IAM) CreateRoleRequest(input *CreateRoleInput) (req *aws.Request, output *CreateRoleOutput) {
	if opCreateRole == nil {
		opCreateRole = &aws.Operation{
			Name:       "CreateRole",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateRole, input, output)
	output = &CreateRoleOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateRole(input *CreateRoleInput) (output *CreateRoleOutput, err error) {
	req, out := c.CreateRoleRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateRole *aws.Operation

// CreateSAMLProviderRequest generates a request for the CreateSAMLProvider operation.
func (c *IAM) CreateSAMLProviderRequest(input *CreateSAMLProviderInput) (req *aws.Request, output *CreateSAMLProviderOutput) {
	if opCreateSAMLProvider == nil {
		opCreateSAMLProvider = &aws.Operation{
			Name:       "CreateSAMLProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateSAMLProvider, input, output)
	output = &CreateSAMLProviderOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateSAMLProvider(input *CreateSAMLProviderInput) (output *CreateSAMLProviderOutput, err error) {
	req, out := c.CreateSAMLProviderRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateSAMLProvider *aws.Operation

// CreateUserRequest generates a request for the CreateUser operation.
func (c *IAM) CreateUserRequest(input *CreateUserInput) (req *aws.Request, output *CreateUserOutput) {
	if opCreateUser == nil {
		opCreateUser = &aws.Operation{
			Name:       "CreateUser",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateUser, input, output)
	output = &CreateUserOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateUser(input *CreateUserInput) (output *CreateUserOutput, err error) {
	req, out := c.CreateUserRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateUser *aws.Operation

// CreateVirtualMFADeviceRequest generates a request for the CreateVirtualMFADevice operation.
func (c *IAM) CreateVirtualMFADeviceRequest(input *CreateVirtualMFADeviceInput) (req *aws.Request, output *CreateVirtualMFADeviceOutput) {
	if opCreateVirtualMFADevice == nil {
		opCreateVirtualMFADevice = &aws.Operation{
			Name:       "CreateVirtualMFADevice",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateVirtualMFADevice, input, output)
	output = &CreateVirtualMFADeviceOutput{}
	req.Data = output
	return
}

func (c *IAM) CreateVirtualMFADevice(input *CreateVirtualMFADeviceInput) (output *CreateVirtualMFADeviceOutput, err error) {
	req, out := c.CreateVirtualMFADeviceRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateVirtualMFADevice *aws.Operation

// DeactivateMFADeviceRequest generates a request for the DeactivateMFADevice operation.
func (c *IAM) DeactivateMFADeviceRequest(input *DeactivateMFADeviceInput) (req *aws.Request, output *DeactivateMFADeviceOutput) {
	if opDeactivateMFADevice == nil {
		opDeactivateMFADevice = &aws.Operation{
			Name:       "DeactivateMFADevice",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeactivateMFADevice, input, output)
	output = &DeactivateMFADeviceOutput{}
	req.Data = output
	return
}

func (c *IAM) DeactivateMFADevice(input *DeactivateMFADeviceInput) (output *DeactivateMFADeviceOutput, err error) {
	req, out := c.DeactivateMFADeviceRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeactivateMFADevice *aws.Operation

// DeleteAccessKeyRequest generates a request for the DeleteAccessKey operation.
func (c *IAM) DeleteAccessKeyRequest(input *DeleteAccessKeyInput) (req *aws.Request, output *DeleteAccessKeyOutput) {
	if opDeleteAccessKey == nil {
		opDeleteAccessKey = &aws.Operation{
			Name:       "DeleteAccessKey",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteAccessKey, input, output)
	output = &DeleteAccessKeyOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteAccessKey(input *DeleteAccessKeyInput) (output *DeleteAccessKeyOutput, err error) {
	req, out := c.DeleteAccessKeyRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteAccessKey *aws.Operation

// DeleteAccountAliasRequest generates a request for the DeleteAccountAlias operation.
func (c *IAM) DeleteAccountAliasRequest(input *DeleteAccountAliasInput) (req *aws.Request, output *DeleteAccountAliasOutput) {
	if opDeleteAccountAlias == nil {
		opDeleteAccountAlias = &aws.Operation{
			Name:       "DeleteAccountAlias",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteAccountAlias, input, output)
	output = &DeleteAccountAliasOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteAccountAlias(input *DeleteAccountAliasInput) (output *DeleteAccountAliasOutput, err error) {
	req, out := c.DeleteAccountAliasRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteAccountAlias *aws.Operation

// DeleteAccountPasswordPolicyRequest generates a request for the DeleteAccountPasswordPolicy operation.
func (c *IAM) DeleteAccountPasswordPolicyRequest(input *DeleteAccountPasswordPolicyInput) (req *aws.Request, output *DeleteAccountPasswordPolicyOutput) {
	if opDeleteAccountPasswordPolicy == nil {
		opDeleteAccountPasswordPolicy = &aws.Operation{
			Name:       "DeleteAccountPasswordPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteAccountPasswordPolicy, input, output)
	output = &DeleteAccountPasswordPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteAccountPasswordPolicy(input *DeleteAccountPasswordPolicyInput) (output *DeleteAccountPasswordPolicyOutput, err error) {
	req, out := c.DeleteAccountPasswordPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteAccountPasswordPolicy *aws.Operation

// DeleteGroupRequest generates a request for the DeleteGroup operation.
func (c *IAM) DeleteGroupRequest(input *DeleteGroupInput) (req *aws.Request, output *DeleteGroupOutput) {
	if opDeleteGroup == nil {
		opDeleteGroup = &aws.Operation{
			Name:       "DeleteGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteGroup, input, output)
	output = &DeleteGroupOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteGroup(input *DeleteGroupInput) (output *DeleteGroupOutput, err error) {
	req, out := c.DeleteGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteGroup *aws.Operation

// DeleteGroupPolicyRequest generates a request for the DeleteGroupPolicy operation.
func (c *IAM) DeleteGroupPolicyRequest(input *DeleteGroupPolicyInput) (req *aws.Request, output *DeleteGroupPolicyOutput) {
	if opDeleteGroupPolicy == nil {
		opDeleteGroupPolicy = &aws.Operation{
			Name:       "DeleteGroupPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteGroupPolicy, input, output)
	output = &DeleteGroupPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteGroupPolicy(input *DeleteGroupPolicyInput) (output *DeleteGroupPolicyOutput, err error) {
	req, out := c.DeleteGroupPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteGroupPolicy *aws.Operation

// DeleteInstanceProfileRequest generates a request for the DeleteInstanceProfile operation.
func (c *IAM) DeleteInstanceProfileRequest(input *DeleteInstanceProfileInput) (req *aws.Request, output *DeleteInstanceProfileOutput) {
	if opDeleteInstanceProfile == nil {
		opDeleteInstanceProfile = &aws.Operation{
			Name:       "DeleteInstanceProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteInstanceProfile, input, output)
	output = &DeleteInstanceProfileOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteInstanceProfile(input *DeleteInstanceProfileInput) (output *DeleteInstanceProfileOutput, err error) {
	req, out := c.DeleteInstanceProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteInstanceProfile *aws.Operation

// DeleteLoginProfileRequest generates a request for the DeleteLoginProfile operation.
func (c *IAM) DeleteLoginProfileRequest(input *DeleteLoginProfileInput) (req *aws.Request, output *DeleteLoginProfileOutput) {
	if opDeleteLoginProfile == nil {
		opDeleteLoginProfile = &aws.Operation{
			Name:       "DeleteLoginProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteLoginProfile, input, output)
	output = &DeleteLoginProfileOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteLoginProfile(input *DeleteLoginProfileInput) (output *DeleteLoginProfileOutput, err error) {
	req, out := c.DeleteLoginProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteLoginProfile *aws.Operation

// DeleteOpenIDConnectProviderRequest generates a request for the DeleteOpenIDConnectProvider operation.
func (c *IAM) DeleteOpenIDConnectProviderRequest(input *DeleteOpenIDConnectProviderInput) (req *aws.Request, output *DeleteOpenIDConnectProviderOutput) {
	if opDeleteOpenIDConnectProvider == nil {
		opDeleteOpenIDConnectProvider = &aws.Operation{
			Name:       "DeleteOpenIDConnectProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteOpenIDConnectProvider, input, output)
	output = &DeleteOpenIDConnectProviderOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteOpenIDConnectProvider(input *DeleteOpenIDConnectProviderInput) (output *DeleteOpenIDConnectProviderOutput, err error) {
	req, out := c.DeleteOpenIDConnectProviderRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteOpenIDConnectProvider *aws.Operation

// DeletePolicyRequest generates a request for the DeletePolicy operation.
func (c *IAM) DeletePolicyRequest(input *DeletePolicyInput) (req *aws.Request, output *DeletePolicyOutput) {
	if opDeletePolicy == nil {
		opDeletePolicy = &aws.Operation{
			Name:       "DeletePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeletePolicy, input, output)
	output = &DeletePolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) DeletePolicy(input *DeletePolicyInput) (output *DeletePolicyOutput, err error) {
	req, out := c.DeletePolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeletePolicy *aws.Operation

// DeletePolicyVersionRequest generates a request for the DeletePolicyVersion operation.
func (c *IAM) DeletePolicyVersionRequest(input *DeletePolicyVersionInput) (req *aws.Request, output *DeletePolicyVersionOutput) {
	if opDeletePolicyVersion == nil {
		opDeletePolicyVersion = &aws.Operation{
			Name:       "DeletePolicyVersion",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeletePolicyVersion, input, output)
	output = &DeletePolicyVersionOutput{}
	req.Data = output
	return
}

func (c *IAM) DeletePolicyVersion(input *DeletePolicyVersionInput) (output *DeletePolicyVersionOutput, err error) {
	req, out := c.DeletePolicyVersionRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeletePolicyVersion *aws.Operation

// DeleteRoleRequest generates a request for the DeleteRole operation.
func (c *IAM) DeleteRoleRequest(input *DeleteRoleInput) (req *aws.Request, output *DeleteRoleOutput) {
	if opDeleteRole == nil {
		opDeleteRole = &aws.Operation{
			Name:       "DeleteRole",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteRole, input, output)
	output = &DeleteRoleOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteRole(input *DeleteRoleInput) (output *DeleteRoleOutput, err error) {
	req, out := c.DeleteRoleRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteRole *aws.Operation

// DeleteRolePolicyRequest generates a request for the DeleteRolePolicy operation.
func (c *IAM) DeleteRolePolicyRequest(input *DeleteRolePolicyInput) (req *aws.Request, output *DeleteRolePolicyOutput) {
	if opDeleteRolePolicy == nil {
		opDeleteRolePolicy = &aws.Operation{
			Name:       "DeleteRolePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteRolePolicy, input, output)
	output = &DeleteRolePolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteRolePolicy(input *DeleteRolePolicyInput) (output *DeleteRolePolicyOutput, err error) {
	req, out := c.DeleteRolePolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteRolePolicy *aws.Operation

// DeleteSAMLProviderRequest generates a request for the DeleteSAMLProvider operation.
func (c *IAM) DeleteSAMLProviderRequest(input *DeleteSAMLProviderInput) (req *aws.Request, output *DeleteSAMLProviderOutput) {
	if opDeleteSAMLProvider == nil {
		opDeleteSAMLProvider = &aws.Operation{
			Name:       "DeleteSAMLProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteSAMLProvider, input, output)
	output = &DeleteSAMLProviderOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteSAMLProvider(input *DeleteSAMLProviderInput) (output *DeleteSAMLProviderOutput, err error) {
	req, out := c.DeleteSAMLProviderRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteSAMLProvider *aws.Operation

// DeleteServerCertificateRequest generates a request for the DeleteServerCertificate operation.
func (c *IAM) DeleteServerCertificateRequest(input *DeleteServerCertificateInput) (req *aws.Request, output *DeleteServerCertificateOutput) {
	if opDeleteServerCertificate == nil {
		opDeleteServerCertificate = &aws.Operation{
			Name:       "DeleteServerCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteServerCertificate, input, output)
	output = &DeleteServerCertificateOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteServerCertificate(input *DeleteServerCertificateInput) (output *DeleteServerCertificateOutput, err error) {
	req, out := c.DeleteServerCertificateRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteServerCertificate *aws.Operation

// DeleteSigningCertificateRequest generates a request for the DeleteSigningCertificate operation.
func (c *IAM) DeleteSigningCertificateRequest(input *DeleteSigningCertificateInput) (req *aws.Request, output *DeleteSigningCertificateOutput) {
	if opDeleteSigningCertificate == nil {
		opDeleteSigningCertificate = &aws.Operation{
			Name:       "DeleteSigningCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteSigningCertificate, input, output)
	output = &DeleteSigningCertificateOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteSigningCertificate(input *DeleteSigningCertificateInput) (output *DeleteSigningCertificateOutput, err error) {
	req, out := c.DeleteSigningCertificateRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteSigningCertificate *aws.Operation

// DeleteUserRequest generates a request for the DeleteUser operation.
func (c *IAM) DeleteUserRequest(input *DeleteUserInput) (req *aws.Request, output *DeleteUserOutput) {
	if opDeleteUser == nil {
		opDeleteUser = &aws.Operation{
			Name:       "DeleteUser",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteUser, input, output)
	output = &DeleteUserOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteUser(input *DeleteUserInput) (output *DeleteUserOutput, err error) {
	req, out := c.DeleteUserRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteUser *aws.Operation

// DeleteUserPolicyRequest generates a request for the DeleteUserPolicy operation.
func (c *IAM) DeleteUserPolicyRequest(input *DeleteUserPolicyInput) (req *aws.Request, output *DeleteUserPolicyOutput) {
	if opDeleteUserPolicy == nil {
		opDeleteUserPolicy = &aws.Operation{
			Name:       "DeleteUserPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteUserPolicy, input, output)
	output = &DeleteUserPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteUserPolicy(input *DeleteUserPolicyInput) (output *DeleteUserPolicyOutput, err error) {
	req, out := c.DeleteUserPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteUserPolicy *aws.Operation

// DeleteVirtualMFADeviceRequest generates a request for the DeleteVirtualMFADevice operation.
func (c *IAM) DeleteVirtualMFADeviceRequest(input *DeleteVirtualMFADeviceInput) (req *aws.Request, output *DeleteVirtualMFADeviceOutput) {
	if opDeleteVirtualMFADevice == nil {
		opDeleteVirtualMFADevice = &aws.Operation{
			Name:       "DeleteVirtualMFADevice",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteVirtualMFADevice, input, output)
	output = &DeleteVirtualMFADeviceOutput{}
	req.Data = output
	return
}

func (c *IAM) DeleteVirtualMFADevice(input *DeleteVirtualMFADeviceInput) (output *DeleteVirtualMFADeviceOutput, err error) {
	req, out := c.DeleteVirtualMFADeviceRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteVirtualMFADevice *aws.Operation

// DetachGroupPolicyRequest generates a request for the DetachGroupPolicy operation.
func (c *IAM) DetachGroupPolicyRequest(input *DetachGroupPolicyInput) (req *aws.Request, output *DetachGroupPolicyOutput) {
	if opDetachGroupPolicy == nil {
		opDetachGroupPolicy = &aws.Operation{
			Name:       "DetachGroupPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDetachGroupPolicy, input, output)
	output = &DetachGroupPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) DetachGroupPolicy(input *DetachGroupPolicyInput) (output *DetachGroupPolicyOutput, err error) {
	req, out := c.DetachGroupPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opDetachGroupPolicy *aws.Operation

// DetachRolePolicyRequest generates a request for the DetachRolePolicy operation.
func (c *IAM) DetachRolePolicyRequest(input *DetachRolePolicyInput) (req *aws.Request, output *DetachRolePolicyOutput) {
	if opDetachRolePolicy == nil {
		opDetachRolePolicy = &aws.Operation{
			Name:       "DetachRolePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDetachRolePolicy, input, output)
	output = &DetachRolePolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) DetachRolePolicy(input *DetachRolePolicyInput) (output *DetachRolePolicyOutput, err error) {
	req, out := c.DetachRolePolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opDetachRolePolicy *aws.Operation

// DetachUserPolicyRequest generates a request for the DetachUserPolicy operation.
func (c *IAM) DetachUserPolicyRequest(input *DetachUserPolicyInput) (req *aws.Request, output *DetachUserPolicyOutput) {
	if opDetachUserPolicy == nil {
		opDetachUserPolicy = &aws.Operation{
			Name:       "DetachUserPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDetachUserPolicy, input, output)
	output = &DetachUserPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) DetachUserPolicy(input *DetachUserPolicyInput) (output *DetachUserPolicyOutput, err error) {
	req, out := c.DetachUserPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opDetachUserPolicy *aws.Operation

// EnableMFADeviceRequest generates a request for the EnableMFADevice operation.
func (c *IAM) EnableMFADeviceRequest(input *EnableMFADeviceInput) (req *aws.Request, output *EnableMFADeviceOutput) {
	if opEnableMFADevice == nil {
		opEnableMFADevice = &aws.Operation{
			Name:       "EnableMFADevice",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opEnableMFADevice, input, output)
	output = &EnableMFADeviceOutput{}
	req.Data = output
	return
}

func (c *IAM) EnableMFADevice(input *EnableMFADeviceInput) (output *EnableMFADeviceOutput, err error) {
	req, out := c.EnableMFADeviceRequest(input)
	output = out
	err = req.Send()
	return
}

var opEnableMFADevice *aws.Operation

// GenerateCredentialReportRequest generates a request for the GenerateCredentialReport operation.
func (c *IAM) GenerateCredentialReportRequest(input *GenerateCredentialReportInput) (req *aws.Request, output *GenerateCredentialReportOutput) {
	if opGenerateCredentialReport == nil {
		opGenerateCredentialReport = &aws.Operation{
			Name:       "GenerateCredentialReport",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGenerateCredentialReport, input, output)
	output = &GenerateCredentialReportOutput{}
	req.Data = output
	return
}

func (c *IAM) GenerateCredentialReport(input *GenerateCredentialReportInput) (output *GenerateCredentialReportOutput, err error) {
	req, out := c.GenerateCredentialReportRequest(input)
	output = out
	err = req.Send()
	return
}

var opGenerateCredentialReport *aws.Operation

// GetAccountAuthorizationDetailsRequest generates a request for the GetAccountAuthorizationDetails operation.
func (c *IAM) GetAccountAuthorizationDetailsRequest(input *GetAccountAuthorizationDetailsInput) (req *aws.Request, output *GetAccountAuthorizationDetailsOutput) {
	if opGetAccountAuthorizationDetails == nil {
		opGetAccountAuthorizationDetails = &aws.Operation{
			Name:       "GetAccountAuthorizationDetails",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetAccountAuthorizationDetails, input, output)
	output = &GetAccountAuthorizationDetailsOutput{}
	req.Data = output
	return
}

func (c *IAM) GetAccountAuthorizationDetails(input *GetAccountAuthorizationDetailsInput) (output *GetAccountAuthorizationDetailsOutput, err error) {
	req, out := c.GetAccountAuthorizationDetailsRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetAccountAuthorizationDetails *aws.Operation

// GetAccountPasswordPolicyRequest generates a request for the GetAccountPasswordPolicy operation.
func (c *IAM) GetAccountPasswordPolicyRequest(input *GetAccountPasswordPolicyInput) (req *aws.Request, output *GetAccountPasswordPolicyOutput) {
	if opGetAccountPasswordPolicy == nil {
		opGetAccountPasswordPolicy = &aws.Operation{
			Name:       "GetAccountPasswordPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetAccountPasswordPolicy, input, output)
	output = &GetAccountPasswordPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) GetAccountPasswordPolicy(input *GetAccountPasswordPolicyInput) (output *GetAccountPasswordPolicyOutput, err error) {
	req, out := c.GetAccountPasswordPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetAccountPasswordPolicy *aws.Operation

// GetAccountSummaryRequest generates a request for the GetAccountSummary operation.
func (c *IAM) GetAccountSummaryRequest(input *GetAccountSummaryInput) (req *aws.Request, output *GetAccountSummaryOutput) {
	if opGetAccountSummary == nil {
		opGetAccountSummary = &aws.Operation{
			Name:       "GetAccountSummary",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetAccountSummary, input, output)
	output = &GetAccountSummaryOutput{}
	req.Data = output
	return
}

func (c *IAM) GetAccountSummary(input *GetAccountSummaryInput) (output *GetAccountSummaryOutput, err error) {
	req, out := c.GetAccountSummaryRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetAccountSummary *aws.Operation

// GetCredentialReportRequest generates a request for the GetCredentialReport operation.
func (c *IAM) GetCredentialReportRequest(input *GetCredentialReportInput) (req *aws.Request, output *GetCredentialReportOutput) {
	if opGetCredentialReport == nil {
		opGetCredentialReport = &aws.Operation{
			Name:       "GetCredentialReport",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetCredentialReport, input, output)
	output = &GetCredentialReportOutput{}
	req.Data = output
	return
}

func (c *IAM) GetCredentialReport(input *GetCredentialReportInput) (output *GetCredentialReportOutput, err error) {
	req, out := c.GetCredentialReportRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetCredentialReport *aws.Operation

// GetGroupRequest generates a request for the GetGroup operation.
func (c *IAM) GetGroupRequest(input *GetGroupInput) (req *aws.Request, output *GetGroupOutput) {
	if opGetGroup == nil {
		opGetGroup = &aws.Operation{
			Name:       "GetGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opGetGroup, input, output)
	output = &GetGroupOutput{}
	req.Data = output
	return
}

func (c *IAM) GetGroup(input *GetGroupInput) (output *GetGroupOutput, err error) {
	req, out := c.GetGroupRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) GetGroupPages(input *GetGroupInput) <-chan *GetGroupOutput {
	page, _ := c.GetGroupRequest(input)
	ch := make(chan *GetGroupOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*GetGroupOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opGetGroup *aws.Operation

// GetGroupPolicyRequest generates a request for the GetGroupPolicy operation.
func (c *IAM) GetGroupPolicyRequest(input *GetGroupPolicyInput) (req *aws.Request, output *GetGroupPolicyOutput) {
	if opGetGroupPolicy == nil {
		opGetGroupPolicy = &aws.Operation{
			Name:       "GetGroupPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetGroupPolicy, input, output)
	output = &GetGroupPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) GetGroupPolicy(input *GetGroupPolicyInput) (output *GetGroupPolicyOutput, err error) {
	req, out := c.GetGroupPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetGroupPolicy *aws.Operation

// GetInstanceProfileRequest generates a request for the GetInstanceProfile operation.
func (c *IAM) GetInstanceProfileRequest(input *GetInstanceProfileInput) (req *aws.Request, output *GetInstanceProfileOutput) {
	if opGetInstanceProfile == nil {
		opGetInstanceProfile = &aws.Operation{
			Name:       "GetInstanceProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetInstanceProfile, input, output)
	output = &GetInstanceProfileOutput{}
	req.Data = output
	return
}

func (c *IAM) GetInstanceProfile(input *GetInstanceProfileInput) (output *GetInstanceProfileOutput, err error) {
	req, out := c.GetInstanceProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetInstanceProfile *aws.Operation

// GetLoginProfileRequest generates a request for the GetLoginProfile operation.
func (c *IAM) GetLoginProfileRequest(input *GetLoginProfileInput) (req *aws.Request, output *GetLoginProfileOutput) {
	if opGetLoginProfile == nil {
		opGetLoginProfile = &aws.Operation{
			Name:       "GetLoginProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetLoginProfile, input, output)
	output = &GetLoginProfileOutput{}
	req.Data = output
	return
}

func (c *IAM) GetLoginProfile(input *GetLoginProfileInput) (output *GetLoginProfileOutput, err error) {
	req, out := c.GetLoginProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetLoginProfile *aws.Operation

// GetOpenIDConnectProviderRequest generates a request for the GetOpenIDConnectProvider operation.
func (c *IAM) GetOpenIDConnectProviderRequest(input *GetOpenIDConnectProviderInput) (req *aws.Request, output *GetOpenIDConnectProviderOutput) {
	if opGetOpenIDConnectProvider == nil {
		opGetOpenIDConnectProvider = &aws.Operation{
			Name:       "GetOpenIDConnectProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetOpenIDConnectProvider, input, output)
	output = &GetOpenIDConnectProviderOutput{}
	req.Data = output
	return
}

func (c *IAM) GetOpenIDConnectProvider(input *GetOpenIDConnectProviderInput) (output *GetOpenIDConnectProviderOutput, err error) {
	req, out := c.GetOpenIDConnectProviderRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetOpenIDConnectProvider *aws.Operation

// GetPolicyRequest generates a request for the GetPolicy operation.
func (c *IAM) GetPolicyRequest(input *GetPolicyInput) (req *aws.Request, output *GetPolicyOutput) {
	if opGetPolicy == nil {
		opGetPolicy = &aws.Operation{
			Name:       "GetPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetPolicy, input, output)
	output = &GetPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) GetPolicy(input *GetPolicyInput) (output *GetPolicyOutput, err error) {
	req, out := c.GetPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetPolicy *aws.Operation

// GetPolicyVersionRequest generates a request for the GetPolicyVersion operation.
func (c *IAM) GetPolicyVersionRequest(input *GetPolicyVersionInput) (req *aws.Request, output *GetPolicyVersionOutput) {
	if opGetPolicyVersion == nil {
		opGetPolicyVersion = &aws.Operation{
			Name:       "GetPolicyVersion",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetPolicyVersion, input, output)
	output = &GetPolicyVersionOutput{}
	req.Data = output
	return
}

func (c *IAM) GetPolicyVersion(input *GetPolicyVersionInput) (output *GetPolicyVersionOutput, err error) {
	req, out := c.GetPolicyVersionRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetPolicyVersion *aws.Operation

// GetRoleRequest generates a request for the GetRole operation.
func (c *IAM) GetRoleRequest(input *GetRoleInput) (req *aws.Request, output *GetRoleOutput) {
	if opGetRole == nil {
		opGetRole = &aws.Operation{
			Name:       "GetRole",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetRole, input, output)
	output = &GetRoleOutput{}
	req.Data = output
	return
}

func (c *IAM) GetRole(input *GetRoleInput) (output *GetRoleOutput, err error) {
	req, out := c.GetRoleRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetRole *aws.Operation

// GetRolePolicyRequest generates a request for the GetRolePolicy operation.
func (c *IAM) GetRolePolicyRequest(input *GetRolePolicyInput) (req *aws.Request, output *GetRolePolicyOutput) {
	if opGetRolePolicy == nil {
		opGetRolePolicy = &aws.Operation{
			Name:       "GetRolePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetRolePolicy, input, output)
	output = &GetRolePolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) GetRolePolicy(input *GetRolePolicyInput) (output *GetRolePolicyOutput, err error) {
	req, out := c.GetRolePolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetRolePolicy *aws.Operation

// GetSAMLProviderRequest generates a request for the GetSAMLProvider operation.
func (c *IAM) GetSAMLProviderRequest(input *GetSAMLProviderInput) (req *aws.Request, output *GetSAMLProviderOutput) {
	if opGetSAMLProvider == nil {
		opGetSAMLProvider = &aws.Operation{
			Name:       "GetSAMLProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetSAMLProvider, input, output)
	output = &GetSAMLProviderOutput{}
	req.Data = output
	return
}

func (c *IAM) GetSAMLProvider(input *GetSAMLProviderInput) (output *GetSAMLProviderOutput, err error) {
	req, out := c.GetSAMLProviderRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetSAMLProvider *aws.Operation

// GetServerCertificateRequest generates a request for the GetServerCertificate operation.
func (c *IAM) GetServerCertificateRequest(input *GetServerCertificateInput) (req *aws.Request, output *GetServerCertificateOutput) {
	if opGetServerCertificate == nil {
		opGetServerCertificate = &aws.Operation{
			Name:       "GetServerCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetServerCertificate, input, output)
	output = &GetServerCertificateOutput{}
	req.Data = output
	return
}

func (c *IAM) GetServerCertificate(input *GetServerCertificateInput) (output *GetServerCertificateOutput, err error) {
	req, out := c.GetServerCertificateRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetServerCertificate *aws.Operation

// GetUserRequest generates a request for the GetUser operation.
func (c *IAM) GetUserRequest(input *GetUserInput) (req *aws.Request, output *GetUserOutput) {
	if opGetUser == nil {
		opGetUser = &aws.Operation{
			Name:       "GetUser",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetUser, input, output)
	output = &GetUserOutput{}
	req.Data = output
	return
}

func (c *IAM) GetUser(input *GetUserInput) (output *GetUserOutput, err error) {
	req, out := c.GetUserRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetUser *aws.Operation

// GetUserPolicyRequest generates a request for the GetUserPolicy operation.
func (c *IAM) GetUserPolicyRequest(input *GetUserPolicyInput) (req *aws.Request, output *GetUserPolicyOutput) {
	if opGetUserPolicy == nil {
		opGetUserPolicy = &aws.Operation{
			Name:       "GetUserPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetUserPolicy, input, output)
	output = &GetUserPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) GetUserPolicy(input *GetUserPolicyInput) (output *GetUserPolicyOutput, err error) {
	req, out := c.GetUserPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetUserPolicy *aws.Operation

// ListAccessKeysRequest generates a request for the ListAccessKeys operation.
func (c *IAM) ListAccessKeysRequest(input *ListAccessKeysInput) (req *aws.Request, output *ListAccessKeysOutput) {
	if opListAccessKeys == nil {
		opListAccessKeys = &aws.Operation{
			Name:       "ListAccessKeys",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListAccessKeys, input, output)
	output = &ListAccessKeysOutput{}
	req.Data = output
	return
}

func (c *IAM) ListAccessKeys(input *ListAccessKeysInput) (output *ListAccessKeysOutput, err error) {
	req, out := c.ListAccessKeysRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListAccessKeysPages(input *ListAccessKeysInput) <-chan *ListAccessKeysOutput {
	page, _ := c.ListAccessKeysRequest(input)
	ch := make(chan *ListAccessKeysOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListAccessKeysOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListAccessKeys *aws.Operation

// ListAccountAliasesRequest generates a request for the ListAccountAliases operation.
func (c *IAM) ListAccountAliasesRequest(input *ListAccountAliasesInput) (req *aws.Request, output *ListAccountAliasesOutput) {
	if opListAccountAliases == nil {
		opListAccountAliases = &aws.Operation{
			Name:       "ListAccountAliases",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListAccountAliases, input, output)
	output = &ListAccountAliasesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListAccountAliases(input *ListAccountAliasesInput) (output *ListAccountAliasesOutput, err error) {
	req, out := c.ListAccountAliasesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListAccountAliasesPages(input *ListAccountAliasesInput) <-chan *ListAccountAliasesOutput {
	page, _ := c.ListAccountAliasesRequest(input)
	ch := make(chan *ListAccountAliasesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListAccountAliasesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListAccountAliases *aws.Operation

// ListAttachedGroupPoliciesRequest generates a request for the ListAttachedGroupPolicies operation.
func (c *IAM) ListAttachedGroupPoliciesRequest(input *ListAttachedGroupPoliciesInput) (req *aws.Request, output *ListAttachedGroupPoliciesOutput) {
	if opListAttachedGroupPolicies == nil {
		opListAttachedGroupPolicies = &aws.Operation{
			Name:       "ListAttachedGroupPolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListAttachedGroupPolicies, input, output)
	output = &ListAttachedGroupPoliciesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListAttachedGroupPolicies(input *ListAttachedGroupPoliciesInput) (output *ListAttachedGroupPoliciesOutput, err error) {
	req, out := c.ListAttachedGroupPoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListAttachedGroupPolicies *aws.Operation

// ListAttachedRolePoliciesRequest generates a request for the ListAttachedRolePolicies operation.
func (c *IAM) ListAttachedRolePoliciesRequest(input *ListAttachedRolePoliciesInput) (req *aws.Request, output *ListAttachedRolePoliciesOutput) {
	if opListAttachedRolePolicies == nil {
		opListAttachedRolePolicies = &aws.Operation{
			Name:       "ListAttachedRolePolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListAttachedRolePolicies, input, output)
	output = &ListAttachedRolePoliciesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListAttachedRolePolicies(input *ListAttachedRolePoliciesInput) (output *ListAttachedRolePoliciesOutput, err error) {
	req, out := c.ListAttachedRolePoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListAttachedRolePolicies *aws.Operation

// ListAttachedUserPoliciesRequest generates a request for the ListAttachedUserPolicies operation.
func (c *IAM) ListAttachedUserPoliciesRequest(input *ListAttachedUserPoliciesInput) (req *aws.Request, output *ListAttachedUserPoliciesOutput) {
	if opListAttachedUserPolicies == nil {
		opListAttachedUserPolicies = &aws.Operation{
			Name:       "ListAttachedUserPolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListAttachedUserPolicies, input, output)
	output = &ListAttachedUserPoliciesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListAttachedUserPolicies(input *ListAttachedUserPoliciesInput) (output *ListAttachedUserPoliciesOutput, err error) {
	req, out := c.ListAttachedUserPoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListAttachedUserPolicies *aws.Operation

// ListEntitiesForPolicyRequest generates a request for the ListEntitiesForPolicy operation.
func (c *IAM) ListEntitiesForPolicyRequest(input *ListEntitiesForPolicyInput) (req *aws.Request, output *ListEntitiesForPolicyOutput) {
	if opListEntitiesForPolicy == nil {
		opListEntitiesForPolicy = &aws.Operation{
			Name:       "ListEntitiesForPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListEntitiesForPolicy, input, output)
	output = &ListEntitiesForPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) ListEntitiesForPolicy(input *ListEntitiesForPolicyInput) (output *ListEntitiesForPolicyOutput, err error) {
	req, out := c.ListEntitiesForPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opListEntitiesForPolicy *aws.Operation

// ListGroupPoliciesRequest generates a request for the ListGroupPolicies operation.
func (c *IAM) ListGroupPoliciesRequest(input *ListGroupPoliciesInput) (req *aws.Request, output *ListGroupPoliciesOutput) {
	if opListGroupPolicies == nil {
		opListGroupPolicies = &aws.Operation{
			Name:       "ListGroupPolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListGroupPolicies, input, output)
	output = &ListGroupPoliciesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListGroupPolicies(input *ListGroupPoliciesInput) (output *ListGroupPoliciesOutput, err error) {
	req, out := c.ListGroupPoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListGroupPoliciesPages(input *ListGroupPoliciesInput) <-chan *ListGroupPoliciesOutput {
	page, _ := c.ListGroupPoliciesRequest(input)
	ch := make(chan *ListGroupPoliciesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListGroupPoliciesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListGroupPolicies *aws.Operation

// ListGroupsRequest generates a request for the ListGroups operation.
func (c *IAM) ListGroupsRequest(input *ListGroupsInput) (req *aws.Request, output *ListGroupsOutput) {
	if opListGroups == nil {
		opListGroups = &aws.Operation{
			Name:       "ListGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListGroups, input, output)
	output = &ListGroupsOutput{}
	req.Data = output
	return
}

func (c *IAM) ListGroups(input *ListGroupsInput) (output *ListGroupsOutput, err error) {
	req, out := c.ListGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListGroupsPages(input *ListGroupsInput) <-chan *ListGroupsOutput {
	page, _ := c.ListGroupsRequest(input)
	ch := make(chan *ListGroupsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListGroupsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListGroups *aws.Operation

// ListGroupsForUserRequest generates a request for the ListGroupsForUser operation.
func (c *IAM) ListGroupsForUserRequest(input *ListGroupsForUserInput) (req *aws.Request, output *ListGroupsForUserOutput) {
	if opListGroupsForUser == nil {
		opListGroupsForUser = &aws.Operation{
			Name:       "ListGroupsForUser",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListGroupsForUser, input, output)
	output = &ListGroupsForUserOutput{}
	req.Data = output
	return
}

func (c *IAM) ListGroupsForUser(input *ListGroupsForUserInput) (output *ListGroupsForUserOutput, err error) {
	req, out := c.ListGroupsForUserRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListGroupsForUserPages(input *ListGroupsForUserInput) <-chan *ListGroupsForUserOutput {
	page, _ := c.ListGroupsForUserRequest(input)
	ch := make(chan *ListGroupsForUserOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListGroupsForUserOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListGroupsForUser *aws.Operation

// ListInstanceProfilesRequest generates a request for the ListInstanceProfiles operation.
func (c *IAM) ListInstanceProfilesRequest(input *ListInstanceProfilesInput) (req *aws.Request, output *ListInstanceProfilesOutput) {
	if opListInstanceProfiles == nil {
		opListInstanceProfiles = &aws.Operation{
			Name:       "ListInstanceProfiles",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListInstanceProfiles, input, output)
	output = &ListInstanceProfilesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListInstanceProfiles(input *ListInstanceProfilesInput) (output *ListInstanceProfilesOutput, err error) {
	req, out := c.ListInstanceProfilesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListInstanceProfilesPages(input *ListInstanceProfilesInput) <-chan *ListInstanceProfilesOutput {
	page, _ := c.ListInstanceProfilesRequest(input)
	ch := make(chan *ListInstanceProfilesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListInstanceProfilesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListInstanceProfiles *aws.Operation

// ListInstanceProfilesForRoleRequest generates a request for the ListInstanceProfilesForRole operation.
func (c *IAM) ListInstanceProfilesForRoleRequest(input *ListInstanceProfilesForRoleInput) (req *aws.Request, output *ListInstanceProfilesForRoleOutput) {
	if opListInstanceProfilesForRole == nil {
		opListInstanceProfilesForRole = &aws.Operation{
			Name:       "ListInstanceProfilesForRole",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListInstanceProfilesForRole, input, output)
	output = &ListInstanceProfilesForRoleOutput{}
	req.Data = output
	return
}

func (c *IAM) ListInstanceProfilesForRole(input *ListInstanceProfilesForRoleInput) (output *ListInstanceProfilesForRoleOutput, err error) {
	req, out := c.ListInstanceProfilesForRoleRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListInstanceProfilesForRolePages(input *ListInstanceProfilesForRoleInput) <-chan *ListInstanceProfilesForRoleOutput {
	page, _ := c.ListInstanceProfilesForRoleRequest(input)
	ch := make(chan *ListInstanceProfilesForRoleOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListInstanceProfilesForRoleOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListInstanceProfilesForRole *aws.Operation

// ListMFADevicesRequest generates a request for the ListMFADevices operation.
func (c *IAM) ListMFADevicesRequest(input *ListMFADevicesInput) (req *aws.Request, output *ListMFADevicesOutput) {
	if opListMFADevices == nil {
		opListMFADevices = &aws.Operation{
			Name:       "ListMFADevices",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListMFADevices, input, output)
	output = &ListMFADevicesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListMFADevices(input *ListMFADevicesInput) (output *ListMFADevicesOutput, err error) {
	req, out := c.ListMFADevicesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListMFADevicesPages(input *ListMFADevicesInput) <-chan *ListMFADevicesOutput {
	page, _ := c.ListMFADevicesRequest(input)
	ch := make(chan *ListMFADevicesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListMFADevicesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListMFADevices *aws.Operation

// ListOpenIDConnectProvidersRequest generates a request for the ListOpenIDConnectProviders operation.
func (c *IAM) ListOpenIDConnectProvidersRequest(input *ListOpenIDConnectProvidersInput) (req *aws.Request, output *ListOpenIDConnectProvidersOutput) {
	if opListOpenIDConnectProviders == nil {
		opListOpenIDConnectProviders = &aws.Operation{
			Name:       "ListOpenIDConnectProviders",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListOpenIDConnectProviders, input, output)
	output = &ListOpenIDConnectProvidersOutput{}
	req.Data = output
	return
}

func (c *IAM) ListOpenIDConnectProviders(input *ListOpenIDConnectProvidersInput) (output *ListOpenIDConnectProvidersOutput, err error) {
	req, out := c.ListOpenIDConnectProvidersRequest(input)
	output = out
	err = req.Send()
	return
}

var opListOpenIDConnectProviders *aws.Operation

// ListPoliciesRequest generates a request for the ListPolicies operation.
func (c *IAM) ListPoliciesRequest(input *ListPoliciesInput) (req *aws.Request, output *ListPoliciesOutput) {
	if opListPolicies == nil {
		opListPolicies = &aws.Operation{
			Name:       "ListPolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListPolicies, input, output)
	output = &ListPoliciesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListPolicies(input *ListPoliciesInput) (output *ListPoliciesOutput, err error) {
	req, out := c.ListPoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListPolicies *aws.Operation

// ListPolicyVersionsRequest generates a request for the ListPolicyVersions operation.
func (c *IAM) ListPolicyVersionsRequest(input *ListPolicyVersionsInput) (req *aws.Request, output *ListPolicyVersionsOutput) {
	if opListPolicyVersions == nil {
		opListPolicyVersions = &aws.Operation{
			Name:       "ListPolicyVersions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListPolicyVersions, input, output)
	output = &ListPolicyVersionsOutput{}
	req.Data = output
	return
}

func (c *IAM) ListPolicyVersions(input *ListPolicyVersionsInput) (output *ListPolicyVersionsOutput, err error) {
	req, out := c.ListPolicyVersionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListPolicyVersions *aws.Operation

// ListRolePoliciesRequest generates a request for the ListRolePolicies operation.
func (c *IAM) ListRolePoliciesRequest(input *ListRolePoliciesInput) (req *aws.Request, output *ListRolePoliciesOutput) {
	if opListRolePolicies == nil {
		opListRolePolicies = &aws.Operation{
			Name:       "ListRolePolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListRolePolicies, input, output)
	output = &ListRolePoliciesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListRolePolicies(input *ListRolePoliciesInput) (output *ListRolePoliciesOutput, err error) {
	req, out := c.ListRolePoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListRolePoliciesPages(input *ListRolePoliciesInput) <-chan *ListRolePoliciesOutput {
	page, _ := c.ListRolePoliciesRequest(input)
	ch := make(chan *ListRolePoliciesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListRolePoliciesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListRolePolicies *aws.Operation

// ListRolesRequest generates a request for the ListRoles operation.
func (c *IAM) ListRolesRequest(input *ListRolesInput) (req *aws.Request, output *ListRolesOutput) {
	if opListRoles == nil {
		opListRoles = &aws.Operation{
			Name:       "ListRoles",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListRoles, input, output)
	output = &ListRolesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListRoles(input *ListRolesInput) (output *ListRolesOutput, err error) {
	req, out := c.ListRolesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListRolesPages(input *ListRolesInput) <-chan *ListRolesOutput {
	page, _ := c.ListRolesRequest(input)
	ch := make(chan *ListRolesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListRolesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListRoles *aws.Operation

// ListSAMLProvidersRequest generates a request for the ListSAMLProviders operation.
func (c *IAM) ListSAMLProvidersRequest(input *ListSAMLProvidersInput) (req *aws.Request, output *ListSAMLProvidersOutput) {
	if opListSAMLProviders == nil {
		opListSAMLProviders = &aws.Operation{
			Name:       "ListSAMLProviders",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListSAMLProviders, input, output)
	output = &ListSAMLProvidersOutput{}
	req.Data = output
	return
}

func (c *IAM) ListSAMLProviders(input *ListSAMLProvidersInput) (output *ListSAMLProvidersOutput, err error) {
	req, out := c.ListSAMLProvidersRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListSAMLProvidersPages(input *ListSAMLProvidersInput) <-chan *ListSAMLProvidersOutput {
	page, _ := c.ListSAMLProvidersRequest(input)
	ch := make(chan *ListSAMLProvidersOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListSAMLProvidersOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListSAMLProviders *aws.Operation

// ListServerCertificatesRequest generates a request for the ListServerCertificates operation.
func (c *IAM) ListServerCertificatesRequest(input *ListServerCertificatesInput) (req *aws.Request, output *ListServerCertificatesOutput) {
	if opListServerCertificates == nil {
		opListServerCertificates = &aws.Operation{
			Name:       "ListServerCertificates",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListServerCertificates, input, output)
	output = &ListServerCertificatesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListServerCertificates(input *ListServerCertificatesInput) (output *ListServerCertificatesOutput, err error) {
	req, out := c.ListServerCertificatesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListServerCertificatesPages(input *ListServerCertificatesInput) <-chan *ListServerCertificatesOutput {
	page, _ := c.ListServerCertificatesRequest(input)
	ch := make(chan *ListServerCertificatesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListServerCertificatesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListServerCertificates *aws.Operation

// ListSigningCertificatesRequest generates a request for the ListSigningCertificates operation.
func (c *IAM) ListSigningCertificatesRequest(input *ListSigningCertificatesInput) (req *aws.Request, output *ListSigningCertificatesOutput) {
	if opListSigningCertificates == nil {
		opListSigningCertificates = &aws.Operation{
			Name:       "ListSigningCertificates",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListSigningCertificates, input, output)
	output = &ListSigningCertificatesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListSigningCertificates(input *ListSigningCertificatesInput) (output *ListSigningCertificatesOutput, err error) {
	req, out := c.ListSigningCertificatesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListSigningCertificatesPages(input *ListSigningCertificatesInput) <-chan *ListSigningCertificatesOutput {
	page, _ := c.ListSigningCertificatesRequest(input)
	ch := make(chan *ListSigningCertificatesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListSigningCertificatesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListSigningCertificates *aws.Operation

// ListUserPoliciesRequest generates a request for the ListUserPolicies operation.
func (c *IAM) ListUserPoliciesRequest(input *ListUserPoliciesInput) (req *aws.Request, output *ListUserPoliciesOutput) {
	if opListUserPolicies == nil {
		opListUserPolicies = &aws.Operation{
			Name:       "ListUserPolicies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListUserPolicies, input, output)
	output = &ListUserPoliciesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListUserPolicies(input *ListUserPoliciesInput) (output *ListUserPoliciesOutput, err error) {
	req, out := c.ListUserPoliciesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListUserPoliciesPages(input *ListUserPoliciesInput) <-chan *ListUserPoliciesOutput {
	page, _ := c.ListUserPoliciesRequest(input)
	ch := make(chan *ListUserPoliciesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListUserPoliciesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListUserPolicies *aws.Operation

// ListUsersRequest generates a request for the ListUsers operation.
func (c *IAM) ListUsersRequest(input *ListUsersInput) (req *aws.Request, output *ListUsersOutput) {
	if opListUsers == nil {
		opListUsers = &aws.Operation{
			Name:       "ListUsers",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListUsers, input, output)
	output = &ListUsersOutput{}
	req.Data = output
	return
}

func (c *IAM) ListUsers(input *ListUsersInput) (output *ListUsersOutput, err error) {
	req, out := c.ListUsersRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListUsersPages(input *ListUsersInput) <-chan *ListUsersOutput {
	page, _ := c.ListUsersRequest(input)
	ch := make(chan *ListUsersOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListUsersOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListUsers *aws.Operation

// ListVirtualMFADevicesRequest generates a request for the ListVirtualMFADevices operation.
func (c *IAM) ListVirtualMFADevicesRequest(input *ListVirtualMFADevicesInput) (req *aws.Request, output *ListVirtualMFADevicesOutput) {
	if opListVirtualMFADevices == nil {
		opListVirtualMFADevices = &aws.Operation{
			Name:       "ListVirtualMFADevices",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxItems",
				TruncationToken: "IsTruncated",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListVirtualMFADevices, input, output)
	output = &ListVirtualMFADevicesOutput{}
	req.Data = output
	return
}

func (c *IAM) ListVirtualMFADevices(input *ListVirtualMFADevicesInput) (output *ListVirtualMFADevicesOutput, err error) {
	req, out := c.ListVirtualMFADevicesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *IAM) ListVirtualMFADevicesPages(input *ListVirtualMFADevicesInput) <-chan *ListVirtualMFADevicesOutput {
	page, _ := c.ListVirtualMFADevicesRequest(input)
	ch := make(chan *ListVirtualMFADevicesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListVirtualMFADevicesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListVirtualMFADevices *aws.Operation

// PutGroupPolicyRequest generates a request for the PutGroupPolicy operation.
func (c *IAM) PutGroupPolicyRequest(input *PutGroupPolicyInput) (req *aws.Request, output *PutGroupPolicyOutput) {
	if opPutGroupPolicy == nil {
		opPutGroupPolicy = &aws.Operation{
			Name:       "PutGroupPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPutGroupPolicy, input, output)
	output = &PutGroupPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) PutGroupPolicy(input *PutGroupPolicyInput) (output *PutGroupPolicyOutput, err error) {
	req, out := c.PutGroupPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opPutGroupPolicy *aws.Operation

// PutRolePolicyRequest generates a request for the PutRolePolicy operation.
func (c *IAM) PutRolePolicyRequest(input *PutRolePolicyInput) (req *aws.Request, output *PutRolePolicyOutput) {
	if opPutRolePolicy == nil {
		opPutRolePolicy = &aws.Operation{
			Name:       "PutRolePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPutRolePolicy, input, output)
	output = &PutRolePolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) PutRolePolicy(input *PutRolePolicyInput) (output *PutRolePolicyOutput, err error) {
	req, out := c.PutRolePolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opPutRolePolicy *aws.Operation

// PutUserPolicyRequest generates a request for the PutUserPolicy operation.
func (c *IAM) PutUserPolicyRequest(input *PutUserPolicyInput) (req *aws.Request, output *PutUserPolicyOutput) {
	if opPutUserPolicy == nil {
		opPutUserPolicy = &aws.Operation{
			Name:       "PutUserPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPutUserPolicy, input, output)
	output = &PutUserPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) PutUserPolicy(input *PutUserPolicyInput) (output *PutUserPolicyOutput, err error) {
	req, out := c.PutUserPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opPutUserPolicy *aws.Operation

// RemoveClientIDFromOpenIDConnectProviderRequest generates a request for the RemoveClientIDFromOpenIDConnectProvider operation.
func (c *IAM) RemoveClientIDFromOpenIDConnectProviderRequest(input *RemoveClientIDFromOpenIDConnectProviderInput) (req *aws.Request, output *RemoveClientIDFromOpenIDConnectProviderOutput) {
	if opRemoveClientIDFromOpenIDConnectProvider == nil {
		opRemoveClientIDFromOpenIDConnectProvider = &aws.Operation{
			Name:       "RemoveClientIDFromOpenIDConnectProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRemoveClientIDFromOpenIDConnectProvider, input, output)
	output = &RemoveClientIDFromOpenIDConnectProviderOutput{}
	req.Data = output
	return
}

func (c *IAM) RemoveClientIDFromOpenIDConnectProvider(input *RemoveClientIDFromOpenIDConnectProviderInput) (output *RemoveClientIDFromOpenIDConnectProviderOutput, err error) {
	req, out := c.RemoveClientIDFromOpenIDConnectProviderRequest(input)
	output = out
	err = req.Send()
	return
}

var opRemoveClientIDFromOpenIDConnectProvider *aws.Operation

// RemoveRoleFromInstanceProfileRequest generates a request for the RemoveRoleFromInstanceProfile operation.
func (c *IAM) RemoveRoleFromInstanceProfileRequest(input *RemoveRoleFromInstanceProfileInput) (req *aws.Request, output *RemoveRoleFromInstanceProfileOutput) {
	if opRemoveRoleFromInstanceProfile == nil {
		opRemoveRoleFromInstanceProfile = &aws.Operation{
			Name:       "RemoveRoleFromInstanceProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRemoveRoleFromInstanceProfile, input, output)
	output = &RemoveRoleFromInstanceProfileOutput{}
	req.Data = output
	return
}

func (c *IAM) RemoveRoleFromInstanceProfile(input *RemoveRoleFromInstanceProfileInput) (output *RemoveRoleFromInstanceProfileOutput, err error) {
	req, out := c.RemoveRoleFromInstanceProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opRemoveRoleFromInstanceProfile *aws.Operation

// RemoveUserFromGroupRequest generates a request for the RemoveUserFromGroup operation.
func (c *IAM) RemoveUserFromGroupRequest(input *RemoveUserFromGroupInput) (req *aws.Request, output *RemoveUserFromGroupOutput) {
	if opRemoveUserFromGroup == nil {
		opRemoveUserFromGroup = &aws.Operation{
			Name:       "RemoveUserFromGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRemoveUserFromGroup, input, output)
	output = &RemoveUserFromGroupOutput{}
	req.Data = output
	return
}

func (c *IAM) RemoveUserFromGroup(input *RemoveUserFromGroupInput) (output *RemoveUserFromGroupOutput, err error) {
	req, out := c.RemoveUserFromGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opRemoveUserFromGroup *aws.Operation

// ResyncMFADeviceRequest generates a request for the ResyncMFADevice operation.
func (c *IAM) ResyncMFADeviceRequest(input *ResyncMFADeviceInput) (req *aws.Request, output *ResyncMFADeviceOutput) {
	if opResyncMFADevice == nil {
		opResyncMFADevice = &aws.Operation{
			Name:       "ResyncMFADevice",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opResyncMFADevice, input, output)
	output = &ResyncMFADeviceOutput{}
	req.Data = output
	return
}

func (c *IAM) ResyncMFADevice(input *ResyncMFADeviceInput) (output *ResyncMFADeviceOutput, err error) {
	req, out := c.ResyncMFADeviceRequest(input)
	output = out
	err = req.Send()
	return
}

var opResyncMFADevice *aws.Operation

// SetDefaultPolicyVersionRequest generates a request for the SetDefaultPolicyVersion operation.
func (c *IAM) SetDefaultPolicyVersionRequest(input *SetDefaultPolicyVersionInput) (req *aws.Request, output *SetDefaultPolicyVersionOutput) {
	if opSetDefaultPolicyVersion == nil {
		opSetDefaultPolicyVersion = &aws.Operation{
			Name:       "SetDefaultPolicyVersion",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opSetDefaultPolicyVersion, input, output)
	output = &SetDefaultPolicyVersionOutput{}
	req.Data = output
	return
}

func (c *IAM) SetDefaultPolicyVersion(input *SetDefaultPolicyVersionInput) (output *SetDefaultPolicyVersionOutput, err error) {
	req, out := c.SetDefaultPolicyVersionRequest(input)
	output = out
	err = req.Send()
	return
}

var opSetDefaultPolicyVersion *aws.Operation

// UpdateAccessKeyRequest generates a request for the UpdateAccessKey operation.
func (c *IAM) UpdateAccessKeyRequest(input *UpdateAccessKeyInput) (req *aws.Request, output *UpdateAccessKeyOutput) {
	if opUpdateAccessKey == nil {
		opUpdateAccessKey = &aws.Operation{
			Name:       "UpdateAccessKey",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateAccessKey, input, output)
	output = &UpdateAccessKeyOutput{}
	req.Data = output
	return
}

func (c *IAM) UpdateAccessKey(input *UpdateAccessKeyInput) (output *UpdateAccessKeyOutput, err error) {
	req, out := c.UpdateAccessKeyRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateAccessKey *aws.Operation

// UpdateAccountPasswordPolicyRequest generates a request for the UpdateAccountPasswordPolicy operation.
func (c *IAM) UpdateAccountPasswordPolicyRequest(input *UpdateAccountPasswordPolicyInput) (req *aws.Request, output *UpdateAccountPasswordPolicyOutput) {
	if opUpdateAccountPasswordPolicy == nil {
		opUpdateAccountPasswordPolicy = &aws.Operation{
			Name:       "UpdateAccountPasswordPolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateAccountPasswordPolicy, input, output)
	output = &UpdateAccountPasswordPolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) UpdateAccountPasswordPolicy(input *UpdateAccountPasswordPolicyInput) (output *UpdateAccountPasswordPolicyOutput, err error) {
	req, out := c.UpdateAccountPasswordPolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateAccountPasswordPolicy *aws.Operation

// UpdateAssumeRolePolicyRequest generates a request for the UpdateAssumeRolePolicy operation.
func (c *IAM) UpdateAssumeRolePolicyRequest(input *UpdateAssumeRolePolicyInput) (req *aws.Request, output *UpdateAssumeRolePolicyOutput) {
	if opUpdateAssumeRolePolicy == nil {
		opUpdateAssumeRolePolicy = &aws.Operation{
			Name:       "UpdateAssumeRolePolicy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateAssumeRolePolicy, input, output)
	output = &UpdateAssumeRolePolicyOutput{}
	req.Data = output
	return
}

func (c *IAM) UpdateAssumeRolePolicy(input *UpdateAssumeRolePolicyInput) (output *UpdateAssumeRolePolicyOutput, err error) {
	req, out := c.UpdateAssumeRolePolicyRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateAssumeRolePolicy *aws.Operation

// UpdateGroupRequest generates a request for the UpdateGroup operation.
func (c *IAM) UpdateGroupRequest(input *UpdateGroupInput) (req *aws.Request, output *UpdateGroupOutput) {
	if opUpdateGroup == nil {
		opUpdateGroup = &aws.Operation{
			Name:       "UpdateGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateGroup, input, output)
	output = &UpdateGroupOutput{}
	req.Data = output
	return
}

func (c *IAM) UpdateGroup(input *UpdateGroupInput) (output *UpdateGroupOutput, err error) {
	req, out := c.UpdateGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateGroup *aws.Operation

// UpdateLoginProfileRequest generates a request for the UpdateLoginProfile operation.
func (c *IAM) UpdateLoginProfileRequest(input *UpdateLoginProfileInput) (req *aws.Request, output *UpdateLoginProfileOutput) {
	if opUpdateLoginProfile == nil {
		opUpdateLoginProfile = &aws.Operation{
			Name:       "UpdateLoginProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateLoginProfile, input, output)
	output = &UpdateLoginProfileOutput{}
	req.Data = output
	return
}

func (c *IAM) UpdateLoginProfile(input *UpdateLoginProfileInput) (output *UpdateLoginProfileOutput, err error) {
	req, out := c.UpdateLoginProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateLoginProfile *aws.Operation

// UpdateOpenIDConnectProviderThumbprintRequest generates a request for the UpdateOpenIDConnectProviderThumbprint operation.
func (c *IAM) UpdateOpenIDConnectProviderThumbprintRequest(input *UpdateOpenIDConnectProviderThumbprintInput) (req *aws.Request, output *UpdateOpenIDConnectProviderThumbprintOutput) {
	if opUpdateOpenIDConnectProviderThumbprint == nil {
		opUpdateOpenIDConnectProviderThumbprint = &aws.Operation{
			Name:       "UpdateOpenIDConnectProviderThumbprint",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateOpenIDConnectProviderThumbprint, input, output)
	output = &UpdateOpenIDConnectProviderThumbprintOutput{}
	req.Data = output
	return
}

func (c *IAM) UpdateOpenIDConnectProviderThumbprint(input *UpdateOpenIDConnectProviderThumbprintInput) (output *UpdateOpenIDConnectProviderThumbprintOutput, err error) {
	req, out := c.UpdateOpenIDConnectProviderThumbprintRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateOpenIDConnectProviderThumbprint *aws.Operation

// UpdateSAMLProviderRequest generates a request for the UpdateSAMLProvider operation.
func (c *IAM) UpdateSAMLProviderRequest(input *UpdateSAMLProviderInput) (req *aws.Request, output *UpdateSAMLProviderOutput) {
	if opUpdateSAMLProvider == nil {
		opUpdateSAMLProvider = &aws.Operation{
			Name:       "UpdateSAMLProvider",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateSAMLProvider, input, output)
	output = &UpdateSAMLProviderOutput{}
	req.Data = output
	return
}

func (c *IAM) UpdateSAMLProvider(input *UpdateSAMLProviderInput) (output *UpdateSAMLProviderOutput, err error) {
	req, out := c.UpdateSAMLProviderRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateSAMLProvider *aws.Operation

// UpdateServerCertificateRequest generates a request for the UpdateServerCertificate operation.
func (c *IAM) UpdateServerCertificateRequest(input *UpdateServerCertificateInput) (req *aws.Request, output *UpdateServerCertificateOutput) {
	if opUpdateServerCertificate == nil {
		opUpdateServerCertificate = &aws.Operation{
			Name:       "UpdateServerCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateServerCertificate, input, output)
	output = &UpdateServerCertificateOutput{}
	req.Data = output
	return
}

func (c *IAM) UpdateServerCertificate(input *UpdateServerCertificateInput) (output *UpdateServerCertificateOutput, err error) {
	req, out := c.UpdateServerCertificateRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateServerCertificate *aws.Operation

// UpdateSigningCertificateRequest generates a request for the UpdateSigningCertificate operation.
func (c *IAM) UpdateSigningCertificateRequest(input *UpdateSigningCertificateInput) (req *aws.Request, output *UpdateSigningCertificateOutput) {
	if opUpdateSigningCertificate == nil {
		opUpdateSigningCertificate = &aws.Operation{
			Name:       "UpdateSigningCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateSigningCertificate, input, output)
	output = &UpdateSigningCertificateOutput{}
	req.Data = output
	return
}

func (c *IAM) UpdateSigningCertificate(input *UpdateSigningCertificateInput) (output *UpdateSigningCertificateOutput, err error) {
	req, out := c.UpdateSigningCertificateRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateSigningCertificate *aws.Operation

// UpdateUserRequest generates a request for the UpdateUser operation.
func (c *IAM) UpdateUserRequest(input *UpdateUserInput) (req *aws.Request, output *UpdateUserOutput) {
	if opUpdateUser == nil {
		opUpdateUser = &aws.Operation{
			Name:       "UpdateUser",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateUser, input, output)
	output = &UpdateUserOutput{}
	req.Data = output
	return
}

func (c *IAM) UpdateUser(input *UpdateUserInput) (output *UpdateUserOutput, err error) {
	req, out := c.UpdateUserRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateUser *aws.Operation

// UploadServerCertificateRequest generates a request for the UploadServerCertificate operation.
func (c *IAM) UploadServerCertificateRequest(input *UploadServerCertificateInput) (req *aws.Request, output *UploadServerCertificateOutput) {
	if opUploadServerCertificate == nil {
		opUploadServerCertificate = &aws.Operation{
			Name:       "UploadServerCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUploadServerCertificate, input, output)
	output = &UploadServerCertificateOutput{}
	req.Data = output
	return
}

func (c *IAM) UploadServerCertificate(input *UploadServerCertificateInput) (output *UploadServerCertificateOutput, err error) {
	req, out := c.UploadServerCertificateRequest(input)
	output = out
	err = req.Send()
	return
}

var opUploadServerCertificate *aws.Operation

// UploadSigningCertificateRequest generates a request for the UploadSigningCertificate operation.
func (c *IAM) UploadSigningCertificateRequest(input *UploadSigningCertificateInput) (req *aws.Request, output *UploadSigningCertificateOutput) {
	if opUploadSigningCertificate == nil {
		opUploadSigningCertificate = &aws.Operation{
			Name:       "UploadSigningCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUploadSigningCertificate, input, output)
	output = &UploadSigningCertificateOutput{}
	req.Data = output
	return
}

func (c *IAM) UploadSigningCertificate(input *UploadSigningCertificateInput) (output *UploadSigningCertificateOutput, err error) {
	req, out := c.UploadSigningCertificateRequest(input)
	output = out
	err = req.Send()
	return
}

var opUploadSigningCertificate *aws.Operation

type AccessKey struct {
	AccessKeyID     *string    `locationName:"AccessKeyId" type:"string" required:"true"`
	CreateDate      *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	SecretAccessKey *string    `type:"string" required:"true"`
	Status          *string    `type:"string" required:"true"`
	UserName        *string    `type:"string" required:"true"`

	metadataAccessKey `json:"-", xml:"-"`
}

type metadataAccessKey struct {
	SDKShapeTraits bool `type:"structure"`
}

type AccessKeyMetadata struct {
	AccessKeyID *string    `locationName:"AccessKeyId" type:"string"`
	CreateDate  *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Status      *string    `type:"string"`
	UserName    *string    `type:"string"`

	metadataAccessKeyMetadata `json:"-", xml:"-"`
}

type metadataAccessKeyMetadata struct {
	SDKShapeTraits bool `type:"structure"`
}

type AddClientIDToOpenIDConnectProviderInput struct {
	ClientID                 *string `type:"string" required:"true"`
	OpenIDConnectProviderARN *string `locationName:"OpenIDConnectProviderArn" type:"string" required:"true"`

	metadataAddClientIDToOpenIDConnectProviderInput `json:"-", xml:"-"`
}

type metadataAddClientIDToOpenIDConnectProviderInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AddClientIDToOpenIDConnectProviderOutput struct {
	metadataAddClientIDToOpenIDConnectProviderOutput `json:"-", xml:"-"`
}

type metadataAddClientIDToOpenIDConnectProviderOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AddRoleToInstanceProfileInput struct {
	InstanceProfileName *string `type:"string" required:"true"`
	RoleName            *string `type:"string" required:"true"`

	metadataAddRoleToInstanceProfileInput `json:"-", xml:"-"`
}

type metadataAddRoleToInstanceProfileInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AddRoleToInstanceProfileOutput struct {
	metadataAddRoleToInstanceProfileOutput `json:"-", xml:"-"`
}

type metadataAddRoleToInstanceProfileOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AddUserToGroupInput struct {
	GroupName *string `type:"string" required:"true"`
	UserName  *string `type:"string" required:"true"`

	metadataAddUserToGroupInput `json:"-", xml:"-"`
}

type metadataAddUserToGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AddUserToGroupOutput struct {
	metadataAddUserToGroupOutput `json:"-", xml:"-"`
}

type metadataAddUserToGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttachGroupPolicyInput struct {
	GroupName *string `type:"string" required:"true"`
	PolicyARN *string `locationName:"PolicyArn" type:"string" required:"true"`

	metadataAttachGroupPolicyInput `json:"-", xml:"-"`
}

type metadataAttachGroupPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttachGroupPolicyOutput struct {
	metadataAttachGroupPolicyOutput `json:"-", xml:"-"`
}

type metadataAttachGroupPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttachRolePolicyInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string" required:"true"`
	RoleName  *string `type:"string" required:"true"`

	metadataAttachRolePolicyInput `json:"-", xml:"-"`
}

type metadataAttachRolePolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttachRolePolicyOutput struct {
	metadataAttachRolePolicyOutput `json:"-", xml:"-"`
}

type metadataAttachRolePolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttachUserPolicyInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string" required:"true"`
	UserName  *string `type:"string" required:"true"`

	metadataAttachUserPolicyInput `json:"-", xml:"-"`
}

type metadataAttachUserPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttachUserPolicyOutput struct {
	metadataAttachUserPolicyOutput `json:"-", xml:"-"`
}

type metadataAttachUserPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttachedPolicy struct {
	PolicyARN  *string `locationName:"PolicyArn" type:"string"`
	PolicyName *string `type:"string"`

	metadataAttachedPolicy `json:"-", xml:"-"`
}

type metadataAttachedPolicy struct {
	SDKShapeTraits bool `type:"structure"`
}

type ChangePasswordInput struct {
	NewPassword *string `type:"string" required:"true"`
	OldPassword *string `type:"string" required:"true"`

	metadataChangePasswordInput `json:"-", xml:"-"`
}

type metadataChangePasswordInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ChangePasswordOutput struct {
	metadataChangePasswordOutput `json:"-", xml:"-"`
}

type metadataChangePasswordOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateAccessKeyInput struct {
	UserName *string `type:"string"`

	metadataCreateAccessKeyInput `json:"-", xml:"-"`
}

type metadataCreateAccessKeyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateAccessKeyOutput struct {
	AccessKey *AccessKey `type:"structure" required:"true"`

	metadataCreateAccessKeyOutput `json:"-", xml:"-"`
}

type metadataCreateAccessKeyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateAccountAliasInput struct {
	AccountAlias *string `type:"string" required:"true"`

	metadataCreateAccountAliasInput `json:"-", xml:"-"`
}

type metadataCreateAccountAliasInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateAccountAliasOutput struct {
	metadataCreateAccountAliasOutput `json:"-", xml:"-"`
}

type metadataCreateAccountAliasOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateGroupInput struct {
	GroupName *string `type:"string" required:"true"`
	Path      *string `type:"string"`

	metadataCreateGroupInput `json:"-", xml:"-"`
}

type metadataCreateGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateGroupOutput struct {
	Group *Group `type:"structure" required:"true"`

	metadataCreateGroupOutput `json:"-", xml:"-"`
}

type metadataCreateGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateInstanceProfileInput struct {
	InstanceProfileName *string `type:"string" required:"true"`
	Path                *string `type:"string"`

	metadataCreateInstanceProfileInput `json:"-", xml:"-"`
}

type metadataCreateInstanceProfileInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateInstanceProfileOutput struct {
	InstanceProfile *InstanceProfile `type:"structure" required:"true"`

	metadataCreateInstanceProfileOutput `json:"-", xml:"-"`
}

type metadataCreateInstanceProfileOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateLoginProfileInput struct {
	Password              *string `type:"string" required:"true"`
	PasswordResetRequired *bool   `type:"boolean"`
	UserName              *string `type:"string" required:"true"`

	metadataCreateLoginProfileInput `json:"-", xml:"-"`
}

type metadataCreateLoginProfileInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateLoginProfileOutput struct {
	LoginProfile *LoginProfile `type:"structure" required:"true"`

	metadataCreateLoginProfileOutput `json:"-", xml:"-"`
}

type metadataCreateLoginProfileOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateOpenIDConnectProviderInput struct {
	ClientIDList   []*string `type:"list"`
	ThumbprintList []*string `type:"list" required:"true"`
	URL            *string   `locationName:"Url" type:"string" required:"true"`

	metadataCreateOpenIDConnectProviderInput `json:"-", xml:"-"`
}

type metadataCreateOpenIDConnectProviderInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateOpenIDConnectProviderOutput struct {
	OpenIDConnectProviderARN *string `locationName:"OpenIDConnectProviderArn" type:"string"`

	metadataCreateOpenIDConnectProviderOutput `json:"-", xml:"-"`
}

type metadataCreateOpenIDConnectProviderOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreatePolicyInput struct {
	Description    *string `type:"string"`
	Path           *string `type:"string"`
	PolicyDocument *string `type:"string" required:"true"`
	PolicyName     *string `type:"string" required:"true"`

	metadataCreatePolicyInput `json:"-", xml:"-"`
}

type metadataCreatePolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreatePolicyOutput struct {
	Policy *Policy `type:"structure"`

	metadataCreatePolicyOutput `json:"-", xml:"-"`
}

type metadataCreatePolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreatePolicyVersionInput struct {
	PolicyARN      *string `locationName:"PolicyArn" type:"string" required:"true"`
	PolicyDocument *string `type:"string" required:"true"`
	SetAsDefault   *bool   `type:"boolean"`

	metadataCreatePolicyVersionInput `json:"-", xml:"-"`
}

type metadataCreatePolicyVersionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreatePolicyVersionOutput struct {
	PolicyVersion *PolicyVersion `type:"structure"`

	metadataCreatePolicyVersionOutput `json:"-", xml:"-"`
}

type metadataCreatePolicyVersionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateRoleInput struct {
	AssumeRolePolicyDocument *string `type:"string" required:"true"`
	Path                     *string `type:"string"`
	RoleName                 *string `type:"string" required:"true"`

	metadataCreateRoleInput `json:"-", xml:"-"`
}

type metadataCreateRoleInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateRoleOutput struct {
	Role *Role `type:"structure" required:"true"`

	metadataCreateRoleOutput `json:"-", xml:"-"`
}

type metadataCreateRoleOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateSAMLProviderInput struct {
	Name                 *string `type:"string" required:"true"`
	SAMLMetadataDocument *string `type:"string" required:"true"`

	metadataCreateSAMLProviderInput `json:"-", xml:"-"`
}

type metadataCreateSAMLProviderInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateSAMLProviderOutput struct {
	SAMLProviderARN *string `locationName:"SAMLProviderArn" type:"string"`

	metadataCreateSAMLProviderOutput `json:"-", xml:"-"`
}

type metadataCreateSAMLProviderOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateUserInput struct {
	Path     *string `type:"string"`
	UserName *string `type:"string" required:"true"`

	metadataCreateUserInput `json:"-", xml:"-"`
}

type metadataCreateUserInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateUserOutput struct {
	User *User `type:"structure"`

	metadataCreateUserOutput `json:"-", xml:"-"`
}

type metadataCreateUserOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateVirtualMFADeviceInput struct {
	Path                 *string `type:"string"`
	VirtualMFADeviceName *string `type:"string" required:"true"`

	metadataCreateVirtualMFADeviceInput `json:"-", xml:"-"`
}

type metadataCreateVirtualMFADeviceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateVirtualMFADeviceOutput struct {
	VirtualMFADevice *VirtualMFADevice `type:"structure" required:"true"`

	metadataCreateVirtualMFADeviceOutput `json:"-", xml:"-"`
}

type metadataCreateVirtualMFADeviceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeactivateMFADeviceInput struct {
	SerialNumber *string `type:"string" required:"true"`
	UserName     *string `type:"string" required:"true"`

	metadataDeactivateMFADeviceInput `json:"-", xml:"-"`
}

type metadataDeactivateMFADeviceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeactivateMFADeviceOutput struct {
	metadataDeactivateMFADeviceOutput `json:"-", xml:"-"`
}

type metadataDeactivateMFADeviceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteAccessKeyInput struct {
	AccessKeyID *string `locationName:"AccessKeyId" type:"string" required:"true"`
	UserName    *string `type:"string"`

	metadataDeleteAccessKeyInput `json:"-", xml:"-"`
}

type metadataDeleteAccessKeyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteAccessKeyOutput struct {
	metadataDeleteAccessKeyOutput `json:"-", xml:"-"`
}

type metadataDeleteAccessKeyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteAccountAliasInput struct {
	AccountAlias *string `type:"string" required:"true"`

	metadataDeleteAccountAliasInput `json:"-", xml:"-"`
}

type metadataDeleteAccountAliasInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteAccountAliasOutput struct {
	metadataDeleteAccountAliasOutput `json:"-", xml:"-"`
}

type metadataDeleteAccountAliasOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteAccountPasswordPolicyInput struct {
	metadataDeleteAccountPasswordPolicyInput `json:"-", xml:"-"`
}

type metadataDeleteAccountPasswordPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteAccountPasswordPolicyOutput struct {
	metadataDeleteAccountPasswordPolicyOutput `json:"-", xml:"-"`
}

type metadataDeleteAccountPasswordPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteGroupInput struct {
	GroupName *string `type:"string" required:"true"`

	metadataDeleteGroupInput `json:"-", xml:"-"`
}

type metadataDeleteGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteGroupOutput struct {
	metadataDeleteGroupOutput `json:"-", xml:"-"`
}

type metadataDeleteGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteGroupPolicyInput struct {
	GroupName  *string `type:"string" required:"true"`
	PolicyName *string `type:"string" required:"true"`

	metadataDeleteGroupPolicyInput `json:"-", xml:"-"`
}

type metadataDeleteGroupPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteGroupPolicyOutput struct {
	metadataDeleteGroupPolicyOutput `json:"-", xml:"-"`
}

type metadataDeleteGroupPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteInstanceProfileInput struct {
	InstanceProfileName *string `type:"string" required:"true"`

	metadataDeleteInstanceProfileInput `json:"-", xml:"-"`
}

type metadataDeleteInstanceProfileInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteInstanceProfileOutput struct {
	metadataDeleteInstanceProfileOutput `json:"-", xml:"-"`
}

type metadataDeleteInstanceProfileOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteLoginProfileInput struct {
	UserName *string `type:"string" required:"true"`

	metadataDeleteLoginProfileInput `json:"-", xml:"-"`
}

type metadataDeleteLoginProfileInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteLoginProfileOutput struct {
	metadataDeleteLoginProfileOutput `json:"-", xml:"-"`
}

type metadataDeleteLoginProfileOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteOpenIDConnectProviderInput struct {
	OpenIDConnectProviderARN *string `locationName:"OpenIDConnectProviderArn" type:"string" required:"true"`

	metadataDeleteOpenIDConnectProviderInput `json:"-", xml:"-"`
}

type metadataDeleteOpenIDConnectProviderInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteOpenIDConnectProviderOutput struct {
	metadataDeleteOpenIDConnectProviderOutput `json:"-", xml:"-"`
}

type metadataDeleteOpenIDConnectProviderOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeletePolicyInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string" required:"true"`

	metadataDeletePolicyInput `json:"-", xml:"-"`
}

type metadataDeletePolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeletePolicyOutput struct {
	metadataDeletePolicyOutput `json:"-", xml:"-"`
}

type metadataDeletePolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeletePolicyVersionInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string" required:"true"`
	VersionID *string `locationName:"VersionId" type:"string" required:"true"`

	metadataDeletePolicyVersionInput `json:"-", xml:"-"`
}

type metadataDeletePolicyVersionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeletePolicyVersionOutput struct {
	metadataDeletePolicyVersionOutput `json:"-", xml:"-"`
}

type metadataDeletePolicyVersionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteRoleInput struct {
	RoleName *string `type:"string" required:"true"`

	metadataDeleteRoleInput `json:"-", xml:"-"`
}

type metadataDeleteRoleInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteRoleOutput struct {
	metadataDeleteRoleOutput `json:"-", xml:"-"`
}

type metadataDeleteRoleOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteRolePolicyInput struct {
	PolicyName *string `type:"string" required:"true"`
	RoleName   *string `type:"string" required:"true"`

	metadataDeleteRolePolicyInput `json:"-", xml:"-"`
}

type metadataDeleteRolePolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteRolePolicyOutput struct {
	metadataDeleteRolePolicyOutput `json:"-", xml:"-"`
}

type metadataDeleteRolePolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteSAMLProviderInput struct {
	SAMLProviderARN *string `locationName:"SAMLProviderArn" type:"string" required:"true"`

	metadataDeleteSAMLProviderInput `json:"-", xml:"-"`
}

type metadataDeleteSAMLProviderInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteSAMLProviderOutput struct {
	metadataDeleteSAMLProviderOutput `json:"-", xml:"-"`
}

type metadataDeleteSAMLProviderOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteServerCertificateInput struct {
	ServerCertificateName *string `type:"string" required:"true"`

	metadataDeleteServerCertificateInput `json:"-", xml:"-"`
}

type metadataDeleteServerCertificateInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteServerCertificateOutput struct {
	metadataDeleteServerCertificateOutput `json:"-", xml:"-"`
}

type metadataDeleteServerCertificateOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteSigningCertificateInput struct {
	CertificateID *string `locationName:"CertificateId" type:"string" required:"true"`
	UserName      *string `type:"string"`

	metadataDeleteSigningCertificateInput `json:"-", xml:"-"`
}

type metadataDeleteSigningCertificateInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteSigningCertificateOutput struct {
	metadataDeleteSigningCertificateOutput `json:"-", xml:"-"`
}

type metadataDeleteSigningCertificateOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteUserInput struct {
	UserName *string `type:"string" required:"true"`

	metadataDeleteUserInput `json:"-", xml:"-"`
}

type metadataDeleteUserInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteUserOutput struct {
	metadataDeleteUserOutput `json:"-", xml:"-"`
}

type metadataDeleteUserOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteUserPolicyInput struct {
	PolicyName *string `type:"string" required:"true"`
	UserName   *string `type:"string" required:"true"`

	metadataDeleteUserPolicyInput `json:"-", xml:"-"`
}

type metadataDeleteUserPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteUserPolicyOutput struct {
	metadataDeleteUserPolicyOutput `json:"-", xml:"-"`
}

type metadataDeleteUserPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteVirtualMFADeviceInput struct {
	SerialNumber *string `type:"string" required:"true"`

	metadataDeleteVirtualMFADeviceInput `json:"-", xml:"-"`
}

type metadataDeleteVirtualMFADeviceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteVirtualMFADeviceOutput struct {
	metadataDeleteVirtualMFADeviceOutput `json:"-", xml:"-"`
}

type metadataDeleteVirtualMFADeviceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DetachGroupPolicyInput struct {
	GroupName *string `type:"string" required:"true"`
	PolicyARN *string `locationName:"PolicyArn" type:"string" required:"true"`

	metadataDetachGroupPolicyInput `json:"-", xml:"-"`
}

type metadataDetachGroupPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DetachGroupPolicyOutput struct {
	metadataDetachGroupPolicyOutput `json:"-", xml:"-"`
}

type metadataDetachGroupPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DetachRolePolicyInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string" required:"true"`
	RoleName  *string `type:"string" required:"true"`

	metadataDetachRolePolicyInput `json:"-", xml:"-"`
}

type metadataDetachRolePolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DetachRolePolicyOutput struct {
	metadataDetachRolePolicyOutput `json:"-", xml:"-"`
}

type metadataDetachRolePolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DetachUserPolicyInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string" required:"true"`
	UserName  *string `type:"string" required:"true"`

	metadataDetachUserPolicyInput `json:"-", xml:"-"`
}

type metadataDetachUserPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DetachUserPolicyOutput struct {
	metadataDetachUserPolicyOutput `json:"-", xml:"-"`
}

type metadataDetachUserPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnableMFADeviceInput struct {
	AuthenticationCode1 *string `type:"string" required:"true"`
	AuthenticationCode2 *string `type:"string" required:"true"`
	SerialNumber        *string `type:"string" required:"true"`
	UserName            *string `type:"string" required:"true"`

	metadataEnableMFADeviceInput `json:"-", xml:"-"`
}

type metadataEnableMFADeviceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnableMFADeviceOutput struct {
	metadataEnableMFADeviceOutput `json:"-", xml:"-"`
}

type metadataEnableMFADeviceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GenerateCredentialReportInput struct {
	metadataGenerateCredentialReportInput `json:"-", xml:"-"`
}

type metadataGenerateCredentialReportInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GenerateCredentialReportOutput struct {
	Description *string `type:"string"`
	State       *string `type:"string"`

	metadataGenerateCredentialReportOutput `json:"-", xml:"-"`
}

type metadataGenerateCredentialReportOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetAccountAuthorizationDetailsInput struct {
	Filter   []*string `type:"list"`
	Marker   *string   `type:"string"`
	MaxItems *int64    `type:"integer"`

	metadataGetAccountAuthorizationDetailsInput `json:"-", xml:"-"`
}

type metadataGetAccountAuthorizationDetailsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetAccountAuthorizationDetailsOutput struct {
	GroupDetailList []*GroupDetail `type:"list"`
	IsTruncated     *bool          `type:"boolean"`
	Marker          *string        `type:"string"`
	RoleDetailList  []*RoleDetail  `type:"list"`
	UserDetailList  []*UserDetail  `type:"list"`

	metadataGetAccountAuthorizationDetailsOutput `json:"-", xml:"-"`
}

type metadataGetAccountAuthorizationDetailsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetAccountPasswordPolicyInput struct {
	metadataGetAccountPasswordPolicyInput `json:"-", xml:"-"`
}

type metadataGetAccountPasswordPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetAccountPasswordPolicyOutput struct {
	PasswordPolicy *PasswordPolicy `type:"structure" required:"true"`

	metadataGetAccountPasswordPolicyOutput `json:"-", xml:"-"`
}

type metadataGetAccountPasswordPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetAccountSummaryInput struct {
	metadataGetAccountSummaryInput `json:"-", xml:"-"`
}

type metadataGetAccountSummaryInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetAccountSummaryOutput struct {
	SummaryMap *map[string]*int64 `type:"map"`

	metadataGetAccountSummaryOutput `json:"-", xml:"-"`
}

type metadataGetAccountSummaryOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetCredentialReportInput struct {
	metadataGetCredentialReportInput `json:"-", xml:"-"`
}

type metadataGetCredentialReportInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetCredentialReportOutput struct {
	Content       []byte     `type:"blob"`
	GeneratedTime *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	ReportFormat  *string    `type:"string"`

	metadataGetCredentialReportOutput `json:"-", xml:"-"`
}

type metadataGetCredentialReportOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetGroupInput struct {
	GroupName *string `type:"string" required:"true"`
	Marker    *string `type:"string"`
	MaxItems  *int64  `type:"integer"`

	metadataGetGroupInput `json:"-", xml:"-"`
}

type metadataGetGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetGroupOutput struct {
	Group       *Group  `type:"structure" required:"true"`
	IsTruncated *bool   `type:"boolean"`
	Marker      *string `type:"string"`
	Users       []*User `type:"list" required:"true"`

	metadataGetGroupOutput `json:"-", xml:"-"`
}

type metadataGetGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetGroupPolicyInput struct {
	GroupName  *string `type:"string" required:"true"`
	PolicyName *string `type:"string" required:"true"`

	metadataGetGroupPolicyInput `json:"-", xml:"-"`
}

type metadataGetGroupPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetGroupPolicyOutput struct {
	GroupName      *string `type:"string" required:"true"`
	PolicyDocument *string `type:"string" required:"true"`
	PolicyName     *string `type:"string" required:"true"`

	metadataGetGroupPolicyOutput `json:"-", xml:"-"`
}

type metadataGetGroupPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetInstanceProfileInput struct {
	InstanceProfileName *string `type:"string" required:"true"`

	metadataGetInstanceProfileInput `json:"-", xml:"-"`
}

type metadataGetInstanceProfileInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetInstanceProfileOutput struct {
	InstanceProfile *InstanceProfile `type:"structure" required:"true"`

	metadataGetInstanceProfileOutput `json:"-", xml:"-"`
}

type metadataGetInstanceProfileOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetLoginProfileInput struct {
	UserName *string `type:"string" required:"true"`

	metadataGetLoginProfileInput `json:"-", xml:"-"`
}

type metadataGetLoginProfileInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetLoginProfileOutput struct {
	LoginProfile *LoginProfile `type:"structure" required:"true"`

	metadataGetLoginProfileOutput `json:"-", xml:"-"`
}

type metadataGetLoginProfileOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetOpenIDConnectProviderInput struct {
	OpenIDConnectProviderARN *string `locationName:"OpenIDConnectProviderArn" type:"string" required:"true"`

	metadataGetOpenIDConnectProviderInput `json:"-", xml:"-"`
}

type metadataGetOpenIDConnectProviderInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetOpenIDConnectProviderOutput struct {
	ClientIDList   []*string  `type:"list"`
	CreateDate     *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	ThumbprintList []*string  `type:"list"`
	URL            *string    `locationName:"Url" type:"string"`

	metadataGetOpenIDConnectProviderOutput `json:"-", xml:"-"`
}

type metadataGetOpenIDConnectProviderOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetPolicyInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string" required:"true"`

	metadataGetPolicyInput `json:"-", xml:"-"`
}

type metadataGetPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetPolicyOutput struct {
	Policy *Policy `type:"structure"`

	metadataGetPolicyOutput `json:"-", xml:"-"`
}

type metadataGetPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetPolicyVersionInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string" required:"true"`
	VersionID *string `locationName:"VersionId" type:"string" required:"true"`

	metadataGetPolicyVersionInput `json:"-", xml:"-"`
}

type metadataGetPolicyVersionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetPolicyVersionOutput struct {
	PolicyVersion *PolicyVersion `type:"structure"`

	metadataGetPolicyVersionOutput `json:"-", xml:"-"`
}

type metadataGetPolicyVersionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetRoleInput struct {
	RoleName *string `type:"string" required:"true"`

	metadataGetRoleInput `json:"-", xml:"-"`
}

type metadataGetRoleInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetRoleOutput struct {
	Role *Role `type:"structure" required:"true"`

	metadataGetRoleOutput `json:"-", xml:"-"`
}

type metadataGetRoleOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetRolePolicyInput struct {
	PolicyName *string `type:"string" required:"true"`
	RoleName   *string `type:"string" required:"true"`

	metadataGetRolePolicyInput `json:"-", xml:"-"`
}

type metadataGetRolePolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetRolePolicyOutput struct {
	PolicyDocument *string `type:"string" required:"true"`
	PolicyName     *string `type:"string" required:"true"`
	RoleName       *string `type:"string" required:"true"`

	metadataGetRolePolicyOutput `json:"-", xml:"-"`
}

type metadataGetRolePolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetSAMLProviderInput struct {
	SAMLProviderARN *string `locationName:"SAMLProviderArn" type:"string" required:"true"`

	metadataGetSAMLProviderInput `json:"-", xml:"-"`
}

type metadataGetSAMLProviderInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetSAMLProviderOutput struct {
	CreateDate           *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	SAMLMetadataDocument *string    `type:"string"`
	ValidUntil           *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataGetSAMLProviderOutput `json:"-", xml:"-"`
}

type metadataGetSAMLProviderOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetServerCertificateInput struct {
	ServerCertificateName *string `type:"string" required:"true"`

	metadataGetServerCertificateInput `json:"-", xml:"-"`
}

type metadataGetServerCertificateInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetServerCertificateOutput struct {
	ServerCertificate *ServerCertificate `type:"structure" required:"true"`

	metadataGetServerCertificateOutput `json:"-", xml:"-"`
}

type metadataGetServerCertificateOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetUserInput struct {
	UserName *string `type:"string"`

	metadataGetUserInput `json:"-", xml:"-"`
}

type metadataGetUserInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetUserOutput struct {
	User *User `type:"structure" required:"true"`

	metadataGetUserOutput `json:"-", xml:"-"`
}

type metadataGetUserOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetUserPolicyInput struct {
	PolicyName *string `type:"string" required:"true"`
	UserName   *string `type:"string" required:"true"`

	metadataGetUserPolicyInput `json:"-", xml:"-"`
}

type metadataGetUserPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetUserPolicyOutput struct {
	PolicyDocument *string `type:"string" required:"true"`
	PolicyName     *string `type:"string" required:"true"`
	UserName       *string `type:"string" required:"true"`

	metadataGetUserPolicyOutput `json:"-", xml:"-"`
}

type metadataGetUserPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Group struct {
	ARN        *string    `locationName:"Arn" type:"string" required:"true"`
	CreateDate *time.Time `type:"timestamp" timestampFormat:"iso8601" required:"true"`
	GroupID    *string    `locationName:"GroupId" type:"string" required:"true"`
	GroupName  *string    `type:"string" required:"true"`
	Path       *string    `type:"string" required:"true"`

	metadataGroup `json:"-", xml:"-"`
}

type metadataGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type GroupDetail struct {
	ARN             *string         `locationName:"Arn" type:"string"`
	CreateDate      *time.Time      `type:"timestamp" timestampFormat:"iso8601"`
	GroupID         *string         `locationName:"GroupId" type:"string"`
	GroupName       *string         `type:"string"`
	GroupPolicyList []*PolicyDetail `type:"list"`
	Path            *string         `type:"string"`

	metadataGroupDetail `json:"-", xml:"-"`
}

type metadataGroupDetail struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceProfile struct {
	ARN                 *string    `locationName:"Arn" type:"string" required:"true"`
	CreateDate          *time.Time `type:"timestamp" timestampFormat:"iso8601" required:"true"`
	InstanceProfileID   *string    `locationName:"InstanceProfileId" type:"string" required:"true"`
	InstanceProfileName *string    `type:"string" required:"true"`
	Path                *string    `type:"string" required:"true"`
	Roles               []*Role    `type:"list" required:"true"`

	metadataInstanceProfile `json:"-", xml:"-"`
}

type metadataInstanceProfile struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAccessKeysInput struct {
	Marker   *string `type:"string"`
	MaxItems *int64  `type:"integer"`
	UserName *string `type:"string"`

	metadataListAccessKeysInput `json:"-", xml:"-"`
}

type metadataListAccessKeysInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAccessKeysOutput struct {
	AccessKeyMetadata []*AccessKeyMetadata `type:"list" required:"true"`
	IsTruncated       *bool                `type:"boolean"`
	Marker            *string              `type:"string"`

	metadataListAccessKeysOutput `json:"-", xml:"-"`
}

type metadataListAccessKeysOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAccountAliasesInput struct {
	Marker   *string `type:"string"`
	MaxItems *int64  `type:"integer"`

	metadataListAccountAliasesInput `json:"-", xml:"-"`
}

type metadataListAccountAliasesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAccountAliasesOutput struct {
	AccountAliases []*string `type:"list" required:"true"`
	IsTruncated    *bool     `type:"boolean"`
	Marker         *string   `type:"string"`

	metadataListAccountAliasesOutput `json:"-", xml:"-"`
}

type metadataListAccountAliasesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAttachedGroupPoliciesInput struct {
	GroupName  *string `type:"string" required:"true"`
	Marker     *string `type:"string"`
	MaxItems   *int64  `type:"integer"`
	PathPrefix *string `type:"string"`

	metadataListAttachedGroupPoliciesInput `json:"-", xml:"-"`
}

type metadataListAttachedGroupPoliciesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAttachedGroupPoliciesOutput struct {
	AttachedPolicies []*AttachedPolicy `type:"list"`
	IsTruncated      *bool             `type:"boolean"`
	Marker           *string           `type:"string"`

	metadataListAttachedGroupPoliciesOutput `json:"-", xml:"-"`
}

type metadataListAttachedGroupPoliciesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAttachedRolePoliciesInput struct {
	Marker     *string `type:"string"`
	MaxItems   *int64  `type:"integer"`
	PathPrefix *string `type:"string"`
	RoleName   *string `type:"string" required:"true"`

	metadataListAttachedRolePoliciesInput `json:"-", xml:"-"`
}

type metadataListAttachedRolePoliciesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAttachedRolePoliciesOutput struct {
	AttachedPolicies []*AttachedPolicy `type:"list"`
	IsTruncated      *bool             `type:"boolean"`
	Marker           *string           `type:"string"`

	metadataListAttachedRolePoliciesOutput `json:"-", xml:"-"`
}

type metadataListAttachedRolePoliciesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAttachedUserPoliciesInput struct {
	Marker     *string `type:"string"`
	MaxItems   *int64  `type:"integer"`
	PathPrefix *string `type:"string"`
	UserName   *string `type:"string" required:"true"`

	metadataListAttachedUserPoliciesInput `json:"-", xml:"-"`
}

type metadataListAttachedUserPoliciesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAttachedUserPoliciesOutput struct {
	AttachedPolicies []*AttachedPolicy `type:"list"`
	IsTruncated      *bool             `type:"boolean"`
	Marker           *string           `type:"string"`

	metadataListAttachedUserPoliciesOutput `json:"-", xml:"-"`
}

type metadataListAttachedUserPoliciesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListEntitiesForPolicyInput struct {
	EntityFilter *string `type:"string"`
	Marker       *string `type:"string"`
	MaxItems     *int64  `type:"integer"`
	PathPrefix   *string `type:"string"`
	PolicyARN    *string `locationName:"PolicyArn" type:"string" required:"true"`

	metadataListEntitiesForPolicyInput `json:"-", xml:"-"`
}

type metadataListEntitiesForPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListEntitiesForPolicyOutput struct {
	IsTruncated  *bool          `type:"boolean"`
	Marker       *string        `type:"string"`
	PolicyGroups []*PolicyGroup `type:"list"`
	PolicyRoles  []*PolicyRole  `type:"list"`
	PolicyUsers  []*PolicyUser  `type:"list"`

	metadataListEntitiesForPolicyOutput `json:"-", xml:"-"`
}

type metadataListEntitiesForPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListGroupPoliciesInput struct {
	GroupName *string `type:"string" required:"true"`
	Marker    *string `type:"string"`
	MaxItems  *int64  `type:"integer"`

	metadataListGroupPoliciesInput `json:"-", xml:"-"`
}

type metadataListGroupPoliciesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListGroupPoliciesOutput struct {
	IsTruncated *bool     `type:"boolean"`
	Marker      *string   `type:"string"`
	PolicyNames []*string `type:"list" required:"true"`

	metadataListGroupPoliciesOutput `json:"-", xml:"-"`
}

type metadataListGroupPoliciesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListGroupsForUserInput struct {
	Marker   *string `type:"string"`
	MaxItems *int64  `type:"integer"`
	UserName *string `type:"string" required:"true"`

	metadataListGroupsForUserInput `json:"-", xml:"-"`
}

type metadataListGroupsForUserInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListGroupsForUserOutput struct {
	Groups      []*Group `type:"list" required:"true"`
	IsTruncated *bool    `type:"boolean"`
	Marker      *string  `type:"string"`

	metadataListGroupsForUserOutput `json:"-", xml:"-"`
}

type metadataListGroupsForUserOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListGroupsInput struct {
	Marker     *string `type:"string"`
	MaxItems   *int64  `type:"integer"`
	PathPrefix *string `type:"string"`

	metadataListGroupsInput `json:"-", xml:"-"`
}

type metadataListGroupsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListGroupsOutput struct {
	Groups      []*Group `type:"list" required:"true"`
	IsTruncated *bool    `type:"boolean"`
	Marker      *string  `type:"string"`

	metadataListGroupsOutput `json:"-", xml:"-"`
}

type metadataListGroupsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListInstanceProfilesForRoleInput struct {
	Marker   *string `type:"string"`
	MaxItems *int64  `type:"integer"`
	RoleName *string `type:"string" required:"true"`

	metadataListInstanceProfilesForRoleInput `json:"-", xml:"-"`
}

type metadataListInstanceProfilesForRoleInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListInstanceProfilesForRoleOutput struct {
	InstanceProfiles []*InstanceProfile `type:"list" required:"true"`
	IsTruncated      *bool              `type:"boolean"`
	Marker           *string            `type:"string"`

	metadataListInstanceProfilesForRoleOutput `json:"-", xml:"-"`
}

type metadataListInstanceProfilesForRoleOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListInstanceProfilesInput struct {
	Marker     *string `type:"string"`
	MaxItems   *int64  `type:"integer"`
	PathPrefix *string `type:"string"`

	metadataListInstanceProfilesInput `json:"-", xml:"-"`
}

type metadataListInstanceProfilesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListInstanceProfilesOutput struct {
	InstanceProfiles []*InstanceProfile `type:"list" required:"true"`
	IsTruncated      *bool              `type:"boolean"`
	Marker           *string            `type:"string"`

	metadataListInstanceProfilesOutput `json:"-", xml:"-"`
}

type metadataListInstanceProfilesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListMFADevicesInput struct {
	Marker   *string `type:"string"`
	MaxItems *int64  `type:"integer"`
	UserName *string `type:"string"`

	metadataListMFADevicesInput `json:"-", xml:"-"`
}

type metadataListMFADevicesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListMFADevicesOutput struct {
	IsTruncated *bool        `type:"boolean"`
	MFADevices  []*MFADevice `type:"list" required:"true"`
	Marker      *string      `type:"string"`

	metadataListMFADevicesOutput `json:"-", xml:"-"`
}

type metadataListMFADevicesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListOpenIDConnectProvidersInput struct {
	metadataListOpenIDConnectProvidersInput `json:"-", xml:"-"`
}

type metadataListOpenIDConnectProvidersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListOpenIDConnectProvidersOutput struct {
	OpenIDConnectProviderList []*OpenIDConnectProviderListEntry `type:"list"`

	metadataListOpenIDConnectProvidersOutput `json:"-", xml:"-"`
}

type metadataListOpenIDConnectProvidersOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListPoliciesInput struct {
	Marker       *string `type:"string"`
	MaxItems     *int64  `type:"integer"`
	OnlyAttached *bool   `type:"boolean"`
	PathPrefix   *string `type:"string"`
	Scope        *string `type:"string"`

	metadataListPoliciesInput `json:"-", xml:"-"`
}

type metadataListPoliciesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListPoliciesOutput struct {
	IsTruncated *bool     `type:"boolean"`
	Marker      *string   `type:"string"`
	Policies    []*Policy `type:"list"`

	metadataListPoliciesOutput `json:"-", xml:"-"`
}

type metadataListPoliciesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListPolicyVersionsInput struct {
	Marker    *string `type:"string"`
	MaxItems  *int64  `type:"integer"`
	PolicyARN *string `locationName:"PolicyArn" type:"string" required:"true"`

	metadataListPolicyVersionsInput `json:"-", xml:"-"`
}

type metadataListPolicyVersionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListPolicyVersionsOutput struct {
	IsTruncated *bool            `type:"boolean"`
	Marker      *string          `type:"string"`
	Versions    []*PolicyVersion `type:"list"`

	metadataListPolicyVersionsOutput `json:"-", xml:"-"`
}

type metadataListPolicyVersionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListRolePoliciesInput struct {
	Marker   *string `type:"string"`
	MaxItems *int64  `type:"integer"`
	RoleName *string `type:"string" required:"true"`

	metadataListRolePoliciesInput `json:"-", xml:"-"`
}

type metadataListRolePoliciesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListRolePoliciesOutput struct {
	IsTruncated *bool     `type:"boolean"`
	Marker      *string   `type:"string"`
	PolicyNames []*string `type:"list" required:"true"`

	metadataListRolePoliciesOutput `json:"-", xml:"-"`
}

type metadataListRolePoliciesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListRolesInput struct {
	Marker     *string `type:"string"`
	MaxItems   *int64  `type:"integer"`
	PathPrefix *string `type:"string"`

	metadataListRolesInput `json:"-", xml:"-"`
}

type metadataListRolesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListRolesOutput struct {
	IsTruncated *bool   `type:"boolean"`
	Marker      *string `type:"string"`
	Roles       []*Role `type:"list" required:"true"`

	metadataListRolesOutput `json:"-", xml:"-"`
}

type metadataListRolesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListSAMLProvidersInput struct {
	metadataListSAMLProvidersInput `json:"-", xml:"-"`
}

type metadataListSAMLProvidersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListSAMLProvidersOutput struct {
	SAMLProviderList []*SAMLProviderListEntry `type:"list"`

	metadataListSAMLProvidersOutput `json:"-", xml:"-"`
}

type metadataListSAMLProvidersOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListServerCertificatesInput struct {
	Marker     *string `type:"string"`
	MaxItems   *int64  `type:"integer"`
	PathPrefix *string `type:"string"`

	metadataListServerCertificatesInput `json:"-", xml:"-"`
}

type metadataListServerCertificatesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListServerCertificatesOutput struct {
	IsTruncated                   *bool                        `type:"boolean"`
	Marker                        *string                      `type:"string"`
	ServerCertificateMetadataList []*ServerCertificateMetadata `type:"list" required:"true"`

	metadataListServerCertificatesOutput `json:"-", xml:"-"`
}

type metadataListServerCertificatesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListSigningCertificatesInput struct {
	Marker   *string `type:"string"`
	MaxItems *int64  `type:"integer"`
	UserName *string `type:"string"`

	metadataListSigningCertificatesInput `json:"-", xml:"-"`
}

type metadataListSigningCertificatesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListSigningCertificatesOutput struct {
	Certificates []*SigningCertificate `type:"list" required:"true"`
	IsTruncated  *bool                 `type:"boolean"`
	Marker       *string               `type:"string"`

	metadataListSigningCertificatesOutput `json:"-", xml:"-"`
}

type metadataListSigningCertificatesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListUserPoliciesInput struct {
	Marker   *string `type:"string"`
	MaxItems *int64  `type:"integer"`
	UserName *string `type:"string" required:"true"`

	metadataListUserPoliciesInput `json:"-", xml:"-"`
}

type metadataListUserPoliciesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListUserPoliciesOutput struct {
	IsTruncated *bool     `type:"boolean"`
	Marker      *string   `type:"string"`
	PolicyNames []*string `type:"list" required:"true"`

	metadataListUserPoliciesOutput `json:"-", xml:"-"`
}

type metadataListUserPoliciesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListUsersInput struct {
	Marker     *string `type:"string"`
	MaxItems   *int64  `type:"integer"`
	PathPrefix *string `type:"string"`

	metadataListUsersInput `json:"-", xml:"-"`
}

type metadataListUsersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListUsersOutput struct {
	IsTruncated *bool   `type:"boolean"`
	Marker      *string `type:"string"`
	Users       []*User `type:"list" required:"true"`

	metadataListUsersOutput `json:"-", xml:"-"`
}

type metadataListUsersOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListVirtualMFADevicesInput struct {
	AssignmentStatus *string `type:"string"`
	Marker           *string `type:"string"`
	MaxItems         *int64  `type:"integer"`

	metadataListVirtualMFADevicesInput `json:"-", xml:"-"`
}

type metadataListVirtualMFADevicesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListVirtualMFADevicesOutput struct {
	IsTruncated       *bool               `type:"boolean"`
	Marker            *string             `type:"string"`
	VirtualMFADevices []*VirtualMFADevice `type:"list" required:"true"`

	metadataListVirtualMFADevicesOutput `json:"-", xml:"-"`
}

type metadataListVirtualMFADevicesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type LoginProfile struct {
	CreateDate            *time.Time `type:"timestamp" timestampFormat:"iso8601" required:"true"`
	PasswordResetRequired *bool      `type:"boolean"`
	UserName              *string    `type:"string" required:"true"`

	metadataLoginProfile `json:"-", xml:"-"`
}

type metadataLoginProfile struct {
	SDKShapeTraits bool `type:"structure"`
}

type MFADevice struct {
	EnableDate   *time.Time `type:"timestamp" timestampFormat:"iso8601" required:"true"`
	SerialNumber *string    `type:"string" required:"true"`
	UserName     *string    `type:"string" required:"true"`

	metadataMFADevice `json:"-", xml:"-"`
}

type metadataMFADevice struct {
	SDKShapeTraits bool `type:"structure"`
}

type OpenIDConnectProviderListEntry struct {
	ARN *string `locationName:"Arn" type:"string"`

	metadataOpenIDConnectProviderListEntry `json:"-", xml:"-"`
}

type metadataOpenIDConnectProviderListEntry struct {
	SDKShapeTraits bool `type:"structure"`
}

type PasswordPolicy struct {
	AllowUsersToChangePassword *bool  `type:"boolean"`
	ExpirePasswords            *bool  `type:"boolean"`
	HardExpiry                 *bool  `type:"boolean"`
	MaxPasswordAge             *int64 `type:"integer"`
	MinimumPasswordLength      *int64 `type:"integer"`
	PasswordReusePrevention    *int64 `type:"integer"`
	RequireLowercaseCharacters *bool  `type:"boolean"`
	RequireNumbers             *bool  `type:"boolean"`
	RequireSymbols             *bool  `type:"boolean"`
	RequireUppercaseCharacters *bool  `type:"boolean"`

	metadataPasswordPolicy `json:"-", xml:"-"`
}

type metadataPasswordPolicy struct {
	SDKShapeTraits bool `type:"structure"`
}

type Policy struct {
	ARN              *string    `locationName:"Arn" type:"string"`
	AttachmentCount  *int64     `type:"integer"`
	CreateDate       *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	DefaultVersionID *string    `locationName:"DefaultVersionId" type:"string"`
	Description      *string    `type:"string"`
	IsAttachable     *bool      `type:"boolean"`
	Path             *string    `type:"string"`
	PolicyID         *string    `locationName:"PolicyId" type:"string"`
	PolicyName       *string    `type:"string"`
	UpdateDate       *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataPolicy `json:"-", xml:"-"`
}

type metadataPolicy struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyDetail struct {
	PolicyDocument *string `type:"string"`
	PolicyName     *string `type:"string"`

	metadataPolicyDetail `json:"-", xml:"-"`
}

type metadataPolicyDetail struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyGroup struct {
	GroupName *string `type:"string"`

	metadataPolicyGroup `json:"-", xml:"-"`
}

type metadataPolicyGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyRole struct {
	RoleName *string `type:"string"`

	metadataPolicyRole `json:"-", xml:"-"`
}

type metadataPolicyRole struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyUser struct {
	UserName *string `type:"string"`

	metadataPolicyUser `json:"-", xml:"-"`
}

type metadataPolicyUser struct {
	SDKShapeTraits bool `type:"structure"`
}

type PolicyVersion struct {
	CreateDate       *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Document         *string    `type:"string"`
	IsDefaultVersion *bool      `type:"boolean"`
	VersionID        *string    `locationName:"VersionId" type:"string"`

	metadataPolicyVersion `json:"-", xml:"-"`
}

type metadataPolicyVersion struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutGroupPolicyInput struct {
	GroupName      *string `type:"string" required:"true"`
	PolicyDocument *string `type:"string" required:"true"`
	PolicyName     *string `type:"string" required:"true"`

	metadataPutGroupPolicyInput `json:"-", xml:"-"`
}

type metadataPutGroupPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutGroupPolicyOutput struct {
	metadataPutGroupPolicyOutput `json:"-", xml:"-"`
}

type metadataPutGroupPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutRolePolicyInput struct {
	PolicyDocument *string `type:"string" required:"true"`
	PolicyName     *string `type:"string" required:"true"`
	RoleName       *string `type:"string" required:"true"`

	metadataPutRolePolicyInput `json:"-", xml:"-"`
}

type metadataPutRolePolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutRolePolicyOutput struct {
	metadataPutRolePolicyOutput `json:"-", xml:"-"`
}

type metadataPutRolePolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutUserPolicyInput struct {
	PolicyDocument *string `type:"string" required:"true"`
	PolicyName     *string `type:"string" required:"true"`
	UserName       *string `type:"string" required:"true"`

	metadataPutUserPolicyInput `json:"-", xml:"-"`
}

type metadataPutUserPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutUserPolicyOutput struct {
	metadataPutUserPolicyOutput `json:"-", xml:"-"`
}

type metadataPutUserPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RemoveClientIDFromOpenIDConnectProviderInput struct {
	ClientID                 *string `type:"string" required:"true"`
	OpenIDConnectProviderARN *string `locationName:"OpenIDConnectProviderArn" type:"string" required:"true"`

	metadataRemoveClientIDFromOpenIDConnectProviderInput `json:"-", xml:"-"`
}

type metadataRemoveClientIDFromOpenIDConnectProviderInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RemoveClientIDFromOpenIDConnectProviderOutput struct {
	metadataRemoveClientIDFromOpenIDConnectProviderOutput `json:"-", xml:"-"`
}

type metadataRemoveClientIDFromOpenIDConnectProviderOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RemoveRoleFromInstanceProfileInput struct {
	InstanceProfileName *string `type:"string" required:"true"`
	RoleName            *string `type:"string" required:"true"`

	metadataRemoveRoleFromInstanceProfileInput `json:"-", xml:"-"`
}

type metadataRemoveRoleFromInstanceProfileInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RemoveRoleFromInstanceProfileOutput struct {
	metadataRemoveRoleFromInstanceProfileOutput `json:"-", xml:"-"`
}

type metadataRemoveRoleFromInstanceProfileOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RemoveUserFromGroupInput struct {
	GroupName *string `type:"string" required:"true"`
	UserName  *string `type:"string" required:"true"`

	metadataRemoveUserFromGroupInput `json:"-", xml:"-"`
}

type metadataRemoveUserFromGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RemoveUserFromGroupOutput struct {
	metadataRemoveUserFromGroupOutput `json:"-", xml:"-"`
}

type metadataRemoveUserFromGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ResyncMFADeviceInput struct {
	AuthenticationCode1 *string `type:"string" required:"true"`
	AuthenticationCode2 *string `type:"string" required:"true"`
	SerialNumber        *string `type:"string" required:"true"`
	UserName            *string `type:"string" required:"true"`

	metadataResyncMFADeviceInput `json:"-", xml:"-"`
}

type metadataResyncMFADeviceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ResyncMFADeviceOutput struct {
	metadataResyncMFADeviceOutput `json:"-", xml:"-"`
}

type metadataResyncMFADeviceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Role struct {
	ARN                      *string    `locationName:"Arn" type:"string" required:"true"`
	AssumeRolePolicyDocument *string    `type:"string"`
	CreateDate               *time.Time `type:"timestamp" timestampFormat:"iso8601" required:"true"`
	Path                     *string    `type:"string" required:"true"`
	RoleID                   *string    `locationName:"RoleId" type:"string" required:"true"`
	RoleName                 *string    `type:"string" required:"true"`

	metadataRole `json:"-", xml:"-"`
}

type metadataRole struct {
	SDKShapeTraits bool `type:"structure"`
}

type RoleDetail struct {
	ARN                      *string            `locationName:"Arn" type:"string"`
	AssumeRolePolicyDocument *string            `type:"string"`
	CreateDate               *time.Time         `type:"timestamp" timestampFormat:"iso8601"`
	InstanceProfileList      []*InstanceProfile `type:"list"`
	Path                     *string            `type:"string"`
	RoleID                   *string            `locationName:"RoleId" type:"string"`
	RoleName                 *string            `type:"string"`
	RolePolicyList           []*PolicyDetail    `type:"list"`

	metadataRoleDetail `json:"-", xml:"-"`
}

type metadataRoleDetail struct {
	SDKShapeTraits bool `type:"structure"`
}

type SAMLProviderListEntry struct {
	ARN        *string    `locationName:"Arn" type:"string"`
	CreateDate *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	ValidUntil *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataSAMLProviderListEntry `json:"-", xml:"-"`
}

type metadataSAMLProviderListEntry struct {
	SDKShapeTraits bool `type:"structure"`
}

type ServerCertificate struct {
	CertificateBody           *string                    `type:"string" required:"true"`
	CertificateChain          *string                    `type:"string"`
	ServerCertificateMetadata *ServerCertificateMetadata `type:"structure" required:"true"`

	metadataServerCertificate `json:"-", xml:"-"`
}

type metadataServerCertificate struct {
	SDKShapeTraits bool `type:"structure"`
}

type ServerCertificateMetadata struct {
	ARN                   *string    `locationName:"Arn" type:"string" required:"true"`
	Expiration            *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Path                  *string    `type:"string" required:"true"`
	ServerCertificateID   *string    `locationName:"ServerCertificateId" type:"string" required:"true"`
	ServerCertificateName *string    `type:"string" required:"true"`
	UploadDate            *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataServerCertificateMetadata `json:"-", xml:"-"`
}

type metadataServerCertificateMetadata struct {
	SDKShapeTraits bool `type:"structure"`
}

type SetDefaultPolicyVersionInput struct {
	PolicyARN *string `locationName:"PolicyArn" type:"string" required:"true"`
	VersionID *string `locationName:"VersionId" type:"string" required:"true"`

	metadataSetDefaultPolicyVersionInput `json:"-", xml:"-"`
}

type metadataSetDefaultPolicyVersionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type SetDefaultPolicyVersionOutput struct {
	metadataSetDefaultPolicyVersionOutput `json:"-", xml:"-"`
}

type metadataSetDefaultPolicyVersionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type SigningCertificate struct {
	CertificateBody *string    `type:"string" required:"true"`
	CertificateID   *string    `locationName:"CertificateId" type:"string" required:"true"`
	Status          *string    `type:"string" required:"true"`
	UploadDate      *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	UserName        *string    `type:"string" required:"true"`

	metadataSigningCertificate `json:"-", xml:"-"`
}

type metadataSigningCertificate struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateAccessKeyInput struct {
	AccessKeyID *string `locationName:"AccessKeyId" type:"string" required:"true"`
	Status      *string `type:"string" required:"true"`
	UserName    *string `type:"string"`

	metadataUpdateAccessKeyInput `json:"-", xml:"-"`
}

type metadataUpdateAccessKeyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateAccessKeyOutput struct {
	metadataUpdateAccessKeyOutput `json:"-", xml:"-"`
}

type metadataUpdateAccessKeyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateAccountPasswordPolicyInput struct {
	AllowUsersToChangePassword *bool  `type:"boolean"`
	HardExpiry                 *bool  `type:"boolean"`
	MaxPasswordAge             *int64 `type:"integer"`
	MinimumPasswordLength      *int64 `type:"integer"`
	PasswordReusePrevention    *int64 `type:"integer"`
	RequireLowercaseCharacters *bool  `type:"boolean"`
	RequireNumbers             *bool  `type:"boolean"`
	RequireSymbols             *bool  `type:"boolean"`
	RequireUppercaseCharacters *bool  `type:"boolean"`

	metadataUpdateAccountPasswordPolicyInput `json:"-", xml:"-"`
}

type metadataUpdateAccountPasswordPolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateAccountPasswordPolicyOutput struct {
	metadataUpdateAccountPasswordPolicyOutput `json:"-", xml:"-"`
}

type metadataUpdateAccountPasswordPolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateAssumeRolePolicyInput struct {
	PolicyDocument *string `type:"string" required:"true"`
	RoleName       *string `type:"string" required:"true"`

	metadataUpdateAssumeRolePolicyInput `json:"-", xml:"-"`
}

type metadataUpdateAssumeRolePolicyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateAssumeRolePolicyOutput struct {
	metadataUpdateAssumeRolePolicyOutput `json:"-", xml:"-"`
}

type metadataUpdateAssumeRolePolicyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateGroupInput struct {
	GroupName    *string `type:"string" required:"true"`
	NewGroupName *string `type:"string"`
	NewPath      *string `type:"string"`

	metadataUpdateGroupInput `json:"-", xml:"-"`
}

type metadataUpdateGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateGroupOutput struct {
	metadataUpdateGroupOutput `json:"-", xml:"-"`
}

type metadataUpdateGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateLoginProfileInput struct {
	Password              *string `type:"string"`
	PasswordResetRequired *bool   `type:"boolean"`
	UserName              *string `type:"string" required:"true"`

	metadataUpdateLoginProfileInput `json:"-", xml:"-"`
}

type metadataUpdateLoginProfileInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateLoginProfileOutput struct {
	metadataUpdateLoginProfileOutput `json:"-", xml:"-"`
}

type metadataUpdateLoginProfileOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateOpenIDConnectProviderThumbprintInput struct {
	OpenIDConnectProviderARN *string   `locationName:"OpenIDConnectProviderArn" type:"string" required:"true"`
	ThumbprintList           []*string `type:"list" required:"true"`

	metadataUpdateOpenIDConnectProviderThumbprintInput `json:"-", xml:"-"`
}

type metadataUpdateOpenIDConnectProviderThumbprintInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateOpenIDConnectProviderThumbprintOutput struct {
	metadataUpdateOpenIDConnectProviderThumbprintOutput `json:"-", xml:"-"`
}

type metadataUpdateOpenIDConnectProviderThumbprintOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateSAMLProviderInput struct {
	SAMLMetadataDocument *string `type:"string" required:"true"`
	SAMLProviderARN      *string `locationName:"SAMLProviderArn" type:"string" required:"true"`

	metadataUpdateSAMLProviderInput `json:"-", xml:"-"`
}

type metadataUpdateSAMLProviderInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateSAMLProviderOutput struct {
	SAMLProviderARN *string `locationName:"SAMLProviderArn" type:"string"`

	metadataUpdateSAMLProviderOutput `json:"-", xml:"-"`
}

type metadataUpdateSAMLProviderOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateServerCertificateInput struct {
	NewPath                  *string `type:"string"`
	NewServerCertificateName *string `type:"string"`
	ServerCertificateName    *string `type:"string" required:"true"`

	metadataUpdateServerCertificateInput `json:"-", xml:"-"`
}

type metadataUpdateServerCertificateInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateServerCertificateOutput struct {
	metadataUpdateServerCertificateOutput `json:"-", xml:"-"`
}

type metadataUpdateServerCertificateOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateSigningCertificateInput struct {
	CertificateID *string `locationName:"CertificateId" type:"string" required:"true"`
	Status        *string `type:"string" required:"true"`
	UserName      *string `type:"string"`

	metadataUpdateSigningCertificateInput `json:"-", xml:"-"`
}

type metadataUpdateSigningCertificateInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateSigningCertificateOutput struct {
	metadataUpdateSigningCertificateOutput `json:"-", xml:"-"`
}

type metadataUpdateSigningCertificateOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateUserInput struct {
	NewPath     *string `type:"string"`
	NewUserName *string `type:"string"`
	UserName    *string `type:"string" required:"true"`

	metadataUpdateUserInput `json:"-", xml:"-"`
}

type metadataUpdateUserInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateUserOutput struct {
	metadataUpdateUserOutput `json:"-", xml:"-"`
}

type metadataUpdateUserOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UploadServerCertificateInput struct {
	CertificateBody       *string `type:"string" required:"true"`
	CertificateChain      *string `type:"string"`
	Path                  *string `type:"string"`
	PrivateKey            *string `type:"string" required:"true"`
	ServerCertificateName *string `type:"string" required:"true"`

	metadataUploadServerCertificateInput `json:"-", xml:"-"`
}

type metadataUploadServerCertificateInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UploadServerCertificateOutput struct {
	ServerCertificateMetadata *ServerCertificateMetadata `type:"structure"`

	metadataUploadServerCertificateOutput `json:"-", xml:"-"`
}

type metadataUploadServerCertificateOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UploadSigningCertificateInput struct {
	CertificateBody *string `type:"string" required:"true"`
	UserName        *string `type:"string"`

	metadataUploadSigningCertificateInput `json:"-", xml:"-"`
}

type metadataUploadSigningCertificateInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UploadSigningCertificateOutput struct {
	Certificate *SigningCertificate `type:"structure" required:"true"`

	metadataUploadSigningCertificateOutput `json:"-", xml:"-"`
}

type metadataUploadSigningCertificateOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type User struct {
	ARN              *string    `locationName:"Arn" type:"string" required:"true"`
	CreateDate       *time.Time `type:"timestamp" timestampFormat:"iso8601" required:"true"`
	PasswordLastUsed *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Path             *string    `type:"string" required:"true"`
	UserID           *string    `locationName:"UserId" type:"string" required:"true"`
	UserName         *string    `type:"string" required:"true"`

	metadataUser `json:"-", xml:"-"`
}

type metadataUser struct {
	SDKShapeTraits bool `type:"structure"`
}

type UserDetail struct {
	ARN            *string         `locationName:"Arn" type:"string"`
	CreateDate     *time.Time      `type:"timestamp" timestampFormat:"iso8601"`
	GroupList      []*string       `type:"list"`
	Path           *string         `type:"string"`
	UserID         *string         `locationName:"UserId" type:"string"`
	UserName       *string         `type:"string"`
	UserPolicyList []*PolicyDetail `type:"list"`

	metadataUserDetail `json:"-", xml:"-"`
}

type metadataUserDetail struct {
	SDKShapeTraits bool `type:"structure"`
}

type VirtualMFADevice struct {
	Base32StringSeed []byte     `type:"blob"`
	EnableDate       *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	QRCodePNG        []byte     `type:"blob"`
	SerialNumber     *string    `type:"string" required:"true"`
	User             *User      `type:"structure"`

	metadataVirtualMFADevice `json:"-", xml:"-"`
}

type metadataVirtualMFADevice struct {
	SDKShapeTraits bool `type:"structure"`
}