package redshift

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"time"

	"github.com/awslabs/aws-sdk-go/aws"
)

// AuthorizeClusterSecurityGroupIngressRequest generates a request for the AuthorizeClusterSecurityGroupIngress operation.
func (c *Redshift) AuthorizeClusterSecurityGroupIngressRequest(input *AuthorizeClusterSecurityGroupIngressInput) (req *aws.Request, output *AuthorizeClusterSecurityGroupIngressOutput) {
	if opAuthorizeClusterSecurityGroupIngress == nil {
		opAuthorizeClusterSecurityGroupIngress = &aws.Operation{
			Name:       "AuthorizeClusterSecurityGroupIngress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAuthorizeClusterSecurityGroupIngress, input, output)
	output = &AuthorizeClusterSecurityGroupIngressOutput{}
	req.Data = output
	return
}

func (c *Redshift) AuthorizeClusterSecurityGroupIngress(input *AuthorizeClusterSecurityGroupIngressInput) (output *AuthorizeClusterSecurityGroupIngressOutput, err error) {
	req, out := c.AuthorizeClusterSecurityGroupIngressRequest(input)
	output = out
	err = req.Send()
	return
}

var opAuthorizeClusterSecurityGroupIngress *aws.Operation

// AuthorizeSnapshotAccessRequest generates a request for the AuthorizeSnapshotAccess operation.
func (c *Redshift) AuthorizeSnapshotAccessRequest(input *AuthorizeSnapshotAccessInput) (req *aws.Request, output *AuthorizeSnapshotAccessOutput) {
	if opAuthorizeSnapshotAccess == nil {
		opAuthorizeSnapshotAccess = &aws.Operation{
			Name:       "AuthorizeSnapshotAccess",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAuthorizeSnapshotAccess, input, output)
	output = &AuthorizeSnapshotAccessOutput{}
	req.Data = output
	return
}

func (c *Redshift) AuthorizeSnapshotAccess(input *AuthorizeSnapshotAccessInput) (output *AuthorizeSnapshotAccessOutput, err error) {
	req, out := c.AuthorizeSnapshotAccessRequest(input)
	output = out
	err = req.Send()
	return
}

var opAuthorizeSnapshotAccess *aws.Operation

// CopyClusterSnapshotRequest generates a request for the CopyClusterSnapshot operation.
func (c *Redshift) CopyClusterSnapshotRequest(input *CopyClusterSnapshotInput) (req *aws.Request, output *CopyClusterSnapshotOutput) {
	if opCopyClusterSnapshot == nil {
		opCopyClusterSnapshot = &aws.Operation{
			Name:       "CopyClusterSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCopyClusterSnapshot, input, output)
	output = &CopyClusterSnapshotOutput{}
	req.Data = output
	return
}

func (c *Redshift) CopyClusterSnapshot(input *CopyClusterSnapshotInput) (output *CopyClusterSnapshotOutput, err error) {
	req, out := c.CopyClusterSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opCopyClusterSnapshot *aws.Operation

// CreateClusterRequest generates a request for the CreateCluster operation.
func (c *Redshift) CreateClusterRequest(input *CreateClusterInput) (req *aws.Request, output *CreateClusterOutput) {
	if opCreateCluster == nil {
		opCreateCluster = &aws.Operation{
			Name:       "CreateCluster",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateCluster, input, output)
	output = &CreateClusterOutput{}
	req.Data = output
	return
}

func (c *Redshift) CreateCluster(input *CreateClusterInput) (output *CreateClusterOutput, err error) {
	req, out := c.CreateClusterRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateCluster *aws.Operation

// CreateClusterParameterGroupRequest generates a request for the CreateClusterParameterGroup operation.
func (c *Redshift) CreateClusterParameterGroupRequest(input *CreateClusterParameterGroupInput) (req *aws.Request, output *CreateClusterParameterGroupOutput) {
	if opCreateClusterParameterGroup == nil {
		opCreateClusterParameterGroup = &aws.Operation{
			Name:       "CreateClusterParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateClusterParameterGroup, input, output)
	output = &CreateClusterParameterGroupOutput{}
	req.Data = output
	return
}

func (c *Redshift) CreateClusterParameterGroup(input *CreateClusterParameterGroupInput) (output *CreateClusterParameterGroupOutput, err error) {
	req, out := c.CreateClusterParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateClusterParameterGroup *aws.Operation

// CreateClusterSecurityGroupRequest generates a request for the CreateClusterSecurityGroup operation.
func (c *Redshift) CreateClusterSecurityGroupRequest(input *CreateClusterSecurityGroupInput) (req *aws.Request, output *CreateClusterSecurityGroupOutput) {
	if opCreateClusterSecurityGroup == nil {
		opCreateClusterSecurityGroup = &aws.Operation{
			Name:       "CreateClusterSecurityGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateClusterSecurityGroup, input, output)
	output = &CreateClusterSecurityGroupOutput{}
	req.Data = output
	return
}

func (c *Redshift) CreateClusterSecurityGroup(input *CreateClusterSecurityGroupInput) (output *CreateClusterSecurityGroupOutput, err error) {
	req, out := c.CreateClusterSecurityGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateClusterSecurityGroup *aws.Operation

// CreateClusterSnapshotRequest generates a request for the CreateClusterSnapshot operation.
func (c *Redshift) CreateClusterSnapshotRequest(input *CreateClusterSnapshotInput) (req *aws.Request, output *CreateClusterSnapshotOutput) {
	if opCreateClusterSnapshot == nil {
		opCreateClusterSnapshot = &aws.Operation{
			Name:       "CreateClusterSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateClusterSnapshot, input, output)
	output = &CreateClusterSnapshotOutput{}
	req.Data = output
	return
}

func (c *Redshift) CreateClusterSnapshot(input *CreateClusterSnapshotInput) (output *CreateClusterSnapshotOutput, err error) {
	req, out := c.CreateClusterSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateClusterSnapshot *aws.Operation

// CreateClusterSubnetGroupRequest generates a request for the CreateClusterSubnetGroup operation.
func (c *Redshift) CreateClusterSubnetGroupRequest(input *CreateClusterSubnetGroupInput) (req *aws.Request, output *CreateClusterSubnetGroupOutput) {
	if opCreateClusterSubnetGroup == nil {
		opCreateClusterSubnetGroup = &aws.Operation{
			Name:       "CreateClusterSubnetGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateClusterSubnetGroup, input, output)
	output = &CreateClusterSubnetGroupOutput{}
	req.Data = output
	return
}

func (c *Redshift) CreateClusterSubnetGroup(input *CreateClusterSubnetGroupInput) (output *CreateClusterSubnetGroupOutput, err error) {
	req, out := c.CreateClusterSubnetGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateClusterSubnetGroup *aws.Operation

// CreateEventSubscriptionRequest generates a request for the CreateEventSubscription operation.
func (c *Redshift) CreateEventSubscriptionRequest(input *CreateEventSubscriptionInput) (req *aws.Request, output *CreateEventSubscriptionOutput) {
	if opCreateEventSubscription == nil {
		opCreateEventSubscription = &aws.Operation{
			Name:       "CreateEventSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateEventSubscription, input, output)
	output = &CreateEventSubscriptionOutput{}
	req.Data = output
	return
}

func (c *Redshift) CreateEventSubscription(input *CreateEventSubscriptionInput) (output *CreateEventSubscriptionOutput, err error) {
	req, out := c.CreateEventSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateEventSubscription *aws.Operation

// CreateHSMClientCertificateRequest generates a request for the CreateHSMClientCertificate operation.
func (c *Redshift) CreateHSMClientCertificateRequest(input *CreateHSMClientCertificateInput) (req *aws.Request, output *CreateHSMClientCertificateOutput) {
	if opCreateHSMClientCertificate == nil {
		opCreateHSMClientCertificate = &aws.Operation{
			Name:       "CreateHsmClientCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateHSMClientCertificate, input, output)
	output = &CreateHSMClientCertificateOutput{}
	req.Data = output
	return
}

func (c *Redshift) CreateHSMClientCertificate(input *CreateHSMClientCertificateInput) (output *CreateHSMClientCertificateOutput, err error) {
	req, out := c.CreateHSMClientCertificateRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateHSMClientCertificate *aws.Operation

// CreateHSMConfigurationRequest generates a request for the CreateHSMConfiguration operation.
func (c *Redshift) CreateHSMConfigurationRequest(input *CreateHSMConfigurationInput) (req *aws.Request, output *CreateHSMConfigurationOutput) {
	if opCreateHSMConfiguration == nil {
		opCreateHSMConfiguration = &aws.Operation{
			Name:       "CreateHsmConfiguration",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateHSMConfiguration, input, output)
	output = &CreateHSMConfigurationOutput{}
	req.Data = output
	return
}

func (c *Redshift) CreateHSMConfiguration(input *CreateHSMConfigurationInput) (output *CreateHSMConfigurationOutput, err error) {
	req, out := c.CreateHSMConfigurationRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateHSMConfiguration *aws.Operation

// CreateTagsRequest generates a request for the CreateTags operation.
func (c *Redshift) CreateTagsRequest(input *CreateTagsInput) (req *aws.Request, output *CreateTagsOutput) {
	if opCreateTags == nil {
		opCreateTags = &aws.Operation{
			Name:       "CreateTags",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateTags, input, output)
	output = &CreateTagsOutput{}
	req.Data = output
	return
}

func (c *Redshift) CreateTags(input *CreateTagsInput) (output *CreateTagsOutput, err error) {
	req, out := c.CreateTagsRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateTags *aws.Operation

// DeleteClusterRequest generates a request for the DeleteCluster operation.
func (c *Redshift) DeleteClusterRequest(input *DeleteClusterInput) (req *aws.Request, output *DeleteClusterOutput) {
	if opDeleteCluster == nil {
		opDeleteCluster = &aws.Operation{
			Name:       "DeleteCluster",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteCluster, input, output)
	output = &DeleteClusterOutput{}
	req.Data = output
	return
}

func (c *Redshift) DeleteCluster(input *DeleteClusterInput) (output *DeleteClusterOutput, err error) {
	req, out := c.DeleteClusterRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteCluster *aws.Operation

// DeleteClusterParameterGroupRequest generates a request for the DeleteClusterParameterGroup operation.
func (c *Redshift) DeleteClusterParameterGroupRequest(input *DeleteClusterParameterGroupInput) (req *aws.Request, output *DeleteClusterParameterGroupOutput) {
	if opDeleteClusterParameterGroup == nil {
		opDeleteClusterParameterGroup = &aws.Operation{
			Name:       "DeleteClusterParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteClusterParameterGroup, input, output)
	output = &DeleteClusterParameterGroupOutput{}
	req.Data = output
	return
}

func (c *Redshift) DeleteClusterParameterGroup(input *DeleteClusterParameterGroupInput) (output *DeleteClusterParameterGroupOutput, err error) {
	req, out := c.DeleteClusterParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteClusterParameterGroup *aws.Operation

// DeleteClusterSecurityGroupRequest generates a request for the DeleteClusterSecurityGroup operation.
func (c *Redshift) DeleteClusterSecurityGroupRequest(input *DeleteClusterSecurityGroupInput) (req *aws.Request, output *DeleteClusterSecurityGroupOutput) {
	if opDeleteClusterSecurityGroup == nil {
		opDeleteClusterSecurityGroup = &aws.Operation{
			Name:       "DeleteClusterSecurityGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteClusterSecurityGroup, input, output)
	output = &DeleteClusterSecurityGroupOutput{}
	req.Data = output
	return
}

func (c *Redshift) DeleteClusterSecurityGroup(input *DeleteClusterSecurityGroupInput) (output *DeleteClusterSecurityGroupOutput, err error) {
	req, out := c.DeleteClusterSecurityGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteClusterSecurityGroup *aws.Operation

// DeleteClusterSnapshotRequest generates a request for the DeleteClusterSnapshot operation.
func (c *Redshift) DeleteClusterSnapshotRequest(input *DeleteClusterSnapshotInput) (req *aws.Request, output *DeleteClusterSnapshotOutput) {
	if opDeleteClusterSnapshot == nil {
		opDeleteClusterSnapshot = &aws.Operation{
			Name:       "DeleteClusterSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteClusterSnapshot, input, output)
	output = &DeleteClusterSnapshotOutput{}
	req.Data = output
	return
}

func (c *Redshift) DeleteClusterSnapshot(input *DeleteClusterSnapshotInput) (output *DeleteClusterSnapshotOutput, err error) {
	req, out := c.DeleteClusterSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteClusterSnapshot *aws.Operation

// DeleteClusterSubnetGroupRequest generates a request for the DeleteClusterSubnetGroup operation.
func (c *Redshift) DeleteClusterSubnetGroupRequest(input *DeleteClusterSubnetGroupInput) (req *aws.Request, output *DeleteClusterSubnetGroupOutput) {
	if opDeleteClusterSubnetGroup == nil {
		opDeleteClusterSubnetGroup = &aws.Operation{
			Name:       "DeleteClusterSubnetGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteClusterSubnetGroup, input, output)
	output = &DeleteClusterSubnetGroupOutput{}
	req.Data = output
	return
}

func (c *Redshift) DeleteClusterSubnetGroup(input *DeleteClusterSubnetGroupInput) (output *DeleteClusterSubnetGroupOutput, err error) {
	req, out := c.DeleteClusterSubnetGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteClusterSubnetGroup *aws.Operation

// DeleteEventSubscriptionRequest generates a request for the DeleteEventSubscription operation.
func (c *Redshift) DeleteEventSubscriptionRequest(input *DeleteEventSubscriptionInput) (req *aws.Request, output *DeleteEventSubscriptionOutput) {
	if opDeleteEventSubscription == nil {
		opDeleteEventSubscription = &aws.Operation{
			Name:       "DeleteEventSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteEventSubscription, input, output)
	output = &DeleteEventSubscriptionOutput{}
	req.Data = output
	return
}

func (c *Redshift) DeleteEventSubscription(input *DeleteEventSubscriptionInput) (output *DeleteEventSubscriptionOutput, err error) {
	req, out := c.DeleteEventSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteEventSubscription *aws.Operation

// DeleteHSMClientCertificateRequest generates a request for the DeleteHSMClientCertificate operation.
func (c *Redshift) DeleteHSMClientCertificateRequest(input *DeleteHSMClientCertificateInput) (req *aws.Request, output *DeleteHSMClientCertificateOutput) {
	if opDeleteHSMClientCertificate == nil {
		opDeleteHSMClientCertificate = &aws.Operation{
			Name:       "DeleteHsmClientCertificate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteHSMClientCertificate, input, output)
	output = &DeleteHSMClientCertificateOutput{}
	req.Data = output
	return
}

func (c *Redshift) DeleteHSMClientCertificate(input *DeleteHSMClientCertificateInput) (output *DeleteHSMClientCertificateOutput, err error) {
	req, out := c.DeleteHSMClientCertificateRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteHSMClientCertificate *aws.Operation

// DeleteHSMConfigurationRequest generates a request for the DeleteHSMConfiguration operation.
func (c *Redshift) DeleteHSMConfigurationRequest(input *DeleteHSMConfigurationInput) (req *aws.Request, output *DeleteHSMConfigurationOutput) {
	if opDeleteHSMConfiguration == nil {
		opDeleteHSMConfiguration = &aws.Operation{
			Name:       "DeleteHsmConfiguration",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteHSMConfiguration, input, output)
	output = &DeleteHSMConfigurationOutput{}
	req.Data = output
	return
}

func (c *Redshift) DeleteHSMConfiguration(input *DeleteHSMConfigurationInput) (output *DeleteHSMConfigurationOutput, err error) {
	req, out := c.DeleteHSMConfigurationRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteHSMConfiguration *aws.Operation

// DeleteTagsRequest generates a request for the DeleteTags operation.
func (c *Redshift) DeleteTagsRequest(input *DeleteTagsInput) (req *aws.Request, output *DeleteTagsOutput) {
	if opDeleteTags == nil {
		opDeleteTags = &aws.Operation{
			Name:       "DeleteTags",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteTags, input, output)
	output = &DeleteTagsOutput{}
	req.Data = output
	return
}

func (c *Redshift) DeleteTags(input *DeleteTagsInput) (output *DeleteTagsOutput, err error) {
	req, out := c.DeleteTagsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteTags *aws.Operation

// DescribeClusterParameterGroupsRequest generates a request for the DescribeClusterParameterGroups operation.
func (c *Redshift) DescribeClusterParameterGroupsRequest(input *DescribeClusterParameterGroupsInput) (req *aws.Request, output *DescribeClusterParameterGroupsOutput) {
	if opDescribeClusterParameterGroups == nil {
		opDescribeClusterParameterGroups = &aws.Operation{
			Name:       "DescribeClusterParameterGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeClusterParameterGroups, input, output)
	output = &DescribeClusterParameterGroupsOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeClusterParameterGroups(input *DescribeClusterParameterGroupsInput) (output *DescribeClusterParameterGroupsOutput, err error) {
	req, out := c.DescribeClusterParameterGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeClusterParameterGroups *aws.Operation

// DescribeClusterParametersRequest generates a request for the DescribeClusterParameters operation.
func (c *Redshift) DescribeClusterParametersRequest(input *DescribeClusterParametersInput) (req *aws.Request, output *DescribeClusterParametersOutput) {
	if opDescribeClusterParameters == nil {
		opDescribeClusterParameters = &aws.Operation{
			Name:       "DescribeClusterParameters",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeClusterParameters, input, output)
	output = &DescribeClusterParametersOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeClusterParameters(input *DescribeClusterParametersInput) (output *DescribeClusterParametersOutput, err error) {
	req, out := c.DescribeClusterParametersRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeClusterParameters *aws.Operation

// DescribeClusterSecurityGroupsRequest generates a request for the DescribeClusterSecurityGroups operation.
func (c *Redshift) DescribeClusterSecurityGroupsRequest(input *DescribeClusterSecurityGroupsInput) (req *aws.Request, output *DescribeClusterSecurityGroupsOutput) {
	if opDescribeClusterSecurityGroups == nil {
		opDescribeClusterSecurityGroups = &aws.Operation{
			Name:       "DescribeClusterSecurityGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeClusterSecurityGroups, input, output)
	output = &DescribeClusterSecurityGroupsOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeClusterSecurityGroups(input *DescribeClusterSecurityGroupsInput) (output *DescribeClusterSecurityGroupsOutput, err error) {
	req, out := c.DescribeClusterSecurityGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeClusterSecurityGroups *aws.Operation

// DescribeClusterSnapshotsRequest generates a request for the DescribeClusterSnapshots operation.
func (c *Redshift) DescribeClusterSnapshotsRequest(input *DescribeClusterSnapshotsInput) (req *aws.Request, output *DescribeClusterSnapshotsOutput) {
	if opDescribeClusterSnapshots == nil {
		opDescribeClusterSnapshots = &aws.Operation{
			Name:       "DescribeClusterSnapshots",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeClusterSnapshots, input, output)
	output = &DescribeClusterSnapshotsOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeClusterSnapshots(input *DescribeClusterSnapshotsInput) (output *DescribeClusterSnapshotsOutput, err error) {
	req, out := c.DescribeClusterSnapshotsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeClusterSnapshots *aws.Operation

// DescribeClusterSubnetGroupsRequest generates a request for the DescribeClusterSubnetGroups operation.
func (c *Redshift) DescribeClusterSubnetGroupsRequest(input *DescribeClusterSubnetGroupsInput) (req *aws.Request, output *DescribeClusterSubnetGroupsOutput) {
	if opDescribeClusterSubnetGroups == nil {
		opDescribeClusterSubnetGroups = &aws.Operation{
			Name:       "DescribeClusterSubnetGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeClusterSubnetGroups, input, output)
	output = &DescribeClusterSubnetGroupsOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeClusterSubnetGroups(input *DescribeClusterSubnetGroupsInput) (output *DescribeClusterSubnetGroupsOutput, err error) {
	req, out := c.DescribeClusterSubnetGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeClusterSubnetGroups *aws.Operation

// DescribeClusterVersionsRequest generates a request for the DescribeClusterVersions operation.
func (c *Redshift) DescribeClusterVersionsRequest(input *DescribeClusterVersionsInput) (req *aws.Request, output *DescribeClusterVersionsOutput) {
	if opDescribeClusterVersions == nil {
		opDescribeClusterVersions = &aws.Operation{
			Name:       "DescribeClusterVersions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeClusterVersions, input, output)
	output = &DescribeClusterVersionsOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeClusterVersions(input *DescribeClusterVersionsInput) (output *DescribeClusterVersionsOutput, err error) {
	req, out := c.DescribeClusterVersionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeClusterVersions *aws.Operation

// DescribeClustersRequest generates a request for the DescribeClusters operation.
func (c *Redshift) DescribeClustersRequest(input *DescribeClustersInput) (req *aws.Request, output *DescribeClustersOutput) {
	if opDescribeClusters == nil {
		opDescribeClusters = &aws.Operation{
			Name:       "DescribeClusters",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeClusters, input, output)
	output = &DescribeClustersOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeClusters(input *DescribeClustersInput) (output *DescribeClustersOutput, err error) {
	req, out := c.DescribeClustersRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeClusters *aws.Operation

// DescribeDefaultClusterParametersRequest generates a request for the DescribeDefaultClusterParameters operation.
func (c *Redshift) DescribeDefaultClusterParametersRequest(input *DescribeDefaultClusterParametersInput) (req *aws.Request, output *DescribeDefaultClusterParametersOutput) {
	if opDescribeDefaultClusterParameters == nil {
		opDescribeDefaultClusterParameters = &aws.Operation{
			Name:       "DescribeDefaultClusterParameters",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDefaultClusterParameters, input, output)
	output = &DescribeDefaultClusterParametersOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeDefaultClusterParameters(input *DescribeDefaultClusterParametersInput) (output *DescribeDefaultClusterParametersOutput, err error) {
	req, out := c.DescribeDefaultClusterParametersRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeDefaultClusterParameters *aws.Operation

// DescribeEventCategoriesRequest generates a request for the DescribeEventCategories operation.
func (c *Redshift) DescribeEventCategoriesRequest(input *DescribeEventCategoriesInput) (req *aws.Request, output *DescribeEventCategoriesOutput) {
	if opDescribeEventCategories == nil {
		opDescribeEventCategories = &aws.Operation{
			Name:       "DescribeEventCategories",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEventCategories, input, output)
	output = &DescribeEventCategoriesOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeEventCategories(input *DescribeEventCategoriesInput) (output *DescribeEventCategoriesOutput, err error) {
	req, out := c.DescribeEventCategoriesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeEventCategories *aws.Operation

// DescribeEventSubscriptionsRequest generates a request for the DescribeEventSubscriptions operation.
func (c *Redshift) DescribeEventSubscriptionsRequest(input *DescribeEventSubscriptionsInput) (req *aws.Request, output *DescribeEventSubscriptionsOutput) {
	if opDescribeEventSubscriptions == nil {
		opDescribeEventSubscriptions = &aws.Operation{
			Name:       "DescribeEventSubscriptions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEventSubscriptions, input, output)
	output = &DescribeEventSubscriptionsOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeEventSubscriptions(input *DescribeEventSubscriptionsInput) (output *DescribeEventSubscriptionsOutput, err error) {
	req, out := c.DescribeEventSubscriptionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeEventSubscriptions *aws.Operation

// DescribeEventsRequest generates a request for the DescribeEvents operation.
func (c *Redshift) DescribeEventsRequest(input *DescribeEventsInput) (req *aws.Request, output *DescribeEventsOutput) {
	if opDescribeEvents == nil {
		opDescribeEvents = &aws.Operation{
			Name:       "DescribeEvents",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEvents, input, output)
	output = &DescribeEventsOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeEvents(input *DescribeEventsInput) (output *DescribeEventsOutput, err error) {
	req, out := c.DescribeEventsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeEvents *aws.Operation

// DescribeHSMClientCertificatesRequest generates a request for the DescribeHSMClientCertificates operation.
func (c *Redshift) DescribeHSMClientCertificatesRequest(input *DescribeHSMClientCertificatesInput) (req *aws.Request, output *DescribeHSMClientCertificatesOutput) {
	if opDescribeHSMClientCertificates == nil {
		opDescribeHSMClientCertificates = &aws.Operation{
			Name:       "DescribeHsmClientCertificates",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeHSMClientCertificates, input, output)
	output = &DescribeHSMClientCertificatesOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeHSMClientCertificates(input *DescribeHSMClientCertificatesInput) (output *DescribeHSMClientCertificatesOutput, err error) {
	req, out := c.DescribeHSMClientCertificatesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeHSMClientCertificates *aws.Operation

// DescribeHSMConfigurationsRequest generates a request for the DescribeHSMConfigurations operation.
func (c *Redshift) DescribeHSMConfigurationsRequest(input *DescribeHSMConfigurationsInput) (req *aws.Request, output *DescribeHSMConfigurationsOutput) {
	if opDescribeHSMConfigurations == nil {
		opDescribeHSMConfigurations = &aws.Operation{
			Name:       "DescribeHsmConfigurations",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeHSMConfigurations, input, output)
	output = &DescribeHSMConfigurationsOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeHSMConfigurations(input *DescribeHSMConfigurationsInput) (output *DescribeHSMConfigurationsOutput, err error) {
	req, out := c.DescribeHSMConfigurationsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeHSMConfigurations *aws.Operation

// DescribeLoggingStatusRequest generates a request for the DescribeLoggingStatus operation.
func (c *Redshift) DescribeLoggingStatusRequest(input *DescribeLoggingStatusInput) (req *aws.Request, output *LoggingStatus) {
	if opDescribeLoggingStatus == nil {
		opDescribeLoggingStatus = &aws.Operation{
			Name:       "DescribeLoggingStatus",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeLoggingStatus, input, output)
	output = &LoggingStatus{}
	req.Data = output
	return
}

func (c *Redshift) DescribeLoggingStatus(input *DescribeLoggingStatusInput) (output *LoggingStatus, err error) {
	req, out := c.DescribeLoggingStatusRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeLoggingStatus *aws.Operation

// DescribeOrderableClusterOptionsRequest generates a request for the DescribeOrderableClusterOptions operation.
func (c *Redshift) DescribeOrderableClusterOptionsRequest(input *DescribeOrderableClusterOptionsInput) (req *aws.Request, output *DescribeOrderableClusterOptionsOutput) {
	if opDescribeOrderableClusterOptions == nil {
		opDescribeOrderableClusterOptions = &aws.Operation{
			Name:       "DescribeOrderableClusterOptions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeOrderableClusterOptions, input, output)
	output = &DescribeOrderableClusterOptionsOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeOrderableClusterOptions(input *DescribeOrderableClusterOptionsInput) (output *DescribeOrderableClusterOptionsOutput, err error) {
	req, out := c.DescribeOrderableClusterOptionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeOrderableClusterOptions *aws.Operation

// DescribeReservedNodeOfferingsRequest generates a request for the DescribeReservedNodeOfferings operation.
func (c *Redshift) DescribeReservedNodeOfferingsRequest(input *DescribeReservedNodeOfferingsInput) (req *aws.Request, output *DescribeReservedNodeOfferingsOutput) {
	if opDescribeReservedNodeOfferings == nil {
		opDescribeReservedNodeOfferings = &aws.Operation{
			Name:       "DescribeReservedNodeOfferings",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeReservedNodeOfferings, input, output)
	output = &DescribeReservedNodeOfferingsOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeReservedNodeOfferings(input *DescribeReservedNodeOfferingsInput) (output *DescribeReservedNodeOfferingsOutput, err error) {
	req, out := c.DescribeReservedNodeOfferingsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeReservedNodeOfferings *aws.Operation

// DescribeReservedNodesRequest generates a request for the DescribeReservedNodes operation.
func (c *Redshift) DescribeReservedNodesRequest(input *DescribeReservedNodesInput) (req *aws.Request, output *DescribeReservedNodesOutput) {
	if opDescribeReservedNodes == nil {
		opDescribeReservedNodes = &aws.Operation{
			Name:       "DescribeReservedNodes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeReservedNodes, input, output)
	output = &DescribeReservedNodesOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeReservedNodes(input *DescribeReservedNodesInput) (output *DescribeReservedNodesOutput, err error) {
	req, out := c.DescribeReservedNodesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeReservedNodes *aws.Operation

// DescribeResizeRequest generates a request for the DescribeResize operation.
func (c *Redshift) DescribeResizeRequest(input *DescribeResizeInput) (req *aws.Request, output *DescribeResizeOutput) {
	if opDescribeResize == nil {
		opDescribeResize = &aws.Operation{
			Name:       "DescribeResize",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeResize, input, output)
	output = &DescribeResizeOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeResize(input *DescribeResizeInput) (output *DescribeResizeOutput, err error) {
	req, out := c.DescribeResizeRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeResize *aws.Operation

// DescribeTagsRequest generates a request for the DescribeTags operation.
func (c *Redshift) DescribeTagsRequest(input *DescribeTagsInput) (req *aws.Request, output *DescribeTagsOutput) {
	if opDescribeTags == nil {
		opDescribeTags = &aws.Operation{
			Name:       "DescribeTags",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeTags, input, output)
	output = &DescribeTagsOutput{}
	req.Data = output
	return
}

func (c *Redshift) DescribeTags(input *DescribeTagsInput) (output *DescribeTagsOutput, err error) {
	req, out := c.DescribeTagsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeTags *aws.Operation

// DisableLoggingRequest generates a request for the DisableLogging operation.
func (c *Redshift) DisableLoggingRequest(input *DisableLoggingInput) (req *aws.Request, output *LoggingStatus) {
	if opDisableLogging == nil {
		opDisableLogging = &aws.Operation{
			Name:       "DisableLogging",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDisableLogging, input, output)
	output = &LoggingStatus{}
	req.Data = output
	return
}

func (c *Redshift) DisableLogging(input *DisableLoggingInput) (output *LoggingStatus, err error) {
	req, out := c.DisableLoggingRequest(input)
	output = out
	err = req.Send()
	return
}

var opDisableLogging *aws.Operation

// DisableSnapshotCopyRequest generates a request for the DisableSnapshotCopy operation.
func (c *Redshift) DisableSnapshotCopyRequest(input *DisableSnapshotCopyInput) (req *aws.Request, output *DisableSnapshotCopyOutput) {
	if opDisableSnapshotCopy == nil {
		opDisableSnapshotCopy = &aws.Operation{
			Name:       "DisableSnapshotCopy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDisableSnapshotCopy, input, output)
	output = &DisableSnapshotCopyOutput{}
	req.Data = output
	return
}

func (c *Redshift) DisableSnapshotCopy(input *DisableSnapshotCopyInput) (output *DisableSnapshotCopyOutput, err error) {
	req, out := c.DisableSnapshotCopyRequest(input)
	output = out
	err = req.Send()
	return
}

var opDisableSnapshotCopy *aws.Operation

// EnableLoggingRequest generates a request for the EnableLogging operation.
func (c *Redshift) EnableLoggingRequest(input *EnableLoggingInput) (req *aws.Request, output *LoggingStatus) {
	if opEnableLogging == nil {
		opEnableLogging = &aws.Operation{
			Name:       "EnableLogging",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opEnableLogging, input, output)
	output = &LoggingStatus{}
	req.Data = output
	return
}

func (c *Redshift) EnableLogging(input *EnableLoggingInput) (output *LoggingStatus, err error) {
	req, out := c.EnableLoggingRequest(input)
	output = out
	err = req.Send()
	return
}

var opEnableLogging *aws.Operation

// EnableSnapshotCopyRequest generates a request for the EnableSnapshotCopy operation.
func (c *Redshift) EnableSnapshotCopyRequest(input *EnableSnapshotCopyInput) (req *aws.Request, output *EnableSnapshotCopyOutput) {
	if opEnableSnapshotCopy == nil {
		opEnableSnapshotCopy = &aws.Operation{
			Name:       "EnableSnapshotCopy",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opEnableSnapshotCopy, input, output)
	output = &EnableSnapshotCopyOutput{}
	req.Data = output
	return
}

func (c *Redshift) EnableSnapshotCopy(input *EnableSnapshotCopyInput) (output *EnableSnapshotCopyOutput, err error) {
	req, out := c.EnableSnapshotCopyRequest(input)
	output = out
	err = req.Send()
	return
}

var opEnableSnapshotCopy *aws.Operation

// ModifyClusterRequest generates a request for the ModifyCluster operation.
func (c *Redshift) ModifyClusterRequest(input *ModifyClusterInput) (req *aws.Request, output *ModifyClusterOutput) {
	if opModifyCluster == nil {
		opModifyCluster = &aws.Operation{
			Name:       "ModifyCluster",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyCluster, input, output)
	output = &ModifyClusterOutput{}
	req.Data = output
	return
}

func (c *Redshift) ModifyCluster(input *ModifyClusterInput) (output *ModifyClusterOutput, err error) {
	req, out := c.ModifyClusterRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyCluster *aws.Operation

// ModifyClusterParameterGroupRequest generates a request for the ModifyClusterParameterGroup operation.
func (c *Redshift) ModifyClusterParameterGroupRequest(input *ModifyClusterParameterGroupInput) (req *aws.Request, output *ClusterParameterGroupNameMessage) {
	if opModifyClusterParameterGroup == nil {
		opModifyClusterParameterGroup = &aws.Operation{
			Name:       "ModifyClusterParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyClusterParameterGroup, input, output)
	output = &ClusterParameterGroupNameMessage{}
	req.Data = output
	return
}

func (c *Redshift) ModifyClusterParameterGroup(input *ModifyClusterParameterGroupInput) (output *ClusterParameterGroupNameMessage, err error) {
	req, out := c.ModifyClusterParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyClusterParameterGroup *aws.Operation

// ModifyClusterSubnetGroupRequest generates a request for the ModifyClusterSubnetGroup operation.
func (c *Redshift) ModifyClusterSubnetGroupRequest(input *ModifyClusterSubnetGroupInput) (req *aws.Request, output *ModifyClusterSubnetGroupOutput) {
	if opModifyClusterSubnetGroup == nil {
		opModifyClusterSubnetGroup = &aws.Operation{
			Name:       "ModifyClusterSubnetGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyClusterSubnetGroup, input, output)
	output = &ModifyClusterSubnetGroupOutput{}
	req.Data = output
	return
}

func (c *Redshift) ModifyClusterSubnetGroup(input *ModifyClusterSubnetGroupInput) (output *ModifyClusterSubnetGroupOutput, err error) {
	req, out := c.ModifyClusterSubnetGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyClusterSubnetGroup *aws.Operation

// ModifyEventSubscriptionRequest generates a request for the ModifyEventSubscription operation.
func (c *Redshift) ModifyEventSubscriptionRequest(input *ModifyEventSubscriptionInput) (req *aws.Request, output *ModifyEventSubscriptionOutput) {
	if opModifyEventSubscription == nil {
		opModifyEventSubscription = &aws.Operation{
			Name:       "ModifyEventSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyEventSubscription, input, output)
	output = &ModifyEventSubscriptionOutput{}
	req.Data = output
	return
}

func (c *Redshift) ModifyEventSubscription(input *ModifyEventSubscriptionInput) (output *ModifyEventSubscriptionOutput, err error) {
	req, out := c.ModifyEventSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyEventSubscription *aws.Operation

// ModifySnapshotCopyRetentionPeriodRequest generates a request for the ModifySnapshotCopyRetentionPeriod operation.
func (c *Redshift) ModifySnapshotCopyRetentionPeriodRequest(input *ModifySnapshotCopyRetentionPeriodInput) (req *aws.Request, output *ModifySnapshotCopyRetentionPeriodOutput) {
	if opModifySnapshotCopyRetentionPeriod == nil {
		opModifySnapshotCopyRetentionPeriod = &aws.Operation{
			Name:       "ModifySnapshotCopyRetentionPeriod",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifySnapshotCopyRetentionPeriod, input, output)
	output = &ModifySnapshotCopyRetentionPeriodOutput{}
	req.Data = output
	return
}

func (c *Redshift) ModifySnapshotCopyRetentionPeriod(input *ModifySnapshotCopyRetentionPeriodInput) (output *ModifySnapshotCopyRetentionPeriodOutput, err error) {
	req, out := c.ModifySnapshotCopyRetentionPeriodRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifySnapshotCopyRetentionPeriod *aws.Operation

// PurchaseReservedNodeOfferingRequest generates a request for the PurchaseReservedNodeOffering operation.
func (c *Redshift) PurchaseReservedNodeOfferingRequest(input *PurchaseReservedNodeOfferingInput) (req *aws.Request, output *PurchaseReservedNodeOfferingOutput) {
	if opPurchaseReservedNodeOffering == nil {
		opPurchaseReservedNodeOffering = &aws.Operation{
			Name:       "PurchaseReservedNodeOffering",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPurchaseReservedNodeOffering, input, output)
	output = &PurchaseReservedNodeOfferingOutput{}
	req.Data = output
	return
}

func (c *Redshift) PurchaseReservedNodeOffering(input *PurchaseReservedNodeOfferingInput) (output *PurchaseReservedNodeOfferingOutput, err error) {
	req, out := c.PurchaseReservedNodeOfferingRequest(input)
	output = out
	err = req.Send()
	return
}

var opPurchaseReservedNodeOffering *aws.Operation

// RebootClusterRequest generates a request for the RebootCluster operation.
func (c *Redshift) RebootClusterRequest(input *RebootClusterInput) (req *aws.Request, output *RebootClusterOutput) {
	if opRebootCluster == nil {
		opRebootCluster = &aws.Operation{
			Name:       "RebootCluster",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRebootCluster, input, output)
	output = &RebootClusterOutput{}
	req.Data = output
	return
}

func (c *Redshift) RebootCluster(input *RebootClusterInput) (output *RebootClusterOutput, err error) {
	req, out := c.RebootClusterRequest(input)
	output = out
	err = req.Send()
	return
}

var opRebootCluster *aws.Operation

// ResetClusterParameterGroupRequest generates a request for the ResetClusterParameterGroup operation.
func (c *Redshift) ResetClusterParameterGroupRequest(input *ResetClusterParameterGroupInput) (req *aws.Request, output *ClusterParameterGroupNameMessage) {
	if opResetClusterParameterGroup == nil {
		opResetClusterParameterGroup = &aws.Operation{
			Name:       "ResetClusterParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opResetClusterParameterGroup, input, output)
	output = &ClusterParameterGroupNameMessage{}
	req.Data = output
	return
}

func (c *Redshift) ResetClusterParameterGroup(input *ResetClusterParameterGroupInput) (output *ClusterParameterGroupNameMessage, err error) {
	req, out := c.ResetClusterParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opResetClusterParameterGroup *aws.Operation

// RestoreFromClusterSnapshotRequest generates a request for the RestoreFromClusterSnapshot operation.
func (c *Redshift) RestoreFromClusterSnapshotRequest(input *RestoreFromClusterSnapshotInput) (req *aws.Request, output *RestoreFromClusterSnapshotOutput) {
	if opRestoreFromClusterSnapshot == nil {
		opRestoreFromClusterSnapshot = &aws.Operation{
			Name:       "RestoreFromClusterSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRestoreFromClusterSnapshot, input, output)
	output = &RestoreFromClusterSnapshotOutput{}
	req.Data = output
	return
}

func (c *Redshift) RestoreFromClusterSnapshot(input *RestoreFromClusterSnapshotInput) (output *RestoreFromClusterSnapshotOutput, err error) {
	req, out := c.RestoreFromClusterSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opRestoreFromClusterSnapshot *aws.Operation

// RevokeClusterSecurityGroupIngressRequest generates a request for the RevokeClusterSecurityGroupIngress operation.
func (c *Redshift) RevokeClusterSecurityGroupIngressRequest(input *RevokeClusterSecurityGroupIngressInput) (req *aws.Request, output *RevokeClusterSecurityGroupIngressOutput) {
	if opRevokeClusterSecurityGroupIngress == nil {
		opRevokeClusterSecurityGroupIngress = &aws.Operation{
			Name:       "RevokeClusterSecurityGroupIngress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRevokeClusterSecurityGroupIngress, input, output)
	output = &RevokeClusterSecurityGroupIngressOutput{}
	req.Data = output
	return
}

func (c *Redshift) RevokeClusterSecurityGroupIngress(input *RevokeClusterSecurityGroupIngressInput) (output *RevokeClusterSecurityGroupIngressOutput, err error) {
	req, out := c.RevokeClusterSecurityGroupIngressRequest(input)
	output = out
	err = req.Send()
	return
}

var opRevokeClusterSecurityGroupIngress *aws.Operation

// RevokeSnapshotAccessRequest generates a request for the RevokeSnapshotAccess operation.
func (c *Redshift) RevokeSnapshotAccessRequest(input *RevokeSnapshotAccessInput) (req *aws.Request, output *RevokeSnapshotAccessOutput) {
	if opRevokeSnapshotAccess == nil {
		opRevokeSnapshotAccess = &aws.Operation{
			Name:       "RevokeSnapshotAccess",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRevokeSnapshotAccess, input, output)
	output = &RevokeSnapshotAccessOutput{}
	req.Data = output
	return
}

func (c *Redshift) RevokeSnapshotAccess(input *RevokeSnapshotAccessInput) (output *RevokeSnapshotAccessOutput, err error) {
	req, out := c.RevokeSnapshotAccessRequest(input)
	output = out
	err = req.Send()
	return
}

var opRevokeSnapshotAccess *aws.Operation

// RotateEncryptionKeyRequest generates a request for the RotateEncryptionKey operation.
func (c *Redshift) RotateEncryptionKeyRequest(input *RotateEncryptionKeyInput) (req *aws.Request, output *RotateEncryptionKeyOutput) {
	if opRotateEncryptionKey == nil {
		opRotateEncryptionKey = &aws.Operation{
			Name:       "RotateEncryptionKey",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRotateEncryptionKey, input, output)
	output = &RotateEncryptionKeyOutput{}
	req.Data = output
	return
}

func (c *Redshift) RotateEncryptionKey(input *RotateEncryptionKeyInput) (output *RotateEncryptionKeyOutput, err error) {
	req, out := c.RotateEncryptionKeyRequest(input)
	output = out
	err = req.Send()
	return
}

var opRotateEncryptionKey *aws.Operation

type AccountWithRestoreAccess struct {
	AccountID *string `locationName:"AccountId" type:"string"`

	metadataAccountWithRestoreAccess `json:"-", xml:"-"`
}

type metadataAccountWithRestoreAccess struct {
	SDKShapeTraits bool `type:"structure"`
}

type AuthorizeClusterSecurityGroupIngressInput struct {
	CIDRIP                   *string `type:"string"`
	ClusterSecurityGroupName *string `type:"string" required:"true"`
	EC2SecurityGroupName     *string `type:"string"`
	EC2SecurityGroupOwnerID  *string `locationName:"EC2SecurityGroupOwnerId" type:"string"`

	metadataAuthorizeClusterSecurityGroupIngressInput `json:"-", xml:"-"`
}

type metadataAuthorizeClusterSecurityGroupIngressInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AuthorizeClusterSecurityGroupIngressOutput struct {
	ClusterSecurityGroup *ClusterSecurityGroup `type:"structure"`

	metadataAuthorizeClusterSecurityGroupIngressOutput `json:"-", xml:"-"`
}

type metadataAuthorizeClusterSecurityGroupIngressOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AuthorizeSnapshotAccessInput struct {
	AccountWithRestoreAccess  *string `type:"string" required:"true"`
	SnapshotClusterIdentifier *string `type:"string"`
	SnapshotIdentifier        *string `type:"string" required:"true"`

	metadataAuthorizeSnapshotAccessInput `json:"-", xml:"-"`
}

type metadataAuthorizeSnapshotAccessInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AuthorizeSnapshotAccessOutput struct {
	Snapshot *Snapshot `type:"structure"`

	metadataAuthorizeSnapshotAccessOutput `json:"-", xml:"-"`
}

type metadataAuthorizeSnapshotAccessOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AvailabilityZone struct {
	Name *string `type:"string"`

	metadataAvailabilityZone `json:"-", xml:"-"`
}

type metadataAvailabilityZone struct {
	SDKShapeTraits bool `type:"structure"`
}

type Cluster struct {
	AllowVersionUpgrade              *bool                             `type:"boolean"`
	AutomatedSnapshotRetentionPeriod *int64                            `type:"integer"`
	AvailabilityZone                 *string                           `type:"string"`
	ClusterCreateTime                *time.Time                        `type:"timestamp" timestampFormat:"iso8601"`
	ClusterIdentifier                *string                           `type:"string"`
	ClusterNodes                     []*ClusterNode                    `type:"list"`
	ClusterParameterGroups           []*ClusterParameterGroupStatus    `locationNameList:"ClusterParameterGroup" type:"list"`
	ClusterPublicKey                 *string                           `type:"string"`
	ClusterRevisionNumber            *string                           `type:"string"`
	ClusterSecurityGroups            []*ClusterSecurityGroupMembership `locationNameList:"ClusterSecurityGroup" type:"list"`
	ClusterSnapshotCopyStatus        *ClusterSnapshotCopyStatus        `type:"structure"`
	ClusterStatus                    *string                           `type:"string"`
	ClusterSubnetGroupName           *string                           `type:"string"`
	ClusterVersion                   *string                           `type:"string"`
	DBName                           *string                           `type:"string"`
	ElasticIPStatus                  *ElasticIPStatus                  `locationName:"ElasticIpStatus" type:"structure"`
	Encrypted                        *bool                             `type:"boolean"`
	Endpoint                         *Endpoint                         `type:"structure"`
	HSMStatus                        *HSMStatus                        `locationName:"HsmStatus" type:"structure"`
	KMSKeyID                         *string                           `locationName:"KmsKeyId" type:"string"`
	MasterUsername                   *string                           `type:"string"`
	ModifyStatus                     *string                           `type:"string"`
	NodeType                         *string                           `type:"string"`
	NumberOfNodes                    *int64                            `type:"integer"`
	PendingModifiedValues            *PendingModifiedValues            `type:"structure"`
	PreferredMaintenanceWindow       *string                           `type:"string"`
	PubliclyAccessible               *bool                             `type:"boolean"`
	RestoreStatus                    *RestoreStatus                    `type:"structure"`
	Tags                             []*Tag                            `locationNameList:"Tag" type:"list"`
	VPCID                            *string                           `locationName:"VpcId" type:"string"`
	VPCSecurityGroups                []*VPCSecurityGroupMembership     `locationName:"VpcSecurityGroups" locationNameList:"VpcSecurityGroup" type:"list"`

	metadataCluster `json:"-", xml:"-"`
}

type metadataCluster struct {
	SDKShapeTraits bool `type:"structure"`
}

type ClusterNode struct {
	NodeRole         *string `type:"string"`
	PrivateIPAddress *string `type:"string"`
	PublicIPAddress  *string `type:"string"`

	metadataClusterNode `json:"-", xml:"-"`
}

type metadataClusterNode struct {
	SDKShapeTraits bool `type:"structure"`
}

type ClusterParameterGroup struct {
	Description          *string `type:"string"`
	ParameterGroupFamily *string `type:"string"`
	ParameterGroupName   *string `type:"string"`
	Tags                 []*Tag  `locationNameList:"Tag" type:"list"`

	metadataClusterParameterGroup `json:"-", xml:"-"`
}

type metadataClusterParameterGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type ClusterParameterGroupNameMessage struct {
	ParameterGroupName   *string `type:"string"`
	ParameterGroupStatus *string `type:"string"`

	metadataClusterParameterGroupNameMessage `json:"-", xml:"-"`
}

type metadataClusterParameterGroupNameMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type ClusterParameterGroupStatus struct {
	ParameterApplyStatus *string `type:"string"`
	ParameterGroupName   *string `type:"string"`

	metadataClusterParameterGroupStatus `json:"-", xml:"-"`
}

type metadataClusterParameterGroupStatus struct {
	SDKShapeTraits bool `type:"structure"`
}

type ClusterSecurityGroup struct {
	ClusterSecurityGroupName *string             `type:"string"`
	Description              *string             `type:"string"`
	EC2SecurityGroups        []*EC2SecurityGroup `locationNameList:"EC2SecurityGroup" type:"list"`
	IPRanges                 []*IPRange          `locationNameList:"IPRange" type:"list"`
	Tags                     []*Tag              `locationNameList:"Tag" type:"list"`

	metadataClusterSecurityGroup `json:"-", xml:"-"`
}

type metadataClusterSecurityGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type ClusterSecurityGroupMembership struct {
	ClusterSecurityGroupName *string `type:"string"`
	Status                   *string `type:"string"`

	metadataClusterSecurityGroupMembership `json:"-", xml:"-"`
}

type metadataClusterSecurityGroupMembership struct {
	SDKShapeTraits bool `type:"structure"`
}

type ClusterSnapshotCopyStatus struct {
	DestinationRegion *string `type:"string"`
	RetentionPeriod   *int64  `type:"long"`

	metadataClusterSnapshotCopyStatus `json:"-", xml:"-"`
}

type metadataClusterSnapshotCopyStatus struct {
	SDKShapeTraits bool `type:"structure"`
}

type ClusterSubnetGroup struct {
	ClusterSubnetGroupName *string   `type:"string"`
	Description            *string   `type:"string"`
	SubnetGroupStatus      *string   `type:"string"`
	Subnets                []*Subnet `locationNameList:"Subnet" type:"list"`
	Tags                   []*Tag    `locationNameList:"Tag" type:"list"`
	VPCID                  *string   `locationName:"VpcId" type:"string"`

	metadataClusterSubnetGroup `json:"-", xml:"-"`
}

type metadataClusterSubnetGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type ClusterVersion struct {
	ClusterParameterGroupFamily *string `type:"string"`
	ClusterVersion              *string `type:"string"`
	Description                 *string `type:"string"`

	metadataClusterVersion `json:"-", xml:"-"`
}

type metadataClusterVersion struct {
	SDKShapeTraits bool `type:"structure"`
}

type CopyClusterSnapshotInput struct {
	SourceSnapshotClusterIdentifier *string `type:"string"`
	SourceSnapshotIdentifier        *string `type:"string" required:"true"`
	TargetSnapshotIdentifier        *string `type:"string" required:"true"`

	metadataCopyClusterSnapshotInput `json:"-", xml:"-"`
}

type metadataCopyClusterSnapshotInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CopyClusterSnapshotOutput struct {
	Snapshot *Snapshot `type:"structure"`

	metadataCopyClusterSnapshotOutput `json:"-", xml:"-"`
}

type metadataCopyClusterSnapshotOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateClusterInput struct {
	AllowVersionUpgrade              *bool     `type:"boolean"`
	AutomatedSnapshotRetentionPeriod *int64    `type:"integer"`
	AvailabilityZone                 *string   `type:"string"`
	ClusterIdentifier                *string   `type:"string" required:"true"`
	ClusterParameterGroupName        *string   `type:"string"`
	ClusterSecurityGroups            []*string `locationNameList:"ClusterSecurityGroupName" type:"list"`
	ClusterSubnetGroupName           *string   `type:"string"`
	ClusterType                      *string   `type:"string"`
	ClusterVersion                   *string   `type:"string"`
	DBName                           *string   `type:"string"`
	ElasticIP                        *string   `locationName:"ElasticIp" type:"string"`
	Encrypted                        *bool     `type:"boolean"`
	HSMClientCertificateIdentifier   *string   `locationName:"HsmClientCertificateIdentifier" type:"string"`
	HSMConfigurationIdentifier       *string   `locationName:"HsmConfigurationIdentifier" type:"string"`
	KMSKeyID                         *string   `locationName:"KmsKeyId" type:"string"`
	MasterUserPassword               *string   `type:"string" required:"true"`
	MasterUsername                   *string   `type:"string" required:"true"`
	NodeType                         *string   `type:"string" required:"true"`
	NumberOfNodes                    *int64    `type:"integer"`
	Port                             *int64    `type:"integer"`
	PreferredMaintenanceWindow       *string   `type:"string"`
	PubliclyAccessible               *bool     `type:"boolean"`
	Tags                             []*Tag    `locationNameList:"Tag" type:"list"`
	VPCSecurityGroupIDs              []*string `locationName:"VpcSecurityGroupIds" locationNameList:"VpcSecurityGroupId" type:"list"`

	metadataCreateClusterInput `json:"-", xml:"-"`
}

type metadataCreateClusterInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateClusterOutput struct {
	Cluster *Cluster `type:"structure"`

	metadataCreateClusterOutput `json:"-", xml:"-"`
}

type metadataCreateClusterOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateClusterParameterGroupInput struct {
	Description          *string `type:"string" required:"true"`
	ParameterGroupFamily *string `type:"string" required:"true"`
	ParameterGroupName   *string `type:"string" required:"true"`
	Tags                 []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateClusterParameterGroupInput `json:"-", xml:"-"`
}

type metadataCreateClusterParameterGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateClusterParameterGroupOutput struct {
	ClusterParameterGroup *ClusterParameterGroup `type:"structure"`

	metadataCreateClusterParameterGroupOutput `json:"-", xml:"-"`
}

type metadataCreateClusterParameterGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateClusterSecurityGroupInput struct {
	ClusterSecurityGroupName *string `type:"string" required:"true"`
	Description              *string `type:"string" required:"true"`
	Tags                     []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateClusterSecurityGroupInput `json:"-", xml:"-"`
}

type metadataCreateClusterSecurityGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateClusterSecurityGroupOutput struct {
	ClusterSecurityGroup *ClusterSecurityGroup `type:"structure"`

	metadataCreateClusterSecurityGroupOutput `json:"-", xml:"-"`
}

type metadataCreateClusterSecurityGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateClusterSnapshotInput struct {
	ClusterIdentifier  *string `type:"string" required:"true"`
	SnapshotIdentifier *string `type:"string" required:"true"`
	Tags               []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateClusterSnapshotInput `json:"-", xml:"-"`
}

type metadataCreateClusterSnapshotInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateClusterSnapshotOutput struct {
	Snapshot *Snapshot `type:"structure"`

	metadataCreateClusterSnapshotOutput `json:"-", xml:"-"`
}

type metadataCreateClusterSnapshotOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateClusterSubnetGroupInput struct {
	ClusterSubnetGroupName *string   `type:"string" required:"true"`
	Description            *string   `type:"string" required:"true"`
	SubnetIDs              []*string `locationName:"SubnetIds" locationNameList:"SubnetIdentifier" type:"list" required:"true"`
	Tags                   []*Tag    `locationNameList:"Tag" type:"list"`

	metadataCreateClusterSubnetGroupInput `json:"-", xml:"-"`
}

type metadataCreateClusterSubnetGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateClusterSubnetGroupOutput struct {
	ClusterSubnetGroup *ClusterSubnetGroup `type:"structure"`

	metadataCreateClusterSubnetGroupOutput `json:"-", xml:"-"`
}

type metadataCreateClusterSubnetGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateEventSubscriptionInput struct {
	Enabled          *bool     `type:"boolean"`
	EventCategories  []*string `locationNameList:"EventCategory" type:"list"`
	SNSTopicARN      *string   `locationName:"SnsTopicArn" type:"string" required:"true"`
	Severity         *string   `type:"string"`
	SourceIDs        []*string `locationName:"SourceIds" locationNameList:"SourceId" type:"list"`
	SourceType       *string   `type:"string"`
	SubscriptionName *string   `type:"string" required:"true"`
	Tags             []*Tag    `locationNameList:"Tag" type:"list"`

	metadataCreateEventSubscriptionInput `json:"-", xml:"-"`
}

type metadataCreateEventSubscriptionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateEventSubscriptionOutput struct {
	EventSubscription *EventSubscription `type:"structure"`

	metadataCreateEventSubscriptionOutput `json:"-", xml:"-"`
}

type metadataCreateEventSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateHSMClientCertificateInput struct {
	HSMClientCertificateIdentifier *string `locationName:"HsmClientCertificateIdentifier" type:"string" required:"true"`
	Tags                           []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateHSMClientCertificateInput `json:"-", xml:"-"`
}

type metadataCreateHSMClientCertificateInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateHSMClientCertificateOutput struct {
	HSMClientCertificate *HSMClientCertificate `locationName:"HsmClientCertificate" type:"structure"`

	metadataCreateHSMClientCertificateOutput `json:"-", xml:"-"`
}

type metadataCreateHSMClientCertificateOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateHSMConfigurationInput struct {
	Description                *string `type:"string" required:"true"`
	HSMConfigurationIdentifier *string `locationName:"HsmConfigurationIdentifier" type:"string" required:"true"`
	HSMIPAddress               *string `locationName:"HsmIpAddress" type:"string" required:"true"`
	HSMPartitionName           *string `locationName:"HsmPartitionName" type:"string" required:"true"`
	HSMPartitionPassword       *string `locationName:"HsmPartitionPassword" type:"string" required:"true"`
	HSMServerPublicCertificate *string `locationName:"HsmServerPublicCertificate" type:"string" required:"true"`
	Tags                       []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateHSMConfigurationInput `json:"-", xml:"-"`
}

type metadataCreateHSMConfigurationInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateHSMConfigurationOutput struct {
	HSMConfiguration *HSMConfiguration `locationName:"HsmConfiguration" type:"structure"`

	metadataCreateHSMConfigurationOutput `json:"-", xml:"-"`
}

type metadataCreateHSMConfigurationOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateTagsInput struct {
	ResourceName *string `type:"string" required:"true"`
	Tags         []*Tag  `locationNameList:"Tag" type:"list" required:"true"`

	metadataCreateTagsInput `json:"-", xml:"-"`
}

type metadataCreateTagsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateTagsOutput struct {
	metadataCreateTagsOutput `json:"-", xml:"-"`
}

type metadataCreateTagsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DefaultClusterParameters struct {
	Marker               *string      `type:"string"`
	ParameterGroupFamily *string      `type:"string"`
	Parameters           []*Parameter `locationNameList:"Parameter" type:"list"`

	metadataDefaultClusterParameters `json:"-", xml:"-"`
}

type metadataDefaultClusterParameters struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteClusterInput struct {
	ClusterIdentifier              *string `type:"string" required:"true"`
	FinalClusterSnapshotIdentifier *string `type:"string"`
	SkipFinalClusterSnapshot       *bool   `type:"boolean"`

	metadataDeleteClusterInput `json:"-", xml:"-"`
}

type metadataDeleteClusterInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteClusterOutput struct {
	Cluster *Cluster `type:"structure"`

	metadataDeleteClusterOutput `json:"-", xml:"-"`
}

type metadataDeleteClusterOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteClusterParameterGroupInput struct {
	ParameterGroupName *string `type:"string" required:"true"`

	metadataDeleteClusterParameterGroupInput `json:"-", xml:"-"`
}

type metadataDeleteClusterParameterGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteClusterParameterGroupOutput struct {
	metadataDeleteClusterParameterGroupOutput `json:"-", xml:"-"`
}

type metadataDeleteClusterParameterGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteClusterSecurityGroupInput struct {
	ClusterSecurityGroupName *string `type:"string" required:"true"`

	metadataDeleteClusterSecurityGroupInput `json:"-", xml:"-"`
}

type metadataDeleteClusterSecurityGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteClusterSecurityGroupOutput struct {
	metadataDeleteClusterSecurityGroupOutput `json:"-", xml:"-"`
}

type metadataDeleteClusterSecurityGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteClusterSnapshotInput struct {
	SnapshotClusterIdentifier *string `type:"string"`
	SnapshotIdentifier        *string `type:"string" required:"true"`

	metadataDeleteClusterSnapshotInput `json:"-", xml:"-"`
}

type metadataDeleteClusterSnapshotInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteClusterSnapshotOutput struct {
	Snapshot *Snapshot `type:"structure"`

	metadataDeleteClusterSnapshotOutput `json:"-", xml:"-"`
}

type metadataDeleteClusterSnapshotOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteClusterSubnetGroupInput struct {
	ClusterSubnetGroupName *string `type:"string" required:"true"`

	metadataDeleteClusterSubnetGroupInput `json:"-", xml:"-"`
}

type metadataDeleteClusterSubnetGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteClusterSubnetGroupOutput struct {
	metadataDeleteClusterSubnetGroupOutput `json:"-", xml:"-"`
}

type metadataDeleteClusterSubnetGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteEventSubscriptionInput struct {
	SubscriptionName *string `type:"string" required:"true"`

	metadataDeleteEventSubscriptionInput `json:"-", xml:"-"`
}

type metadataDeleteEventSubscriptionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteEventSubscriptionOutput struct {
	metadataDeleteEventSubscriptionOutput `json:"-", xml:"-"`
}

type metadataDeleteEventSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteHSMClientCertificateInput struct {
	HSMClientCertificateIdentifier *string `locationName:"HsmClientCertificateIdentifier" type:"string" required:"true"`

	metadataDeleteHSMClientCertificateInput `json:"-", xml:"-"`
}

type metadataDeleteHSMClientCertificateInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteHSMClientCertificateOutput struct {
	metadataDeleteHSMClientCertificateOutput `json:"-", xml:"-"`
}

type metadataDeleteHSMClientCertificateOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteHSMConfigurationInput struct {
	HSMConfigurationIdentifier *string `locationName:"HsmConfigurationIdentifier" type:"string" required:"true"`

	metadataDeleteHSMConfigurationInput `json:"-", xml:"-"`
}

type metadataDeleteHSMConfigurationInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteHSMConfigurationOutput struct {
	metadataDeleteHSMConfigurationOutput `json:"-", xml:"-"`
}

type metadataDeleteHSMConfigurationOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteTagsInput struct {
	ResourceName *string   `type:"string" required:"true"`
	TagKeys      []*string `locationNameList:"TagKey" type:"list" required:"true"`

	metadataDeleteTagsInput `json:"-", xml:"-"`
}

type metadataDeleteTagsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteTagsOutput struct {
	metadataDeleteTagsOutput `json:"-", xml:"-"`
}

type metadataDeleteTagsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClusterParameterGroupsInput struct {
	Marker             *string   `type:"string"`
	MaxRecords         *int64    `type:"integer"`
	ParameterGroupName *string   `type:"string"`
	TagKeys            []*string `locationNameList:"TagKey" type:"list"`
	TagValues          []*string `locationNameList:"TagValue" type:"list"`

	metadataDescribeClusterParameterGroupsInput `json:"-", xml:"-"`
}

type metadataDescribeClusterParameterGroupsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClusterParameterGroupsOutput struct {
	Marker          *string                  `type:"string"`
	ParameterGroups []*ClusterParameterGroup `locationNameList:"ClusterParameterGroup" type:"list"`

	metadataDescribeClusterParameterGroupsOutput `json:"-", xml:"-"`
}

type metadataDescribeClusterParameterGroupsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClusterParametersInput struct {
	Marker             *string `type:"string"`
	MaxRecords         *int64  `type:"integer"`
	ParameterGroupName *string `type:"string" required:"true"`
	Source             *string `type:"string"`

	metadataDescribeClusterParametersInput `json:"-", xml:"-"`
}

type metadataDescribeClusterParametersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClusterParametersOutput struct {
	Marker     *string      `type:"string"`
	Parameters []*Parameter `locationNameList:"Parameter" type:"list"`

	metadataDescribeClusterParametersOutput `json:"-", xml:"-"`
}

type metadataDescribeClusterParametersOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClusterSecurityGroupsInput struct {
	ClusterSecurityGroupName *string   `type:"string"`
	Marker                   *string   `type:"string"`
	MaxRecords               *int64    `type:"integer"`
	TagKeys                  []*string `locationNameList:"TagKey" type:"list"`
	TagValues                []*string `locationNameList:"TagValue" type:"list"`

	metadataDescribeClusterSecurityGroupsInput `json:"-", xml:"-"`
}

type metadataDescribeClusterSecurityGroupsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClusterSecurityGroupsOutput struct {
	ClusterSecurityGroups []*ClusterSecurityGroup `locationNameList:"ClusterSecurityGroup" type:"list"`
	Marker                *string                 `type:"string"`

	metadataDescribeClusterSecurityGroupsOutput `json:"-", xml:"-"`
}

type metadataDescribeClusterSecurityGroupsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClusterSnapshotsInput struct {
	ClusterIdentifier  *string    `type:"string"`
	EndTime            *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Marker             *string    `type:"string"`
	MaxRecords         *int64     `type:"integer"`
	OwnerAccount       *string    `type:"string"`
	SnapshotIdentifier *string    `type:"string"`
	SnapshotType       *string    `type:"string"`
	StartTime          *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	TagKeys            []*string  `locationNameList:"TagKey" type:"list"`
	TagValues          []*string  `locationNameList:"TagValue" type:"list"`

	metadataDescribeClusterSnapshotsInput `json:"-", xml:"-"`
}

type metadataDescribeClusterSnapshotsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClusterSnapshotsOutput struct {
	Marker    *string     `type:"string"`
	Snapshots []*Snapshot `locationNameList:"Snapshot" type:"list"`

	metadataDescribeClusterSnapshotsOutput `json:"-", xml:"-"`
}

type metadataDescribeClusterSnapshotsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClusterSubnetGroupsInput struct {
	ClusterSubnetGroupName *string   `type:"string"`
	Marker                 *string   `type:"string"`
	MaxRecords             *int64    `type:"integer"`
	TagKeys                []*string `locationNameList:"TagKey" type:"list"`
	TagValues              []*string `locationNameList:"TagValue" type:"list"`

	metadataDescribeClusterSubnetGroupsInput `json:"-", xml:"-"`
}

type metadataDescribeClusterSubnetGroupsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClusterSubnetGroupsOutput struct {
	ClusterSubnetGroups []*ClusterSubnetGroup `locationNameList:"ClusterSubnetGroup" type:"list"`
	Marker              *string               `type:"string"`

	metadataDescribeClusterSubnetGroupsOutput `json:"-", xml:"-"`
}

type metadataDescribeClusterSubnetGroupsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClusterVersionsInput struct {
	ClusterParameterGroupFamily *string `type:"string"`
	ClusterVersion              *string `type:"string"`
	Marker                      *string `type:"string"`
	MaxRecords                  *int64  `type:"integer"`

	metadataDescribeClusterVersionsInput `json:"-", xml:"-"`
}

type metadataDescribeClusterVersionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClusterVersionsOutput struct {
	ClusterVersions []*ClusterVersion `locationNameList:"ClusterVersion" type:"list"`
	Marker          *string           `type:"string"`

	metadataDescribeClusterVersionsOutput `json:"-", xml:"-"`
}

type metadataDescribeClusterVersionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClustersInput struct {
	ClusterIdentifier *string   `type:"string"`
	Marker            *string   `type:"string"`
	MaxRecords        *int64    `type:"integer"`
	TagKeys           []*string `locationNameList:"TagKey" type:"list"`
	TagValues         []*string `locationNameList:"TagValue" type:"list"`

	metadataDescribeClustersInput `json:"-", xml:"-"`
}

type metadataDescribeClustersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClustersOutput struct {
	Clusters []*Cluster `locationNameList:"Cluster" type:"list"`
	Marker   *string    `type:"string"`

	metadataDescribeClustersOutput `json:"-", xml:"-"`
}

type metadataDescribeClustersOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDefaultClusterParametersInput struct {
	Marker               *string `type:"string"`
	MaxRecords           *int64  `type:"integer"`
	ParameterGroupFamily *string `type:"string" required:"true"`

	metadataDescribeDefaultClusterParametersInput `json:"-", xml:"-"`
}

type metadataDescribeDefaultClusterParametersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDefaultClusterParametersOutput struct {
	DefaultClusterParameters *DefaultClusterParameters `type:"structure"`

	metadataDescribeDefaultClusterParametersOutput `json:"-", xml:"-"`
}

type metadataDescribeDefaultClusterParametersOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventCategoriesInput struct {
	SourceType *string `type:"string"`

	metadataDescribeEventCategoriesInput `json:"-", xml:"-"`
}

type metadataDescribeEventCategoriesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventCategoriesOutput struct {
	EventCategoriesMapList []*EventCategoriesMap `locationNameList:"EventCategoriesMap" type:"list"`

	metadataDescribeEventCategoriesOutput `json:"-", xml:"-"`
}

type metadataDescribeEventCategoriesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventSubscriptionsInput struct {
	Marker           *string `type:"string"`
	MaxRecords       *int64  `type:"integer"`
	SubscriptionName *string `type:"string"`

	metadataDescribeEventSubscriptionsInput `json:"-", xml:"-"`
}

type metadataDescribeEventSubscriptionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventSubscriptionsOutput struct {
	EventSubscriptionsList []*EventSubscription `locationNameList:"EventSubscription" type:"list"`
	Marker                 *string              `type:"string"`

	metadataDescribeEventSubscriptionsOutput `json:"-", xml:"-"`
}

type metadataDescribeEventSubscriptionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventsInput struct {
	Duration         *int64     `type:"integer"`
	EndTime          *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Marker           *string    `type:"string"`
	MaxRecords       *int64     `type:"integer"`
	SourceIdentifier *string    `type:"string"`
	SourceType       *string    `type:"string"`
	StartTime        *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataDescribeEventsInput `json:"-", xml:"-"`
}

type metadataDescribeEventsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventsOutput struct {
	Events []*Event `locationNameList:"Event" type:"list"`
	Marker *string  `type:"string"`

	metadataDescribeEventsOutput `json:"-", xml:"-"`
}

type metadataDescribeEventsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeHSMClientCertificatesInput struct {
	HSMClientCertificateIdentifier *string   `locationName:"HsmClientCertificateIdentifier" type:"string"`
	Marker                         *string   `type:"string"`
	MaxRecords                     *int64    `type:"integer"`
	TagKeys                        []*string `locationNameList:"TagKey" type:"list"`
	TagValues                      []*string `locationNameList:"TagValue" type:"list"`

	metadataDescribeHSMClientCertificatesInput `json:"-", xml:"-"`
}

type metadataDescribeHSMClientCertificatesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeHSMClientCertificatesOutput struct {
	HSMClientCertificates []*HSMClientCertificate `locationName:"HsmClientCertificates" locationNameList:"HsmClientCertificate" type:"list"`
	Marker                *string                 `type:"string"`

	metadataDescribeHSMClientCertificatesOutput `json:"-", xml:"-"`
}

type metadataDescribeHSMClientCertificatesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeHSMConfigurationsInput struct {
	HSMConfigurationIdentifier *string   `locationName:"HsmConfigurationIdentifier" type:"string"`
	Marker                     *string   `type:"string"`
	MaxRecords                 *int64    `type:"integer"`
	TagKeys                    []*string `locationNameList:"TagKey" type:"list"`
	TagValues                  []*string `locationNameList:"TagValue" type:"list"`

	metadataDescribeHSMConfigurationsInput `json:"-", xml:"-"`
}

type metadataDescribeHSMConfigurationsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeHSMConfigurationsOutput struct {
	HSMConfigurations []*HSMConfiguration `locationName:"HsmConfigurations" locationNameList:"HsmConfiguration" type:"list"`
	Marker            *string             `type:"string"`

	metadataDescribeHSMConfigurationsOutput `json:"-", xml:"-"`
}

type metadataDescribeHSMConfigurationsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeLoggingStatusInput struct {
	ClusterIdentifier *string `type:"string" required:"true"`

	metadataDescribeLoggingStatusInput `json:"-", xml:"-"`
}

type metadataDescribeLoggingStatusInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeOrderableClusterOptionsInput struct {
	ClusterVersion *string `type:"string"`
	Marker         *string `type:"string"`
	MaxRecords     *int64  `type:"integer"`
	NodeType       *string `type:"string"`

	metadataDescribeOrderableClusterOptionsInput `json:"-", xml:"-"`
}

type metadataDescribeOrderableClusterOptionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeOrderableClusterOptionsOutput struct {
	Marker                  *string                   `type:"string"`
	OrderableClusterOptions []*OrderableClusterOption `locationNameList:"OrderableClusterOption" type:"list"`

	metadataDescribeOrderableClusterOptionsOutput `json:"-", xml:"-"`
}

type metadataDescribeOrderableClusterOptionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedNodeOfferingsInput struct {
	Marker                 *string `type:"string"`
	MaxRecords             *int64  `type:"integer"`
	ReservedNodeOfferingID *string `locationName:"ReservedNodeOfferingId" type:"string"`

	metadataDescribeReservedNodeOfferingsInput `json:"-", xml:"-"`
}

type metadataDescribeReservedNodeOfferingsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedNodeOfferingsOutput struct {
	Marker                *string                 `type:"string"`
	ReservedNodeOfferings []*ReservedNodeOffering `locationNameList:"ReservedNodeOffering" type:"list"`

	metadataDescribeReservedNodeOfferingsOutput `json:"-", xml:"-"`
}

type metadataDescribeReservedNodeOfferingsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedNodesInput struct {
	Marker         *string `type:"string"`
	MaxRecords     *int64  `type:"integer"`
	ReservedNodeID *string `locationName:"ReservedNodeId" type:"string"`

	metadataDescribeReservedNodesInput `json:"-", xml:"-"`
}

type metadataDescribeReservedNodesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedNodesOutput struct {
	Marker        *string         `type:"string"`
	ReservedNodes []*ReservedNode `locationNameList:"ReservedNode" type:"list"`

	metadataDescribeReservedNodesOutput `json:"-", xml:"-"`
}

type metadataDescribeReservedNodesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeResizeInput struct {
	ClusterIdentifier *string `type:"string" required:"true"`

	metadataDescribeResizeInput `json:"-", xml:"-"`
}

type metadataDescribeResizeInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeResizeOutput struct {
	AvgResizeRateInMegaBytesPerSecond  *float64  `type:"double"`
	ElapsedTimeInSeconds               *int64    `type:"long"`
	EstimatedTimeToCompletionInSeconds *int64    `type:"long"`
	ImportTablesCompleted              []*string `type:"list"`
	ImportTablesInProgress             []*string `type:"list"`
	ImportTablesNotStarted             []*string `type:"list"`
	ProgressInMegaBytes                *int64    `type:"long"`
	Status                             *string   `type:"string"`
	TargetClusterType                  *string   `type:"string"`
	TargetNodeType                     *string   `type:"string"`
	TargetNumberOfNodes                *int64    `type:"integer"`
	TotalResizeDataInMegaBytes         *int64    `type:"long"`

	metadataDescribeResizeOutput `json:"-", xml:"-"`
}

type metadataDescribeResizeOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTagsInput struct {
	Marker       *string   `type:"string"`
	MaxRecords   *int64    `type:"integer"`
	ResourceName *string   `type:"string"`
	ResourceType *string   `type:"string"`
	TagKeys      []*string `locationNameList:"TagKey" type:"list"`
	TagValues    []*string `locationNameList:"TagValue" type:"list"`

	metadataDescribeTagsInput `json:"-", xml:"-"`
}

type metadataDescribeTagsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTagsOutput struct {
	Marker          *string           `type:"string"`
	TaggedResources []*TaggedResource `locationNameList:"TaggedResource" type:"list"`

	metadataDescribeTagsOutput `json:"-", xml:"-"`
}

type metadataDescribeTagsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DisableLoggingInput struct {
	ClusterIdentifier *string `type:"string" required:"true"`

	metadataDisableLoggingInput `json:"-", xml:"-"`
}

type metadataDisableLoggingInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DisableSnapshotCopyInput struct {
	ClusterIdentifier *string `type:"string" required:"true"`

	metadataDisableSnapshotCopyInput `json:"-", xml:"-"`
}

type metadataDisableSnapshotCopyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DisableSnapshotCopyOutput struct {
	Cluster *Cluster `type:"structure"`

	metadataDisableSnapshotCopyOutput `json:"-", xml:"-"`
}

type metadataDisableSnapshotCopyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EC2SecurityGroup struct {
	EC2SecurityGroupName    *string `type:"string"`
	EC2SecurityGroupOwnerID *string `locationName:"EC2SecurityGroupOwnerId" type:"string"`
	Status                  *string `type:"string"`
	Tags                    []*Tag  `locationNameList:"Tag" type:"list"`

	metadataEC2SecurityGroup `json:"-", xml:"-"`
}

type metadataEC2SecurityGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type ElasticIPStatus struct {
	ElasticIP *string `locationName:"ElasticIp" type:"string"`
	Status    *string `type:"string"`

	metadataElasticIPStatus `json:"-", xml:"-"`
}

type metadataElasticIPStatus struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnableLoggingInput struct {
	BucketName        *string `type:"string" required:"true"`
	ClusterIdentifier *string `type:"string" required:"true"`
	S3KeyPrefix       *string `type:"string"`

	metadataEnableLoggingInput `json:"-", xml:"-"`
}

type metadataEnableLoggingInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnableSnapshotCopyInput struct {
	ClusterIdentifier *string `type:"string" required:"true"`
	DestinationRegion *string `type:"string" required:"true"`
	RetentionPeriod   *int64  `type:"integer"`

	metadataEnableSnapshotCopyInput `json:"-", xml:"-"`
}

type metadataEnableSnapshotCopyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnableSnapshotCopyOutput struct {
	Cluster *Cluster `type:"structure"`

	metadataEnableSnapshotCopyOutput `json:"-", xml:"-"`
}

type metadataEnableSnapshotCopyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Endpoint struct {
	Address *string `type:"string"`
	Port    *int64  `type:"integer"`

	metadataEndpoint `json:"-", xml:"-"`
}

type metadataEndpoint struct {
	SDKShapeTraits bool `type:"structure"`
}

type Event struct {
	Date             *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	EventCategories  []*string  `locationNameList:"EventCategory" type:"list"`
	EventID          *string    `locationName:"EventId" type:"string"`
	Message          *string    `type:"string"`
	Severity         *string    `type:"string"`
	SourceIdentifier *string    `type:"string"`
	SourceType       *string    `type:"string"`

	metadataEvent `json:"-", xml:"-"`
}

type metadataEvent struct {
	SDKShapeTraits bool `type:"structure"`
}

type EventCategoriesMap struct {
	Events     []*EventInfoMap `locationNameList:"EventInfoMap" type:"list"`
	SourceType *string         `type:"string"`

	metadataEventCategoriesMap `json:"-", xml:"-"`
}

type metadataEventCategoriesMap struct {
	SDKShapeTraits bool `type:"structure"`
}

type EventInfoMap struct {
	EventCategories  []*string `locationNameList:"EventCategory" type:"list"`
	EventDescription *string   `type:"string"`
	EventID          *string   `locationName:"EventId" type:"string"`
	Severity         *string   `type:"string"`

	metadataEventInfoMap `json:"-", xml:"-"`
}

type metadataEventInfoMap struct {
	SDKShapeTraits bool `type:"structure"`
}

type EventSubscription struct {
	CustSubscriptionID       *string    `locationName:"CustSubscriptionId" type:"string"`
	CustomerAWSID            *string    `locationName:"CustomerAwsId" type:"string"`
	Enabled                  *bool      `type:"boolean"`
	EventCategoriesList      []*string  `locationNameList:"EventCategory" type:"list"`
	SNSTopicARN              *string    `locationName:"SnsTopicArn" type:"string"`
	Severity                 *string    `type:"string"`
	SourceIDsList            []*string  `locationName:"SourceIdsList" locationNameList:"SourceId" type:"list"`
	SourceType               *string    `type:"string"`
	Status                   *string    `type:"string"`
	SubscriptionCreationTime *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Tags                     []*Tag     `locationNameList:"Tag" type:"list"`

	metadataEventSubscription `json:"-", xml:"-"`
}

type metadataEventSubscription struct {
	SDKShapeTraits bool `type:"structure"`
}

type HSMClientCertificate struct {
	HSMClientCertificateIdentifier *string `locationName:"HsmClientCertificateIdentifier" type:"string"`
	HSMClientCertificatePublicKey  *string `locationName:"HsmClientCertificatePublicKey" type:"string"`
	Tags                           []*Tag  `locationNameList:"Tag" type:"list"`

	metadataHSMClientCertificate `json:"-", xml:"-"`
}

type metadataHSMClientCertificate struct {
	SDKShapeTraits bool `type:"structure"`
}

type HSMConfiguration struct {
	Description                *string `type:"string"`
	HSMConfigurationIdentifier *string `locationName:"HsmConfigurationIdentifier" type:"string"`
	HSMIPAddress               *string `locationName:"HsmIpAddress" type:"string"`
	HSMPartitionName           *string `locationName:"HsmPartitionName" type:"string"`
	Tags                       []*Tag  `locationNameList:"Tag" type:"list"`

	metadataHSMConfiguration `json:"-", xml:"-"`
}

type metadataHSMConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type HSMStatus struct {
	HSMClientCertificateIdentifier *string `locationName:"HsmClientCertificateIdentifier" type:"string"`
	HSMConfigurationIdentifier     *string `locationName:"HsmConfigurationIdentifier" type:"string"`
	Status                         *string `type:"string"`

	metadataHSMStatus `json:"-", xml:"-"`
}

type metadataHSMStatus struct {
	SDKShapeTraits bool `type:"structure"`
}

type IPRange struct {
	CIDRIP *string `type:"string"`
	Status *string `type:"string"`
	Tags   []*Tag  `locationNameList:"Tag" type:"list"`

	metadataIPRange `json:"-", xml:"-"`
}

type metadataIPRange struct {
	SDKShapeTraits bool `type:"structure"`
}

type LoggingStatus struct {
	BucketName                 *string    `type:"string"`
	LastFailureMessage         *string    `type:"string"`
	LastFailureTime            *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	LastSuccessfulDeliveryTime *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	LoggingEnabled             *bool      `type:"boolean"`
	S3KeyPrefix                *string    `type:"string"`

	metadataLoggingStatus `json:"-", xml:"-"`
}

type metadataLoggingStatus struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyClusterInput struct {
	AllowVersionUpgrade              *bool     `type:"boolean"`
	AutomatedSnapshotRetentionPeriod *int64    `type:"integer"`
	ClusterIdentifier                *string   `type:"string" required:"true"`
	ClusterParameterGroupName        *string   `type:"string"`
	ClusterSecurityGroups            []*string `locationNameList:"ClusterSecurityGroupName" type:"list"`
	ClusterType                      *string   `type:"string"`
	ClusterVersion                   *string   `type:"string"`
	HSMClientCertificateIdentifier   *string   `locationName:"HsmClientCertificateIdentifier" type:"string"`
	HSMConfigurationIdentifier       *string   `locationName:"HsmConfigurationIdentifier" type:"string"`
	MasterUserPassword               *string   `type:"string"`
	NewClusterIdentifier             *string   `type:"string"`
	NodeType                         *string   `type:"string"`
	NumberOfNodes                    *int64    `type:"integer"`
	PreferredMaintenanceWindow       *string   `type:"string"`
	VPCSecurityGroupIDs              []*string `locationName:"VpcSecurityGroupIds" locationNameList:"VpcSecurityGroupId" type:"list"`

	metadataModifyClusterInput `json:"-", xml:"-"`
}

type metadataModifyClusterInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyClusterOutput struct {
	Cluster *Cluster `type:"structure"`

	metadataModifyClusterOutput `json:"-", xml:"-"`
}

type metadataModifyClusterOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyClusterParameterGroupInput struct {
	ParameterGroupName *string      `type:"string" required:"true"`
	Parameters         []*Parameter `locationNameList:"Parameter" type:"list" required:"true"`

	metadataModifyClusterParameterGroupInput `json:"-", xml:"-"`
}

type metadataModifyClusterParameterGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyClusterSubnetGroupInput struct {
	ClusterSubnetGroupName *string   `type:"string" required:"true"`
	Description            *string   `type:"string"`
	SubnetIDs              []*string `locationName:"SubnetIds" locationNameList:"SubnetIdentifier" type:"list" required:"true"`

	metadataModifyClusterSubnetGroupInput `json:"-", xml:"-"`
}

type metadataModifyClusterSubnetGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyClusterSubnetGroupOutput struct {
	ClusterSubnetGroup *ClusterSubnetGroup `type:"structure"`

	metadataModifyClusterSubnetGroupOutput `json:"-", xml:"-"`
}

type metadataModifyClusterSubnetGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyEventSubscriptionInput struct {
	Enabled          *bool     `type:"boolean"`
	EventCategories  []*string `locationNameList:"EventCategory" type:"list"`
	SNSTopicARN      *string   `locationName:"SnsTopicArn" type:"string"`
	Severity         *string   `type:"string"`
	SourceIDs        []*string `locationName:"SourceIds" locationNameList:"SourceId" type:"list"`
	SourceType       *string   `type:"string"`
	SubscriptionName *string   `type:"string" required:"true"`

	metadataModifyEventSubscriptionInput `json:"-", xml:"-"`
}

type metadataModifyEventSubscriptionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyEventSubscriptionOutput struct {
	EventSubscription *EventSubscription `type:"structure"`

	metadataModifyEventSubscriptionOutput `json:"-", xml:"-"`
}

type metadataModifyEventSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifySnapshotCopyRetentionPeriodInput struct {
	ClusterIdentifier *string `type:"string" required:"true"`
	RetentionPeriod   *int64  `type:"integer" required:"true"`

	metadataModifySnapshotCopyRetentionPeriodInput `json:"-", xml:"-"`
}

type metadataModifySnapshotCopyRetentionPeriodInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifySnapshotCopyRetentionPeriodOutput struct {
	Cluster *Cluster `type:"structure"`

	metadataModifySnapshotCopyRetentionPeriodOutput `json:"-", xml:"-"`
}

type metadataModifySnapshotCopyRetentionPeriodOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type OrderableClusterOption struct {
	AvailabilityZones []*AvailabilityZone `locationNameList:"AvailabilityZone" type:"list"`
	ClusterType       *string             `type:"string"`
	ClusterVersion    *string             `type:"string"`
	NodeType          *string             `type:"string"`

	metadataOrderableClusterOption `json:"-", xml:"-"`
}

type metadataOrderableClusterOption struct {
	SDKShapeTraits bool `type:"structure"`
}

type Parameter struct {
	AllowedValues        *string `type:"string"`
	DataType             *string `type:"string"`
	Description          *string `type:"string"`
	IsModifiable         *bool   `type:"boolean"`
	MinimumEngineVersion *string `type:"string"`
	ParameterName        *string `type:"string"`
	ParameterValue       *string `type:"string"`
	Source               *string `type:"string"`

	metadataParameter `json:"-", xml:"-"`
}

type metadataParameter struct {
	SDKShapeTraits bool `type:"structure"`
}

type PendingModifiedValues struct {
	AutomatedSnapshotRetentionPeriod *int64  `type:"integer"`
	ClusterIdentifier                *string `type:"string"`
	ClusterType                      *string `type:"string"`
	ClusterVersion                   *string `type:"string"`
	MasterUserPassword               *string `type:"string"`
	NodeType                         *string `type:"string"`
	NumberOfNodes                    *int64  `type:"integer"`

	metadataPendingModifiedValues `json:"-", xml:"-"`
}

type metadataPendingModifiedValues struct {
	SDKShapeTraits bool `type:"structure"`
}

type PurchaseReservedNodeOfferingInput struct {
	NodeCount              *int64  `type:"integer"`
	ReservedNodeOfferingID *string `locationName:"ReservedNodeOfferingId" type:"string" required:"true"`

	metadataPurchaseReservedNodeOfferingInput `json:"-", xml:"-"`
}

type metadataPurchaseReservedNodeOfferingInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PurchaseReservedNodeOfferingOutput struct {
	ReservedNode *ReservedNode `type:"structure"`

	metadataPurchaseReservedNodeOfferingOutput `json:"-", xml:"-"`
}

type metadataPurchaseReservedNodeOfferingOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RebootClusterInput struct {
	ClusterIdentifier *string `type:"string" required:"true"`

	metadataRebootClusterInput `json:"-", xml:"-"`
}

type metadataRebootClusterInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RebootClusterOutput struct {
	Cluster *Cluster `type:"structure"`

	metadataRebootClusterOutput `json:"-", xml:"-"`
}

type metadataRebootClusterOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RecurringCharge struct {
	RecurringChargeAmount    *float64 `type:"double"`
	RecurringChargeFrequency *string  `type:"string"`

	metadataRecurringCharge `json:"-", xml:"-"`
}

type metadataRecurringCharge struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedNode struct {
	CurrencyCode           *string            `type:"string"`
	Duration               *int64             `type:"integer"`
	FixedPrice             *float64           `type:"double"`
	NodeCount              *int64             `type:"integer"`
	NodeType               *string            `type:"string"`
	OfferingType           *string            `type:"string"`
	RecurringCharges       []*RecurringCharge `locationNameList:"RecurringCharge" type:"list"`
	ReservedNodeID         *string            `locationName:"ReservedNodeId" type:"string"`
	ReservedNodeOfferingID *string            `locationName:"ReservedNodeOfferingId" type:"string"`
	StartTime              *time.Time         `type:"timestamp" timestampFormat:"iso8601"`
	State                  *string            `type:"string"`
	UsagePrice             *float64           `type:"double"`

	metadataReservedNode `json:"-", xml:"-"`
}

type metadataReservedNode struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedNodeOffering struct {
	CurrencyCode           *string            `type:"string"`
	Duration               *int64             `type:"integer"`
	FixedPrice             *float64           `type:"double"`
	NodeType               *string            `type:"string"`
	OfferingType           *string            `type:"string"`
	RecurringCharges       []*RecurringCharge `locationNameList:"RecurringCharge" type:"list"`
	ReservedNodeOfferingID *string            `locationName:"ReservedNodeOfferingId" type:"string"`
	UsagePrice             *float64           `type:"double"`

	metadataReservedNodeOffering `json:"-", xml:"-"`
}

type metadataReservedNodeOffering struct {
	SDKShapeTraits bool `type:"structure"`
}

type ResetClusterParameterGroupInput struct {
	ParameterGroupName *string      `type:"string" required:"true"`
	Parameters         []*Parameter `locationNameList:"Parameter" type:"list"`
	ResetAllParameters *bool        `type:"boolean"`

	metadataResetClusterParameterGroupInput `json:"-", xml:"-"`
}

type metadataResetClusterParameterGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RestoreFromClusterSnapshotInput struct {
	AllowVersionUpgrade              *bool     `type:"boolean"`
	AutomatedSnapshotRetentionPeriod *int64    `type:"integer"`
	AvailabilityZone                 *string   `type:"string"`
	ClusterIdentifier                *string   `type:"string" required:"true"`
	ClusterParameterGroupName        *string   `type:"string"`
	ClusterSecurityGroups            []*string `locationNameList:"ClusterSecurityGroupName" type:"list"`
	ClusterSubnetGroupName           *string   `type:"string"`
	ElasticIP                        *string   `locationName:"ElasticIp" type:"string"`
	HSMClientCertificateIdentifier   *string   `locationName:"HsmClientCertificateIdentifier" type:"string"`
	HSMConfigurationIdentifier       *string   `locationName:"HsmConfigurationIdentifier" type:"string"`
	KMSKeyID                         *string   `locationName:"KmsKeyId" type:"string"`
	OwnerAccount                     *string   `type:"string"`
	Port                             *int64    `type:"integer"`
	PreferredMaintenanceWindow       *string   `type:"string"`
	PubliclyAccessible               *bool     `type:"boolean"`
	SnapshotClusterIdentifier        *string   `type:"string"`
	SnapshotIdentifier               *string   `type:"string" required:"true"`
	VPCSecurityGroupIDs              []*string `locationName:"VpcSecurityGroupIds" locationNameList:"VpcSecurityGroupId" type:"list"`

	metadataRestoreFromClusterSnapshotInput `json:"-", xml:"-"`
}

type metadataRestoreFromClusterSnapshotInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RestoreFromClusterSnapshotOutput struct {
	Cluster *Cluster `type:"structure"`

	metadataRestoreFromClusterSnapshotOutput `json:"-", xml:"-"`
}

type metadataRestoreFromClusterSnapshotOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RestoreStatus struct {
	CurrentRestoreRateInMegaBytesPerSecond *float64 `type:"double"`
	ElapsedTimeInSeconds                   *int64   `type:"long"`
	EstimatedTimeToCompletionInSeconds     *int64   `type:"long"`
	ProgressInMegaBytes                    *int64   `type:"long"`
	SnapshotSizeInMegaBytes                *int64   `type:"long"`
	Status                                 *string  `type:"string"`

	metadataRestoreStatus `json:"-", xml:"-"`
}

type metadataRestoreStatus struct {
	SDKShapeTraits bool `type:"structure"`
}

type RevokeClusterSecurityGroupIngressInput struct {
	CIDRIP                   *string `type:"string"`
	ClusterSecurityGroupName *string `type:"string" required:"true"`
	EC2SecurityGroupName     *string `type:"string"`
	EC2SecurityGroupOwnerID  *string `locationName:"EC2SecurityGroupOwnerId" type:"string"`

	metadataRevokeClusterSecurityGroupIngressInput `json:"-", xml:"-"`
}

type metadataRevokeClusterSecurityGroupIngressInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RevokeClusterSecurityGroupIngressOutput struct {
	ClusterSecurityGroup *ClusterSecurityGroup `type:"structure"`

	metadataRevokeClusterSecurityGroupIngressOutput `json:"-", xml:"-"`
}

type metadataRevokeClusterSecurityGroupIngressOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RevokeSnapshotAccessInput struct {
	AccountWithRestoreAccess  *string `type:"string" required:"true"`
	SnapshotClusterIdentifier *string `type:"string"`
	SnapshotIdentifier        *string `type:"string" required:"true"`

	metadataRevokeSnapshotAccessInput `json:"-", xml:"-"`
}

type metadataRevokeSnapshotAccessInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RevokeSnapshotAccessOutput struct {
	Snapshot *Snapshot `type:"structure"`

	metadataRevokeSnapshotAccessOutput `json:"-", xml:"-"`
}

type metadataRevokeSnapshotAccessOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RotateEncryptionKeyInput struct {
	ClusterIdentifier *string `type:"string" required:"true"`

	metadataRotateEncryptionKeyInput `json:"-", xml:"-"`
}

type metadataRotateEncryptionKeyInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RotateEncryptionKeyOutput struct {
	Cluster *Cluster `type:"structure"`

	metadataRotateEncryptionKeyOutput `json:"-", xml:"-"`
}

type metadataRotateEncryptionKeyOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Snapshot struct {
	AccountsWithRestoreAccess              []*AccountWithRestoreAccess `locationNameList:"AccountWithRestoreAccess" type:"list"`
	ActualIncrementalBackupSizeInMegaBytes *float64                    `type:"double"`
	AvailabilityZone                       *string                     `type:"string"`
	BackupProgressInMegaBytes              *float64                    `type:"double"`
	ClusterCreateTime                      *time.Time                  `type:"timestamp" timestampFormat:"iso8601"`
	ClusterIdentifier                      *string                     `type:"string"`
	ClusterVersion                         *string                     `type:"string"`
	CurrentBackupRateInMegaBytesPerSecond  *float64                    `type:"double"`
	DBName                                 *string                     `type:"string"`
	ElapsedTimeInSeconds                   *int64                      `type:"long"`
	Encrypted                              *bool                       `type:"boolean"`
	EncryptedWithHSM                       *bool                       `type:"boolean"`
	EstimatedSecondsToCompletion           *int64                      `type:"long"`
	KMSKeyID                               *string                     `locationName:"KmsKeyId" type:"string"`
	MasterUsername                         *string                     `type:"string"`
	NodeType                               *string                     `type:"string"`
	NumberOfNodes                          *int64                      `type:"integer"`
	OwnerAccount                           *string                     `type:"string"`
	Port                                   *int64                      `type:"integer"`
	SnapshotCreateTime                     *time.Time                  `type:"timestamp" timestampFormat:"iso8601"`
	SnapshotIdentifier                     *string                     `type:"string"`
	SnapshotType                           *string                     `type:"string"`
	SourceRegion                           *string                     `type:"string"`
	Status                                 *string                     `type:"string"`
	Tags                                   []*Tag                      `locationNameList:"Tag" type:"list"`
	TotalBackupSizeInMegaBytes             *float64                    `type:"double"`
	VPCID                                  *string                     `locationName:"VpcId" type:"string"`

	metadataSnapshot `json:"-", xml:"-"`
}

type metadataSnapshot struct {
	SDKShapeTraits bool `type:"structure"`
}

type Subnet struct {
	SubnetAvailabilityZone *AvailabilityZone `type:"structure"`
	SubnetIdentifier       *string           `type:"string"`
	SubnetStatus           *string           `type:"string"`

	metadataSubnet `json:"-", xml:"-"`
}

type metadataSubnet struct {
	SDKShapeTraits bool `type:"structure"`
}

type Tag struct {
	Key   *string `type:"string"`
	Value *string `type:"string"`

	metadataTag `json:"-", xml:"-"`
}

type metadataTag struct {
	SDKShapeTraits bool `type:"structure"`
}

type TaggedResource struct {
	ResourceName *string `type:"string"`
	ResourceType *string `type:"string"`
	Tag          *Tag    `type:"structure"`

	metadataTaggedResource `json:"-", xml:"-"`
}

type metadataTaggedResource struct {
	SDKShapeTraits bool `type:"structure"`
}

type VPCSecurityGroupMembership struct {
	Status             *string `type:"string"`
	VPCSecurityGroupID *string `locationName:"VpcSecurityGroupId" type:"string"`

	metadataVPCSecurityGroupMembership `json:"-", xml:"-"`
}

type metadataVPCSecurityGroupMembership struct {
	SDKShapeTraits bool `type:"structure"`
}