package opsworks

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"github.com/awslabs/aws-sdk-go/aws"
)

// AssignInstanceRequest generates a request for the AssignInstance operation.
func (c *OpsWorks) AssignInstanceRequest(input *AssignInstanceInput) (req *aws.Request, output *AssignInstanceOutput) {
	if opAssignInstance == nil {
		opAssignInstance = &aws.Operation{
			Name:       "AssignInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAssignInstance, input, output)
	output = &AssignInstanceOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) AssignInstance(input *AssignInstanceInput) (output *AssignInstanceOutput, err error) {
	req, out := c.AssignInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opAssignInstance *aws.Operation

// AssignVolumeRequest generates a request for the AssignVolume operation.
func (c *OpsWorks) AssignVolumeRequest(input *AssignVolumeInput) (req *aws.Request, output *AssignVolumeOutput) {
	if opAssignVolume == nil {
		opAssignVolume = &aws.Operation{
			Name:       "AssignVolume",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAssignVolume, input, output)
	output = &AssignVolumeOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) AssignVolume(input *AssignVolumeInput) (output *AssignVolumeOutput, err error) {
	req, out := c.AssignVolumeRequest(input)
	output = out
	err = req.Send()
	return
}

var opAssignVolume *aws.Operation

// AssociateElasticIPRequest generates a request for the AssociateElasticIP operation.
func (c *OpsWorks) AssociateElasticIPRequest(input *AssociateElasticIPInput) (req *aws.Request, output *AssociateElasticIPOutput) {
	if opAssociateElasticIP == nil {
		opAssociateElasticIP = &aws.Operation{
			Name:       "AssociateElasticIp",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAssociateElasticIP, input, output)
	output = &AssociateElasticIPOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) AssociateElasticIP(input *AssociateElasticIPInput) (output *AssociateElasticIPOutput, err error) {
	req, out := c.AssociateElasticIPRequest(input)
	output = out
	err = req.Send()
	return
}

var opAssociateElasticIP *aws.Operation

// AttachElasticLoadBalancerRequest generates a request for the AttachElasticLoadBalancer operation.
func (c *OpsWorks) AttachElasticLoadBalancerRequest(input *AttachElasticLoadBalancerInput) (req *aws.Request, output *AttachElasticLoadBalancerOutput) {
	if opAttachElasticLoadBalancer == nil {
		opAttachElasticLoadBalancer = &aws.Operation{
			Name:       "AttachElasticLoadBalancer",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAttachElasticLoadBalancer, input, output)
	output = &AttachElasticLoadBalancerOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) AttachElasticLoadBalancer(input *AttachElasticLoadBalancerInput) (output *AttachElasticLoadBalancerOutput, err error) {
	req, out := c.AttachElasticLoadBalancerRequest(input)
	output = out
	err = req.Send()
	return
}

var opAttachElasticLoadBalancer *aws.Operation

// CloneStackRequest generates a request for the CloneStack operation.
func (c *OpsWorks) CloneStackRequest(input *CloneStackInput) (req *aws.Request, output *CloneStackOutput) {
	if opCloneStack == nil {
		opCloneStack = &aws.Operation{
			Name:       "CloneStack",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCloneStack, input, output)
	output = &CloneStackOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) CloneStack(input *CloneStackInput) (output *CloneStackOutput, err error) {
	req, out := c.CloneStackRequest(input)
	output = out
	err = req.Send()
	return
}

var opCloneStack *aws.Operation

// CreateAppRequest generates a request for the CreateApp operation.
func (c *OpsWorks) CreateAppRequest(input *CreateAppInput) (req *aws.Request, output *CreateAppOutput) {
	if opCreateApp == nil {
		opCreateApp = &aws.Operation{
			Name:       "CreateApp",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateApp, input, output)
	output = &CreateAppOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) CreateApp(input *CreateAppInput) (output *CreateAppOutput, err error) {
	req, out := c.CreateAppRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateApp *aws.Operation

// CreateDeploymentRequest generates a request for the CreateDeployment operation.
func (c *OpsWorks) CreateDeploymentRequest(input *CreateDeploymentInput) (req *aws.Request, output *CreateDeploymentOutput) {
	if opCreateDeployment == nil {
		opCreateDeployment = &aws.Operation{
			Name:       "CreateDeployment",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDeployment, input, output)
	output = &CreateDeploymentOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) CreateDeployment(input *CreateDeploymentInput) (output *CreateDeploymentOutput, err error) {
	req, out := c.CreateDeploymentRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDeployment *aws.Operation

// CreateInstanceRequest generates a request for the CreateInstance operation.
func (c *OpsWorks) CreateInstanceRequest(input *CreateInstanceInput) (req *aws.Request, output *CreateInstanceOutput) {
	if opCreateInstance == nil {
		opCreateInstance = &aws.Operation{
			Name:       "CreateInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateInstance, input, output)
	output = &CreateInstanceOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) CreateInstance(input *CreateInstanceInput) (output *CreateInstanceOutput, err error) {
	req, out := c.CreateInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateInstance *aws.Operation

// CreateLayerRequest generates a request for the CreateLayer operation.
func (c *OpsWorks) CreateLayerRequest(input *CreateLayerInput) (req *aws.Request, output *CreateLayerOutput) {
	if opCreateLayer == nil {
		opCreateLayer = &aws.Operation{
			Name:       "CreateLayer",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateLayer, input, output)
	output = &CreateLayerOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) CreateLayer(input *CreateLayerInput) (output *CreateLayerOutput, err error) {
	req, out := c.CreateLayerRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateLayer *aws.Operation

// CreateStackRequest generates a request for the CreateStack operation.
func (c *OpsWorks) CreateStackRequest(input *CreateStackInput) (req *aws.Request, output *CreateStackOutput) {
	if opCreateStack == nil {
		opCreateStack = &aws.Operation{
			Name:       "CreateStack",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateStack, input, output)
	output = &CreateStackOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) CreateStack(input *CreateStackInput) (output *CreateStackOutput, err error) {
	req, out := c.CreateStackRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateStack *aws.Operation

// CreateUserProfileRequest generates a request for the CreateUserProfile operation.
func (c *OpsWorks) CreateUserProfileRequest(input *CreateUserProfileInput) (req *aws.Request, output *CreateUserProfileOutput) {
	if opCreateUserProfile == nil {
		opCreateUserProfile = &aws.Operation{
			Name:       "CreateUserProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateUserProfile, input, output)
	output = &CreateUserProfileOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) CreateUserProfile(input *CreateUserProfileInput) (output *CreateUserProfileOutput, err error) {
	req, out := c.CreateUserProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateUserProfile *aws.Operation

// DeleteAppRequest generates a request for the DeleteApp operation.
func (c *OpsWorks) DeleteAppRequest(input *DeleteAppInput) (req *aws.Request, output *DeleteAppOutput) {
	if opDeleteApp == nil {
		opDeleteApp = &aws.Operation{
			Name:       "DeleteApp",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteApp, input, output)
	output = &DeleteAppOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DeleteApp(input *DeleteAppInput) (output *DeleteAppOutput, err error) {
	req, out := c.DeleteAppRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteApp *aws.Operation

// DeleteInstanceRequest generates a request for the DeleteInstance operation.
func (c *OpsWorks) DeleteInstanceRequest(input *DeleteInstanceInput) (req *aws.Request, output *DeleteInstanceOutput) {
	if opDeleteInstance == nil {
		opDeleteInstance = &aws.Operation{
			Name:       "DeleteInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteInstance, input, output)
	output = &DeleteInstanceOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DeleteInstance(input *DeleteInstanceInput) (output *DeleteInstanceOutput, err error) {
	req, out := c.DeleteInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteInstance *aws.Operation

// DeleteLayerRequest generates a request for the DeleteLayer operation.
func (c *OpsWorks) DeleteLayerRequest(input *DeleteLayerInput) (req *aws.Request, output *DeleteLayerOutput) {
	if opDeleteLayer == nil {
		opDeleteLayer = &aws.Operation{
			Name:       "DeleteLayer",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteLayer, input, output)
	output = &DeleteLayerOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DeleteLayer(input *DeleteLayerInput) (output *DeleteLayerOutput, err error) {
	req, out := c.DeleteLayerRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteLayer *aws.Operation

// DeleteStackRequest generates a request for the DeleteStack operation.
func (c *OpsWorks) DeleteStackRequest(input *DeleteStackInput) (req *aws.Request, output *DeleteStackOutput) {
	if opDeleteStack == nil {
		opDeleteStack = &aws.Operation{
			Name:       "DeleteStack",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteStack, input, output)
	output = &DeleteStackOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DeleteStack(input *DeleteStackInput) (output *DeleteStackOutput, err error) {
	req, out := c.DeleteStackRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteStack *aws.Operation

// DeleteUserProfileRequest generates a request for the DeleteUserProfile operation.
func (c *OpsWorks) DeleteUserProfileRequest(input *DeleteUserProfileInput) (req *aws.Request, output *DeleteUserProfileOutput) {
	if opDeleteUserProfile == nil {
		opDeleteUserProfile = &aws.Operation{
			Name:       "DeleteUserProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteUserProfile, input, output)
	output = &DeleteUserProfileOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DeleteUserProfile(input *DeleteUserProfileInput) (output *DeleteUserProfileOutput, err error) {
	req, out := c.DeleteUserProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteUserProfile *aws.Operation

// DeregisterElasticIPRequest generates a request for the DeregisterElasticIP operation.
func (c *OpsWorks) DeregisterElasticIPRequest(input *DeregisterElasticIPInput) (req *aws.Request, output *DeregisterElasticIPOutput) {
	if opDeregisterElasticIP == nil {
		opDeregisterElasticIP = &aws.Operation{
			Name:       "DeregisterElasticIp",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeregisterElasticIP, input, output)
	output = &DeregisterElasticIPOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DeregisterElasticIP(input *DeregisterElasticIPInput) (output *DeregisterElasticIPOutput, err error) {
	req, out := c.DeregisterElasticIPRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeregisterElasticIP *aws.Operation

// DeregisterInstanceRequest generates a request for the DeregisterInstance operation.
func (c *OpsWorks) DeregisterInstanceRequest(input *DeregisterInstanceInput) (req *aws.Request, output *DeregisterInstanceOutput) {
	if opDeregisterInstance == nil {
		opDeregisterInstance = &aws.Operation{
			Name:       "DeregisterInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeregisterInstance, input, output)
	output = &DeregisterInstanceOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DeregisterInstance(input *DeregisterInstanceInput) (output *DeregisterInstanceOutput, err error) {
	req, out := c.DeregisterInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeregisterInstance *aws.Operation

// DeregisterRDSDBInstanceRequest generates a request for the DeregisterRDSDBInstance operation.
func (c *OpsWorks) DeregisterRDSDBInstanceRequest(input *DeregisterRDSDBInstanceInput) (req *aws.Request, output *DeregisterRDSDBInstanceOutput) {
	if opDeregisterRDSDBInstance == nil {
		opDeregisterRDSDBInstance = &aws.Operation{
			Name:       "DeregisterRdsDbInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeregisterRDSDBInstance, input, output)
	output = &DeregisterRDSDBInstanceOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DeregisterRDSDBInstance(input *DeregisterRDSDBInstanceInput) (output *DeregisterRDSDBInstanceOutput, err error) {
	req, out := c.DeregisterRDSDBInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeregisterRDSDBInstance *aws.Operation

// DeregisterVolumeRequest generates a request for the DeregisterVolume operation.
func (c *OpsWorks) DeregisterVolumeRequest(input *DeregisterVolumeInput) (req *aws.Request, output *DeregisterVolumeOutput) {
	if opDeregisterVolume == nil {
		opDeregisterVolume = &aws.Operation{
			Name:       "DeregisterVolume",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeregisterVolume, input, output)
	output = &DeregisterVolumeOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DeregisterVolume(input *DeregisterVolumeInput) (output *DeregisterVolumeOutput, err error) {
	req, out := c.DeregisterVolumeRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeregisterVolume *aws.Operation

// DescribeAppsRequest generates a request for the DescribeApps operation.
func (c *OpsWorks) DescribeAppsRequest(input *DescribeAppsInput) (req *aws.Request, output *DescribeAppsOutput) {
	if opDescribeApps == nil {
		opDescribeApps = &aws.Operation{
			Name:       "DescribeApps",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeApps, input, output)
	output = &DescribeAppsOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeApps(input *DescribeAppsInput) (output *DescribeAppsOutput, err error) {
	req, out := c.DescribeAppsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeApps *aws.Operation

// DescribeCommandsRequest generates a request for the DescribeCommands operation.
func (c *OpsWorks) DescribeCommandsRequest(input *DescribeCommandsInput) (req *aws.Request, output *DescribeCommandsOutput) {
	if opDescribeCommands == nil {
		opDescribeCommands = &aws.Operation{
			Name:       "DescribeCommands",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeCommands, input, output)
	output = &DescribeCommandsOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeCommands(input *DescribeCommandsInput) (output *DescribeCommandsOutput, err error) {
	req, out := c.DescribeCommandsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeCommands *aws.Operation

// DescribeDeploymentsRequest generates a request for the DescribeDeployments operation.
func (c *OpsWorks) DescribeDeploymentsRequest(input *DescribeDeploymentsInput) (req *aws.Request, output *DescribeDeploymentsOutput) {
	if opDescribeDeployments == nil {
		opDescribeDeployments = &aws.Operation{
			Name:       "DescribeDeployments",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDeployments, input, output)
	output = &DescribeDeploymentsOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeDeployments(input *DescribeDeploymentsInput) (output *DescribeDeploymentsOutput, err error) {
	req, out := c.DescribeDeploymentsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeDeployments *aws.Operation

// DescribeElasticIPsRequest generates a request for the DescribeElasticIPs operation.
func (c *OpsWorks) DescribeElasticIPsRequest(input *DescribeElasticIPsInput) (req *aws.Request, output *DescribeElasticIPsOutput) {
	if opDescribeElasticIPs == nil {
		opDescribeElasticIPs = &aws.Operation{
			Name:       "DescribeElasticIps",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeElasticIPs, input, output)
	output = &DescribeElasticIPsOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeElasticIPs(input *DescribeElasticIPsInput) (output *DescribeElasticIPsOutput, err error) {
	req, out := c.DescribeElasticIPsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeElasticIPs *aws.Operation

// DescribeElasticLoadBalancersRequest generates a request for the DescribeElasticLoadBalancers operation.
func (c *OpsWorks) DescribeElasticLoadBalancersRequest(input *DescribeElasticLoadBalancersInput) (req *aws.Request, output *DescribeElasticLoadBalancersOutput) {
	if opDescribeElasticLoadBalancers == nil {
		opDescribeElasticLoadBalancers = &aws.Operation{
			Name:       "DescribeElasticLoadBalancers",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeElasticLoadBalancers, input, output)
	output = &DescribeElasticLoadBalancersOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeElasticLoadBalancers(input *DescribeElasticLoadBalancersInput) (output *DescribeElasticLoadBalancersOutput, err error) {
	req, out := c.DescribeElasticLoadBalancersRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeElasticLoadBalancers *aws.Operation

// DescribeInstancesRequest generates a request for the DescribeInstances operation.
func (c *OpsWorks) DescribeInstancesRequest(input *DescribeInstancesInput) (req *aws.Request, output *DescribeInstancesOutput) {
	if opDescribeInstances == nil {
		opDescribeInstances = &aws.Operation{
			Name:       "DescribeInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeInstances, input, output)
	output = &DescribeInstancesOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeInstances(input *DescribeInstancesInput) (output *DescribeInstancesOutput, err error) {
	req, out := c.DescribeInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeInstances *aws.Operation

// DescribeLayersRequest generates a request for the DescribeLayers operation.
func (c *OpsWorks) DescribeLayersRequest(input *DescribeLayersInput) (req *aws.Request, output *DescribeLayersOutput) {
	if opDescribeLayers == nil {
		opDescribeLayers = &aws.Operation{
			Name:       "DescribeLayers",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeLayers, input, output)
	output = &DescribeLayersOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeLayers(input *DescribeLayersInput) (output *DescribeLayersOutput, err error) {
	req, out := c.DescribeLayersRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeLayers *aws.Operation

// DescribeLoadBasedAutoScalingRequest generates a request for the DescribeLoadBasedAutoScaling operation.
func (c *OpsWorks) DescribeLoadBasedAutoScalingRequest(input *DescribeLoadBasedAutoScalingInput) (req *aws.Request, output *DescribeLoadBasedAutoScalingOutput) {
	if opDescribeLoadBasedAutoScaling == nil {
		opDescribeLoadBasedAutoScaling = &aws.Operation{
			Name:       "DescribeLoadBasedAutoScaling",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeLoadBasedAutoScaling, input, output)
	output = &DescribeLoadBasedAutoScalingOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeLoadBasedAutoScaling(input *DescribeLoadBasedAutoScalingInput) (output *DescribeLoadBasedAutoScalingOutput, err error) {
	req, out := c.DescribeLoadBasedAutoScalingRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeLoadBasedAutoScaling *aws.Operation

// DescribeMyUserProfileRequest generates a request for the DescribeMyUserProfile operation.
func (c *OpsWorks) DescribeMyUserProfileRequest(input *DescribeMyUserProfileInput) (req *aws.Request, output *DescribeMyUserProfileOutput) {
	if opDescribeMyUserProfile == nil {
		opDescribeMyUserProfile = &aws.Operation{
			Name:       "DescribeMyUserProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeMyUserProfile, input, output)
	output = &DescribeMyUserProfileOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeMyUserProfile(input *DescribeMyUserProfileInput) (output *DescribeMyUserProfileOutput, err error) {
	req, out := c.DescribeMyUserProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeMyUserProfile *aws.Operation

// DescribePermissionsRequest generates a request for the DescribePermissions operation.
func (c *OpsWorks) DescribePermissionsRequest(input *DescribePermissionsInput) (req *aws.Request, output *DescribePermissionsOutput) {
	if opDescribePermissions == nil {
		opDescribePermissions = &aws.Operation{
			Name:       "DescribePermissions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribePermissions, input, output)
	output = &DescribePermissionsOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribePermissions(input *DescribePermissionsInput) (output *DescribePermissionsOutput, err error) {
	req, out := c.DescribePermissionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribePermissions *aws.Operation

// DescribeRAIDArraysRequest generates a request for the DescribeRAIDArrays operation.
func (c *OpsWorks) DescribeRAIDArraysRequest(input *DescribeRAIDArraysInput) (req *aws.Request, output *DescribeRAIDArraysOutput) {
	if opDescribeRAIDArrays == nil {
		opDescribeRAIDArrays = &aws.Operation{
			Name:       "DescribeRaidArrays",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeRAIDArrays, input, output)
	output = &DescribeRAIDArraysOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeRAIDArrays(input *DescribeRAIDArraysInput) (output *DescribeRAIDArraysOutput, err error) {
	req, out := c.DescribeRAIDArraysRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeRAIDArrays *aws.Operation

// DescribeRDSDBInstancesRequest generates a request for the DescribeRDSDBInstances operation.
func (c *OpsWorks) DescribeRDSDBInstancesRequest(input *DescribeRDSDBInstancesInput) (req *aws.Request, output *DescribeRDSDBInstancesOutput) {
	if opDescribeRDSDBInstances == nil {
		opDescribeRDSDBInstances = &aws.Operation{
			Name:       "DescribeRdsDbInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeRDSDBInstances, input, output)
	output = &DescribeRDSDBInstancesOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeRDSDBInstances(input *DescribeRDSDBInstancesInput) (output *DescribeRDSDBInstancesOutput, err error) {
	req, out := c.DescribeRDSDBInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeRDSDBInstances *aws.Operation

// DescribeServiceErrorsRequest generates a request for the DescribeServiceErrors operation.
func (c *OpsWorks) DescribeServiceErrorsRequest(input *DescribeServiceErrorsInput) (req *aws.Request, output *DescribeServiceErrorsOutput) {
	if opDescribeServiceErrors == nil {
		opDescribeServiceErrors = &aws.Operation{
			Name:       "DescribeServiceErrors",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeServiceErrors, input, output)
	output = &DescribeServiceErrorsOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeServiceErrors(input *DescribeServiceErrorsInput) (output *DescribeServiceErrorsOutput, err error) {
	req, out := c.DescribeServiceErrorsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeServiceErrors *aws.Operation

// DescribeStackProvisioningParametersRequest generates a request for the DescribeStackProvisioningParameters operation.
func (c *OpsWorks) DescribeStackProvisioningParametersRequest(input *DescribeStackProvisioningParametersInput) (req *aws.Request, output *DescribeStackProvisioningParametersOutput) {
	if opDescribeStackProvisioningParameters == nil {
		opDescribeStackProvisioningParameters = &aws.Operation{
			Name:       "DescribeStackProvisioningParameters",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeStackProvisioningParameters, input, output)
	output = &DescribeStackProvisioningParametersOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeStackProvisioningParameters(input *DescribeStackProvisioningParametersInput) (output *DescribeStackProvisioningParametersOutput, err error) {
	req, out := c.DescribeStackProvisioningParametersRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeStackProvisioningParameters *aws.Operation

// DescribeStackSummaryRequest generates a request for the DescribeStackSummary operation.
func (c *OpsWorks) DescribeStackSummaryRequest(input *DescribeStackSummaryInput) (req *aws.Request, output *DescribeStackSummaryOutput) {
	if opDescribeStackSummary == nil {
		opDescribeStackSummary = &aws.Operation{
			Name:       "DescribeStackSummary",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeStackSummary, input, output)
	output = &DescribeStackSummaryOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeStackSummary(input *DescribeStackSummaryInput) (output *DescribeStackSummaryOutput, err error) {
	req, out := c.DescribeStackSummaryRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeStackSummary *aws.Operation

// DescribeStacksRequest generates a request for the DescribeStacks operation.
func (c *OpsWorks) DescribeStacksRequest(input *DescribeStacksInput) (req *aws.Request, output *DescribeStacksOutput) {
	if opDescribeStacks == nil {
		opDescribeStacks = &aws.Operation{
			Name:       "DescribeStacks",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeStacks, input, output)
	output = &DescribeStacksOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeStacks(input *DescribeStacksInput) (output *DescribeStacksOutput, err error) {
	req, out := c.DescribeStacksRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeStacks *aws.Operation

// DescribeTimeBasedAutoScalingRequest generates a request for the DescribeTimeBasedAutoScaling operation.
func (c *OpsWorks) DescribeTimeBasedAutoScalingRequest(input *DescribeTimeBasedAutoScalingInput) (req *aws.Request, output *DescribeTimeBasedAutoScalingOutput) {
	if opDescribeTimeBasedAutoScaling == nil {
		opDescribeTimeBasedAutoScaling = &aws.Operation{
			Name:       "DescribeTimeBasedAutoScaling",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeTimeBasedAutoScaling, input, output)
	output = &DescribeTimeBasedAutoScalingOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeTimeBasedAutoScaling(input *DescribeTimeBasedAutoScalingInput) (output *DescribeTimeBasedAutoScalingOutput, err error) {
	req, out := c.DescribeTimeBasedAutoScalingRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeTimeBasedAutoScaling *aws.Operation

// DescribeUserProfilesRequest generates a request for the DescribeUserProfiles operation.
func (c *OpsWorks) DescribeUserProfilesRequest(input *DescribeUserProfilesInput) (req *aws.Request, output *DescribeUserProfilesOutput) {
	if opDescribeUserProfiles == nil {
		opDescribeUserProfiles = &aws.Operation{
			Name:       "DescribeUserProfiles",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeUserProfiles, input, output)
	output = &DescribeUserProfilesOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeUserProfiles(input *DescribeUserProfilesInput) (output *DescribeUserProfilesOutput, err error) {
	req, out := c.DescribeUserProfilesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeUserProfiles *aws.Operation

// DescribeVolumesRequest generates a request for the DescribeVolumes operation.
func (c *OpsWorks) DescribeVolumesRequest(input *DescribeVolumesInput) (req *aws.Request, output *DescribeVolumesOutput) {
	if opDescribeVolumes == nil {
		opDescribeVolumes = &aws.Operation{
			Name:       "DescribeVolumes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeVolumes, input, output)
	output = &DescribeVolumesOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DescribeVolumes(input *DescribeVolumesInput) (output *DescribeVolumesOutput, err error) {
	req, out := c.DescribeVolumesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeVolumes *aws.Operation

// DetachElasticLoadBalancerRequest generates a request for the DetachElasticLoadBalancer operation.
func (c *OpsWorks) DetachElasticLoadBalancerRequest(input *DetachElasticLoadBalancerInput) (req *aws.Request, output *DetachElasticLoadBalancerOutput) {
	if opDetachElasticLoadBalancer == nil {
		opDetachElasticLoadBalancer = &aws.Operation{
			Name:       "DetachElasticLoadBalancer",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDetachElasticLoadBalancer, input, output)
	output = &DetachElasticLoadBalancerOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DetachElasticLoadBalancer(input *DetachElasticLoadBalancerInput) (output *DetachElasticLoadBalancerOutput, err error) {
	req, out := c.DetachElasticLoadBalancerRequest(input)
	output = out
	err = req.Send()
	return
}

var opDetachElasticLoadBalancer *aws.Operation

// DisassociateElasticIPRequest generates a request for the DisassociateElasticIP operation.
func (c *OpsWorks) DisassociateElasticIPRequest(input *DisassociateElasticIPInput) (req *aws.Request, output *DisassociateElasticIPOutput) {
	if opDisassociateElasticIP == nil {
		opDisassociateElasticIP = &aws.Operation{
			Name:       "DisassociateElasticIp",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDisassociateElasticIP, input, output)
	output = &DisassociateElasticIPOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) DisassociateElasticIP(input *DisassociateElasticIPInput) (output *DisassociateElasticIPOutput, err error) {
	req, out := c.DisassociateElasticIPRequest(input)
	output = out
	err = req.Send()
	return
}

var opDisassociateElasticIP *aws.Operation

// GetHostnameSuggestionRequest generates a request for the GetHostnameSuggestion operation.
func (c *OpsWorks) GetHostnameSuggestionRequest(input *GetHostnameSuggestionInput) (req *aws.Request, output *GetHostnameSuggestionOutput) {
	if opGetHostnameSuggestion == nil {
		opGetHostnameSuggestion = &aws.Operation{
			Name:       "GetHostnameSuggestion",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetHostnameSuggestion, input, output)
	output = &GetHostnameSuggestionOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) GetHostnameSuggestion(input *GetHostnameSuggestionInput) (output *GetHostnameSuggestionOutput, err error) {
	req, out := c.GetHostnameSuggestionRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetHostnameSuggestion *aws.Operation

// RebootInstanceRequest generates a request for the RebootInstance operation.
func (c *OpsWorks) RebootInstanceRequest(input *RebootInstanceInput) (req *aws.Request, output *RebootInstanceOutput) {
	if opRebootInstance == nil {
		opRebootInstance = &aws.Operation{
			Name:       "RebootInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRebootInstance, input, output)
	output = &RebootInstanceOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) RebootInstance(input *RebootInstanceInput) (output *RebootInstanceOutput, err error) {
	req, out := c.RebootInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opRebootInstance *aws.Operation

// RegisterElasticIPRequest generates a request for the RegisterElasticIP operation.
func (c *OpsWorks) RegisterElasticIPRequest(input *RegisterElasticIPInput) (req *aws.Request, output *RegisterElasticIPOutput) {
	if opRegisterElasticIP == nil {
		opRegisterElasticIP = &aws.Operation{
			Name:       "RegisterElasticIp",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRegisterElasticIP, input, output)
	output = &RegisterElasticIPOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) RegisterElasticIP(input *RegisterElasticIPInput) (output *RegisterElasticIPOutput, err error) {
	req, out := c.RegisterElasticIPRequest(input)
	output = out
	err = req.Send()
	return
}

var opRegisterElasticIP *aws.Operation

// RegisterInstanceRequest generates a request for the RegisterInstance operation.
func (c *OpsWorks) RegisterInstanceRequest(input *RegisterInstanceInput) (req *aws.Request, output *RegisterInstanceOutput) {
	if opRegisterInstance == nil {
		opRegisterInstance = &aws.Operation{
			Name:       "RegisterInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRegisterInstance, input, output)
	output = &RegisterInstanceOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) RegisterInstance(input *RegisterInstanceInput) (output *RegisterInstanceOutput, err error) {
	req, out := c.RegisterInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opRegisterInstance *aws.Operation

// RegisterRDSDBInstanceRequest generates a request for the RegisterRDSDBInstance operation.
func (c *OpsWorks) RegisterRDSDBInstanceRequest(input *RegisterRDSDBInstanceInput) (req *aws.Request, output *RegisterRDSDBInstanceOutput) {
	if opRegisterRDSDBInstance == nil {
		opRegisterRDSDBInstance = &aws.Operation{
			Name:       "RegisterRdsDbInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRegisterRDSDBInstance, input, output)
	output = &RegisterRDSDBInstanceOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) RegisterRDSDBInstance(input *RegisterRDSDBInstanceInput) (output *RegisterRDSDBInstanceOutput, err error) {
	req, out := c.RegisterRDSDBInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opRegisterRDSDBInstance *aws.Operation

// RegisterVolumeRequest generates a request for the RegisterVolume operation.
func (c *OpsWorks) RegisterVolumeRequest(input *RegisterVolumeInput) (req *aws.Request, output *RegisterVolumeOutput) {
	if opRegisterVolume == nil {
		opRegisterVolume = &aws.Operation{
			Name:       "RegisterVolume",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRegisterVolume, input, output)
	output = &RegisterVolumeOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) RegisterVolume(input *RegisterVolumeInput) (output *RegisterVolumeOutput, err error) {
	req, out := c.RegisterVolumeRequest(input)
	output = out
	err = req.Send()
	return
}

var opRegisterVolume *aws.Operation

// SetLoadBasedAutoScalingRequest generates a request for the SetLoadBasedAutoScaling operation.
func (c *OpsWorks) SetLoadBasedAutoScalingRequest(input *SetLoadBasedAutoScalingInput) (req *aws.Request, output *SetLoadBasedAutoScalingOutput) {
	if opSetLoadBasedAutoScaling == nil {
		opSetLoadBasedAutoScaling = &aws.Operation{
			Name:       "SetLoadBasedAutoScaling",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opSetLoadBasedAutoScaling, input, output)
	output = &SetLoadBasedAutoScalingOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) SetLoadBasedAutoScaling(input *SetLoadBasedAutoScalingInput) (output *SetLoadBasedAutoScalingOutput, err error) {
	req, out := c.SetLoadBasedAutoScalingRequest(input)
	output = out
	err = req.Send()
	return
}

var opSetLoadBasedAutoScaling *aws.Operation

// SetPermissionRequest generates a request for the SetPermission operation.
func (c *OpsWorks) SetPermissionRequest(input *SetPermissionInput) (req *aws.Request, output *SetPermissionOutput) {
	if opSetPermission == nil {
		opSetPermission = &aws.Operation{
			Name:       "SetPermission",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opSetPermission, input, output)
	output = &SetPermissionOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) SetPermission(input *SetPermissionInput) (output *SetPermissionOutput, err error) {
	req, out := c.SetPermissionRequest(input)
	output = out
	err = req.Send()
	return
}

var opSetPermission *aws.Operation

// SetTimeBasedAutoScalingRequest generates a request for the SetTimeBasedAutoScaling operation.
func (c *OpsWorks) SetTimeBasedAutoScalingRequest(input *SetTimeBasedAutoScalingInput) (req *aws.Request, output *SetTimeBasedAutoScalingOutput) {
	if opSetTimeBasedAutoScaling == nil {
		opSetTimeBasedAutoScaling = &aws.Operation{
			Name:       "SetTimeBasedAutoScaling",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opSetTimeBasedAutoScaling, input, output)
	output = &SetTimeBasedAutoScalingOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) SetTimeBasedAutoScaling(input *SetTimeBasedAutoScalingInput) (output *SetTimeBasedAutoScalingOutput, err error) {
	req, out := c.SetTimeBasedAutoScalingRequest(input)
	output = out
	err = req.Send()
	return
}

var opSetTimeBasedAutoScaling *aws.Operation

// StartInstanceRequest generates a request for the StartInstance operation.
func (c *OpsWorks) StartInstanceRequest(input *StartInstanceInput) (req *aws.Request, output *StartInstanceOutput) {
	if opStartInstance == nil {
		opStartInstance = &aws.Operation{
			Name:       "StartInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opStartInstance, input, output)
	output = &StartInstanceOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) StartInstance(input *StartInstanceInput) (output *StartInstanceOutput, err error) {
	req, out := c.StartInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opStartInstance *aws.Operation

// StartStackRequest generates a request for the StartStack operation.
func (c *OpsWorks) StartStackRequest(input *StartStackInput) (req *aws.Request, output *StartStackOutput) {
	if opStartStack == nil {
		opStartStack = &aws.Operation{
			Name:       "StartStack",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opStartStack, input, output)
	output = &StartStackOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) StartStack(input *StartStackInput) (output *StartStackOutput, err error) {
	req, out := c.StartStackRequest(input)
	output = out
	err = req.Send()
	return
}

var opStartStack *aws.Operation

// StopInstanceRequest generates a request for the StopInstance operation.
func (c *OpsWorks) StopInstanceRequest(input *StopInstanceInput) (req *aws.Request, output *StopInstanceOutput) {
	if opStopInstance == nil {
		opStopInstance = &aws.Operation{
			Name:       "StopInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opStopInstance, input, output)
	output = &StopInstanceOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) StopInstance(input *StopInstanceInput) (output *StopInstanceOutput, err error) {
	req, out := c.StopInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opStopInstance *aws.Operation

// StopStackRequest generates a request for the StopStack operation.
func (c *OpsWorks) StopStackRequest(input *StopStackInput) (req *aws.Request, output *StopStackOutput) {
	if opStopStack == nil {
		opStopStack = &aws.Operation{
			Name:       "StopStack",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opStopStack, input, output)
	output = &StopStackOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) StopStack(input *StopStackInput) (output *StopStackOutput, err error) {
	req, out := c.StopStackRequest(input)
	output = out
	err = req.Send()
	return
}

var opStopStack *aws.Operation

// UnassignInstanceRequest generates a request for the UnassignInstance operation.
func (c *OpsWorks) UnassignInstanceRequest(input *UnassignInstanceInput) (req *aws.Request, output *UnassignInstanceOutput) {
	if opUnassignInstance == nil {
		opUnassignInstance = &aws.Operation{
			Name:       "UnassignInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUnassignInstance, input, output)
	output = &UnassignInstanceOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) UnassignInstance(input *UnassignInstanceInput) (output *UnassignInstanceOutput, err error) {
	req, out := c.UnassignInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opUnassignInstance *aws.Operation

// UnassignVolumeRequest generates a request for the UnassignVolume operation.
func (c *OpsWorks) UnassignVolumeRequest(input *UnassignVolumeInput) (req *aws.Request, output *UnassignVolumeOutput) {
	if opUnassignVolume == nil {
		opUnassignVolume = &aws.Operation{
			Name:       "UnassignVolume",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUnassignVolume, input, output)
	output = &UnassignVolumeOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) UnassignVolume(input *UnassignVolumeInput) (output *UnassignVolumeOutput, err error) {
	req, out := c.UnassignVolumeRequest(input)
	output = out
	err = req.Send()
	return
}

var opUnassignVolume *aws.Operation

// UpdateAppRequest generates a request for the UpdateApp operation.
func (c *OpsWorks) UpdateAppRequest(input *UpdateAppInput) (req *aws.Request, output *UpdateAppOutput) {
	if opUpdateApp == nil {
		opUpdateApp = &aws.Operation{
			Name:       "UpdateApp",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateApp, input, output)
	output = &UpdateAppOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) UpdateApp(input *UpdateAppInput) (output *UpdateAppOutput, err error) {
	req, out := c.UpdateAppRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateApp *aws.Operation

// UpdateElasticIPRequest generates a request for the UpdateElasticIP operation.
func (c *OpsWorks) UpdateElasticIPRequest(input *UpdateElasticIPInput) (req *aws.Request, output *UpdateElasticIPOutput) {
	if opUpdateElasticIP == nil {
		opUpdateElasticIP = &aws.Operation{
			Name:       "UpdateElasticIp",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateElasticIP, input, output)
	output = &UpdateElasticIPOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) UpdateElasticIP(input *UpdateElasticIPInput) (output *UpdateElasticIPOutput, err error) {
	req, out := c.UpdateElasticIPRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateElasticIP *aws.Operation

// UpdateInstanceRequest generates a request for the UpdateInstance operation.
func (c *OpsWorks) UpdateInstanceRequest(input *UpdateInstanceInput) (req *aws.Request, output *UpdateInstanceOutput) {
	if opUpdateInstance == nil {
		opUpdateInstance = &aws.Operation{
			Name:       "UpdateInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateInstance, input, output)
	output = &UpdateInstanceOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) UpdateInstance(input *UpdateInstanceInput) (output *UpdateInstanceOutput, err error) {
	req, out := c.UpdateInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateInstance *aws.Operation

// UpdateLayerRequest generates a request for the UpdateLayer operation.
func (c *OpsWorks) UpdateLayerRequest(input *UpdateLayerInput) (req *aws.Request, output *UpdateLayerOutput) {
	if opUpdateLayer == nil {
		opUpdateLayer = &aws.Operation{
			Name:       "UpdateLayer",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateLayer, input, output)
	output = &UpdateLayerOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) UpdateLayer(input *UpdateLayerInput) (output *UpdateLayerOutput, err error) {
	req, out := c.UpdateLayerRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateLayer *aws.Operation

// UpdateMyUserProfileRequest generates a request for the UpdateMyUserProfile operation.
func (c *OpsWorks) UpdateMyUserProfileRequest(input *UpdateMyUserProfileInput) (req *aws.Request, output *UpdateMyUserProfileOutput) {
	if opUpdateMyUserProfile == nil {
		opUpdateMyUserProfile = &aws.Operation{
			Name:       "UpdateMyUserProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateMyUserProfile, input, output)
	output = &UpdateMyUserProfileOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) UpdateMyUserProfile(input *UpdateMyUserProfileInput) (output *UpdateMyUserProfileOutput, err error) {
	req, out := c.UpdateMyUserProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateMyUserProfile *aws.Operation

// UpdateRDSDBInstanceRequest generates a request for the UpdateRDSDBInstance operation.
func (c *OpsWorks) UpdateRDSDBInstanceRequest(input *UpdateRDSDBInstanceInput) (req *aws.Request, output *UpdateRDSDBInstanceOutput) {
	if opUpdateRDSDBInstance == nil {
		opUpdateRDSDBInstance = &aws.Operation{
			Name:       "UpdateRdsDbInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateRDSDBInstance, input, output)
	output = &UpdateRDSDBInstanceOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) UpdateRDSDBInstance(input *UpdateRDSDBInstanceInput) (output *UpdateRDSDBInstanceOutput, err error) {
	req, out := c.UpdateRDSDBInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateRDSDBInstance *aws.Operation

// UpdateStackRequest generates a request for the UpdateStack operation.
func (c *OpsWorks) UpdateStackRequest(input *UpdateStackInput) (req *aws.Request, output *UpdateStackOutput) {
	if opUpdateStack == nil {
		opUpdateStack = &aws.Operation{
			Name:       "UpdateStack",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateStack, input, output)
	output = &UpdateStackOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) UpdateStack(input *UpdateStackInput) (output *UpdateStackOutput, err error) {
	req, out := c.UpdateStackRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateStack *aws.Operation

// UpdateUserProfileRequest generates a request for the UpdateUserProfile operation.
func (c *OpsWorks) UpdateUserProfileRequest(input *UpdateUserProfileInput) (req *aws.Request, output *UpdateUserProfileOutput) {
	if opUpdateUserProfile == nil {
		opUpdateUserProfile = &aws.Operation{
			Name:       "UpdateUserProfile",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateUserProfile, input, output)
	output = &UpdateUserProfileOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) UpdateUserProfile(input *UpdateUserProfileInput) (output *UpdateUserProfileOutput, err error) {
	req, out := c.UpdateUserProfileRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateUserProfile *aws.Operation

// UpdateVolumeRequest generates a request for the UpdateVolume operation.
func (c *OpsWorks) UpdateVolumeRequest(input *UpdateVolumeInput) (req *aws.Request, output *UpdateVolumeOutput) {
	if opUpdateVolume == nil {
		opUpdateVolume = &aws.Operation{
			Name:       "UpdateVolume",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateVolume, input, output)
	output = &UpdateVolumeOutput{}
	req.Data = output
	return
}

func (c *OpsWorks) UpdateVolume(input *UpdateVolumeInput) (output *UpdateVolumeOutput, err error) {
	req, out := c.UpdateVolumeRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateVolume *aws.Operation

type App struct {
	AppID            *string                `locationName:"AppId" type:"string"`
	AppSource        *Source                `type:"structure"`
	Attributes       *map[string]*string    `type:"map"`
	CreatedAt        *string                `type:"string"`
	DataSources      []*DataSource          `type:"list"`
	Description      *string                `type:"string"`
	Domains          []*string              `type:"list"`
	EnableSSL        *bool                  `locationName:"EnableSsl" type:"boolean"`
	Environment      []*EnvironmentVariable `type:"list"`
	Name             *string                `type:"string"`
	SSLConfiguration *SSLConfiguration      `locationName:"SslConfiguration" type:"structure"`
	Shortname        *string                `type:"string"`
	StackID          *string                `locationName:"StackId" type:"string"`
	Type             *string                `type:"string"`

	metadataApp `json:"-", xml:"-"`
}

type metadataApp struct {
	SDKShapeTraits bool `type:"structure"`
}

type AssignInstanceInput struct {
	InstanceID *string   `locationName:"InstanceId" type:"string" required:"true"`
	LayerIDs   []*string `locationName:"LayerIds" type:"list" required:"true"`

	metadataAssignInstanceInput `json:"-", xml:"-"`
}

type metadataAssignInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AssignInstanceOutput struct {
	metadataAssignInstanceOutput `json:"-", xml:"-"`
}

type metadataAssignInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AssignVolumeInput struct {
	InstanceID *string `locationName:"InstanceId" type:"string"`
	VolumeID   *string `locationName:"VolumeId" type:"string" required:"true"`

	metadataAssignVolumeInput `json:"-", xml:"-"`
}

type metadataAssignVolumeInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AssignVolumeOutput struct {
	metadataAssignVolumeOutput `json:"-", xml:"-"`
}

type metadataAssignVolumeOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AssociateElasticIPInput struct {
	ElasticIP  *string `locationName:"ElasticIp" type:"string" required:"true"`
	InstanceID *string `locationName:"InstanceId" type:"string"`

	metadataAssociateElasticIPInput `json:"-", xml:"-"`
}

type metadataAssociateElasticIPInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AssociateElasticIPOutput struct {
	metadataAssociateElasticIPOutput `json:"-", xml:"-"`
}

type metadataAssociateElasticIPOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttachElasticLoadBalancerInput struct {
	ElasticLoadBalancerName *string `type:"string" required:"true"`
	LayerID                 *string `locationName:"LayerId" type:"string" required:"true"`

	metadataAttachElasticLoadBalancerInput `json:"-", xml:"-"`
}

type metadataAttachElasticLoadBalancerInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttachElasticLoadBalancerOutput struct {
	metadataAttachElasticLoadBalancerOutput `json:"-", xml:"-"`
}

type metadataAttachElasticLoadBalancerOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AutoScalingThresholds struct {
	CPUThreshold       *float64 `locationName:"CpuThreshold" type:"double"`
	IgnoreMetricsTime  *int64   `type:"integer"`
	InstanceCount      *int64   `type:"integer"`
	LoadThreshold      *float64 `type:"double"`
	MemoryThreshold    *float64 `type:"double"`
	ThresholdsWaitTime *int64   `type:"integer"`

	metadataAutoScalingThresholds `json:"-", xml:"-"`
}

type metadataAutoScalingThresholds struct {
	SDKShapeTraits bool `type:"structure"`
}

type ChefConfiguration struct {
	BerkshelfVersion *string `type:"string"`
	ManageBerkshelf  *bool   `type:"boolean"`

	metadataChefConfiguration `json:"-", xml:"-"`
}

type metadataChefConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type CloneStackInput struct {
	Attributes                *map[string]*string        `type:"map"`
	ChefConfiguration         *ChefConfiguration         `type:"structure"`
	CloneAppIDs               []*string                  `locationName:"CloneAppIds" type:"list"`
	ClonePermissions          *bool                      `type:"boolean"`
	ConfigurationManager      *StackConfigurationManager `type:"structure"`
	CustomCookbooksSource     *Source                    `type:"structure"`
	CustomJSON                *string                    `locationName:"CustomJson" type:"string"`
	DefaultAvailabilityZone   *string                    `type:"string"`
	DefaultInstanceProfileARN *string                    `locationName:"DefaultInstanceProfileArn" type:"string"`
	DefaultOs                 *string                    `type:"string"`
	DefaultRootDeviceType     *string                    `type:"string"`
	DefaultSSHKeyName         *string                    `locationName:"DefaultSshKeyName" type:"string"`
	DefaultSubnetID           *string                    `locationName:"DefaultSubnetId" type:"string"`
	HostnameTheme             *string                    `type:"string"`
	Name                      *string                    `type:"string"`
	Region                    *string                    `type:"string"`
	ServiceRoleARN            *string                    `locationName:"ServiceRoleArn" type:"string" required:"true"`
	SourceStackID             *string                    `locationName:"SourceStackId" type:"string" required:"true"`
	UseCustomCookbooks        *bool                      `type:"boolean"`
	UseOpsWorksSecurityGroups *bool                      `locationName:"UseOpsworksSecurityGroups" type:"boolean"`
	VPCID                     *string                    `locationName:"VpcId" type:"string"`

	metadataCloneStackInput `json:"-", xml:"-"`
}

type metadataCloneStackInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CloneStackOutput struct {
	StackID *string `locationName:"StackId" type:"string"`

	metadataCloneStackOutput `json:"-", xml:"-"`
}

type metadataCloneStackOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Command struct {
	AcknowledgedAt *string `type:"string"`
	CommandID      *string `locationName:"CommandId" type:"string"`
	CompletedAt    *string `type:"string"`
	CreatedAt      *string `type:"string"`
	DeploymentID   *string `locationName:"DeploymentId" type:"string"`
	ExitCode       *int64  `type:"integer"`
	InstanceID     *string `locationName:"InstanceId" type:"string"`
	LogURL         *string `locationName:"LogUrl" type:"string"`
	Status         *string `type:"string"`
	Type           *string `type:"string"`

	metadataCommand `json:"-", xml:"-"`
}

type metadataCommand struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateAppInput struct {
	AppSource        *Source                `type:"structure"`
	Attributes       *map[string]*string    `type:"map"`
	DataSources      []*DataSource          `type:"list"`
	Description      *string                `type:"string"`
	Domains          []*string              `type:"list"`
	EnableSSL        *bool                  `locationName:"EnableSsl" type:"boolean"`
	Environment      []*EnvironmentVariable `type:"list"`
	Name             *string                `type:"string" required:"true"`
	SSLConfiguration *SSLConfiguration      `locationName:"SslConfiguration" type:"structure"`
	Shortname        *string                `type:"string"`
	StackID          *string                `locationName:"StackId" type:"string" required:"true"`
	Type             *string                `type:"string" required:"true"`

	metadataCreateAppInput `json:"-", xml:"-"`
}

type metadataCreateAppInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateAppOutput struct {
	AppID *string `locationName:"AppId" type:"string"`

	metadataCreateAppOutput `json:"-", xml:"-"`
}

type metadataCreateAppOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDeploymentInput struct {
	AppID       *string            `locationName:"AppId" type:"string"`
	Command     *DeploymentCommand `type:"structure" required:"true"`
	Comment     *string            `type:"string"`
	CustomJSON  *string            `locationName:"CustomJson" type:"string"`
	InstanceIDs []*string          `locationName:"InstanceIds" type:"list"`
	StackID     *string            `locationName:"StackId" type:"string" required:"true"`

	metadataCreateDeploymentInput `json:"-", xml:"-"`
}

type metadataCreateDeploymentInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDeploymentOutput struct {
	DeploymentID *string `locationName:"DeploymentId" type:"string"`

	metadataCreateDeploymentOutput `json:"-", xml:"-"`
}

type metadataCreateDeploymentOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateInstanceInput struct {
	AMIID                *string   `locationName:"AmiId" type:"string"`
	Architecture         *string   `type:"string"`
	AutoScalingType      *string   `type:"string"`
	AvailabilityZone     *string   `type:"string"`
	EBSOptimized         *bool     `locationName:"EbsOptimized" type:"boolean"`
	Hostname             *string   `type:"string"`
	InstallUpdatesOnBoot *bool     `type:"boolean"`
	InstanceType         *string   `type:"string" required:"true"`
	LayerIDs             []*string `locationName:"LayerIds" type:"list" required:"true"`
	Os                   *string   `type:"string"`
	RootDeviceType       *string   `type:"string"`
	SSHKeyName           *string   `locationName:"SshKeyName" type:"string"`
	StackID              *string   `locationName:"StackId" type:"string" required:"true"`
	SubnetID             *string   `locationName:"SubnetId" type:"string"`
	VirtualizationType   *string   `type:"string"`

	metadataCreateInstanceInput `json:"-", xml:"-"`
}

type metadataCreateInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateInstanceOutput struct {
	InstanceID *string `locationName:"InstanceId" type:"string"`

	metadataCreateInstanceOutput `json:"-", xml:"-"`
}

type metadataCreateInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateLayerInput struct {
	Attributes                  *map[string]*string          `type:"map"`
	AutoAssignElasticIPs        *bool                        `locationName:"AutoAssignElasticIps" type:"boolean"`
	AutoAssignPublicIPs         *bool                        `locationName:"AutoAssignPublicIps" type:"boolean"`
	CustomInstanceProfileARN    *string                      `locationName:"CustomInstanceProfileArn" type:"string"`
	CustomRecipes               *Recipes                     `type:"structure"`
	CustomSecurityGroupIDs      []*string                    `locationName:"CustomSecurityGroupIds" type:"list"`
	EnableAutoHealing           *bool                        `type:"boolean"`
	InstallUpdatesOnBoot        *bool                        `type:"boolean"`
	LifecycleEventConfiguration *LifecycleEventConfiguration `type:"structure"`
	Name                        *string                      `type:"string" required:"true"`
	Packages                    []*string                    `type:"list"`
	Shortname                   *string                      `type:"string" required:"true"`
	StackID                     *string                      `locationName:"StackId" type:"string" required:"true"`
	Type                        *string                      `type:"string" required:"true"`
	UseEBSOptimizedInstances    *bool                        `locationName:"UseEbsOptimizedInstances" type:"boolean"`
	VolumeConfigurations        []*VolumeConfiguration       `type:"list"`

	metadataCreateLayerInput `json:"-", xml:"-"`
}

type metadataCreateLayerInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateLayerOutput struct {
	LayerID *string `locationName:"LayerId" type:"string"`

	metadataCreateLayerOutput `json:"-", xml:"-"`
}

type metadataCreateLayerOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateStackInput struct {
	Attributes                *map[string]*string        `type:"map"`
	ChefConfiguration         *ChefConfiguration         `type:"structure"`
	ConfigurationManager      *StackConfigurationManager `type:"structure"`
	CustomCookbooksSource     *Source                    `type:"structure"`
	CustomJSON                *string                    `locationName:"CustomJson" type:"string"`
	DefaultAvailabilityZone   *string                    `type:"string"`
	DefaultInstanceProfileARN *string                    `locationName:"DefaultInstanceProfileArn" type:"string" required:"true"`
	DefaultOs                 *string                    `type:"string"`
	DefaultRootDeviceType     *string                    `type:"string"`
	DefaultSSHKeyName         *string                    `locationName:"DefaultSshKeyName" type:"string"`
	DefaultSubnetID           *string                    `locationName:"DefaultSubnetId" type:"string"`
	HostnameTheme             *string                    `type:"string"`
	Name                      *string                    `type:"string" required:"true"`
	Region                    *string                    `type:"string" required:"true"`
	ServiceRoleARN            *string                    `locationName:"ServiceRoleArn" type:"string" required:"true"`
	UseCustomCookbooks        *bool                      `type:"boolean"`
	UseOpsWorksSecurityGroups *bool                      `locationName:"UseOpsworksSecurityGroups" type:"boolean"`
	VPCID                     *string                    `locationName:"VpcId" type:"string"`

	metadataCreateStackInput `json:"-", xml:"-"`
}

type metadataCreateStackInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateStackOutput struct {
	StackID *string `locationName:"StackId" type:"string"`

	metadataCreateStackOutput `json:"-", xml:"-"`
}

type metadataCreateStackOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateUserProfileInput struct {
	AllowSelfManagement *bool   `type:"boolean"`
	IAMUserARN          *string `locationName:"IamUserArn" type:"string" required:"true"`
	SSHPublicKey        *string `locationName:"SshPublicKey" type:"string"`
	SSHUsername         *string `locationName:"SshUsername" type:"string"`

	metadataCreateUserProfileInput `json:"-", xml:"-"`
}

type metadataCreateUserProfileInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateUserProfileOutput struct {
	IAMUserARN *string `locationName:"IamUserArn" type:"string"`

	metadataCreateUserProfileOutput `json:"-", xml:"-"`
}

type metadataCreateUserProfileOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DataSource struct {
	ARN          *string `locationName:"Arn" type:"string"`
	DatabaseName *string `type:"string"`
	Type         *string `type:"string"`

	metadataDataSource `json:"-", xml:"-"`
}

type metadataDataSource struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteAppInput struct {
	AppID *string `locationName:"AppId" type:"string" required:"true"`

	metadataDeleteAppInput `json:"-", xml:"-"`
}

type metadataDeleteAppInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteAppOutput struct {
	metadataDeleteAppOutput `json:"-", xml:"-"`
}

type metadataDeleteAppOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteInstanceInput struct {
	DeleteElasticIP *bool   `locationName:"DeleteElasticIp" type:"boolean"`
	DeleteVolumes   *bool   `type:"boolean"`
	InstanceID      *string `locationName:"InstanceId" type:"string" required:"true"`

	metadataDeleteInstanceInput `json:"-", xml:"-"`
}

type metadataDeleteInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteInstanceOutput struct {
	metadataDeleteInstanceOutput `json:"-", xml:"-"`
}

type metadataDeleteInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteLayerInput struct {
	LayerID *string `locationName:"LayerId" type:"string" required:"true"`

	metadataDeleteLayerInput `json:"-", xml:"-"`
}

type metadataDeleteLayerInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteLayerOutput struct {
	metadataDeleteLayerOutput `json:"-", xml:"-"`
}

type metadataDeleteLayerOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteStackInput struct {
	StackID *string `locationName:"StackId" type:"string" required:"true"`

	metadataDeleteStackInput `json:"-", xml:"-"`
}

type metadataDeleteStackInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteStackOutput struct {
	metadataDeleteStackOutput `json:"-", xml:"-"`
}

type metadataDeleteStackOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteUserProfileInput struct {
	IAMUserARN *string `locationName:"IamUserArn" type:"string" required:"true"`

	metadataDeleteUserProfileInput `json:"-", xml:"-"`
}

type metadataDeleteUserProfileInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteUserProfileOutput struct {
	metadataDeleteUserProfileOutput `json:"-", xml:"-"`
}

type metadataDeleteUserProfileOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Deployment struct {
	AppID        *string            `locationName:"AppId" type:"string"`
	Command      *DeploymentCommand `type:"structure"`
	Comment      *string            `type:"string"`
	CompletedAt  *string            `type:"string"`
	CreatedAt    *string            `type:"string"`
	CustomJSON   *string            `locationName:"CustomJson" type:"string"`
	DeploymentID *string            `locationName:"DeploymentId" type:"string"`
	Duration     *int64             `type:"integer"`
	IAMUserARN   *string            `locationName:"IamUserArn" type:"string"`
	InstanceIDs  []*string          `locationName:"InstanceIds" type:"list"`
	StackID      *string            `locationName:"StackId" type:"string"`
	Status       *string            `type:"string"`

	metadataDeployment `json:"-", xml:"-"`
}

type metadataDeployment struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeploymentCommand struct {
	Args *map[string][]*string `type:"map"`
	Name *string               `type:"string" required:"true"`

	metadataDeploymentCommand `json:"-", xml:"-"`
}

type metadataDeploymentCommand struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeregisterElasticIPInput struct {
	ElasticIP *string `locationName:"ElasticIp" type:"string" required:"true"`

	metadataDeregisterElasticIPInput `json:"-", xml:"-"`
}

type metadataDeregisterElasticIPInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeregisterElasticIPOutput struct {
	metadataDeregisterElasticIPOutput `json:"-", xml:"-"`
}

type metadataDeregisterElasticIPOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeregisterInstanceInput struct {
	InstanceID *string `locationName:"InstanceId" type:"string" required:"true"`

	metadataDeregisterInstanceInput `json:"-", xml:"-"`
}

type metadataDeregisterInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeregisterInstanceOutput struct {
	metadataDeregisterInstanceOutput `json:"-", xml:"-"`
}

type metadataDeregisterInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeregisterRDSDBInstanceInput struct {
	RDSDBInstanceARN *string `locationName:"RdsDbInstanceArn" type:"string" required:"true"`

	metadataDeregisterRDSDBInstanceInput `json:"-", xml:"-"`
}

type metadataDeregisterRDSDBInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeregisterRDSDBInstanceOutput struct {
	metadataDeregisterRDSDBInstanceOutput `json:"-", xml:"-"`
}

type metadataDeregisterRDSDBInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeregisterVolumeInput struct {
	VolumeID *string `locationName:"VolumeId" type:"string" required:"true"`

	metadataDeregisterVolumeInput `json:"-", xml:"-"`
}

type metadataDeregisterVolumeInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeregisterVolumeOutput struct {
	metadataDeregisterVolumeOutput `json:"-", xml:"-"`
}

type metadataDeregisterVolumeOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAppsInput struct {
	AppIDs  []*string `locationName:"AppIds" type:"list"`
	StackID *string   `locationName:"StackId" type:"string"`

	metadataDescribeAppsInput `json:"-", xml:"-"`
}

type metadataDescribeAppsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAppsOutput struct {
	Apps []*App `type:"list"`

	metadataDescribeAppsOutput `json:"-", xml:"-"`
}

type metadataDescribeAppsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeCommandsInput struct {
	CommandIDs   []*string `locationName:"CommandIds" type:"list"`
	DeploymentID *string   `locationName:"DeploymentId" type:"string"`
	InstanceID   *string   `locationName:"InstanceId" type:"string"`

	metadataDescribeCommandsInput `json:"-", xml:"-"`
}

type metadataDescribeCommandsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeCommandsOutput struct {
	Commands []*Command `type:"list"`

	metadataDescribeCommandsOutput `json:"-", xml:"-"`
}

type metadataDescribeCommandsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDeploymentsInput struct {
	AppID         *string   `locationName:"AppId" type:"string"`
	DeploymentIDs []*string `locationName:"DeploymentIds" type:"list"`
	StackID       *string   `locationName:"StackId" type:"string"`

	metadataDescribeDeploymentsInput `json:"-", xml:"-"`
}

type metadataDescribeDeploymentsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDeploymentsOutput struct {
	Deployments []*Deployment `type:"list"`

	metadataDescribeDeploymentsOutput `json:"-", xml:"-"`
}

type metadataDescribeDeploymentsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeElasticIPsInput struct {
	IPs        []*string `locationName:"Ips" type:"list"`
	InstanceID *string   `locationName:"InstanceId" type:"string"`
	StackID    *string   `locationName:"StackId" type:"string"`

	metadataDescribeElasticIPsInput `json:"-", xml:"-"`
}

type metadataDescribeElasticIPsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeElasticIPsOutput struct {
	ElasticIPs []*ElasticIP `locationName:"ElasticIps" type:"list"`

	metadataDescribeElasticIPsOutput `json:"-", xml:"-"`
}

type metadataDescribeElasticIPsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeElasticLoadBalancersInput struct {
	LayerIDs []*string `locationName:"LayerIds" type:"list"`
	StackID  *string   `locationName:"StackId" type:"string"`

	metadataDescribeElasticLoadBalancersInput `json:"-", xml:"-"`
}

type metadataDescribeElasticLoadBalancersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeElasticLoadBalancersOutput struct {
	ElasticLoadBalancers []*ElasticLoadBalancer `type:"list"`

	metadataDescribeElasticLoadBalancersOutput `json:"-", xml:"-"`
}

type metadataDescribeElasticLoadBalancersOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeInstancesInput struct {
	InstanceIDs []*string `locationName:"InstanceIds" type:"list"`
	LayerID     *string   `locationName:"LayerId" type:"string"`
	StackID     *string   `locationName:"StackId" type:"string"`

	metadataDescribeInstancesInput `json:"-", xml:"-"`
}

type metadataDescribeInstancesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeInstancesOutput struct {
	Instances []*Instance `type:"list"`

	metadataDescribeInstancesOutput `json:"-", xml:"-"`
}

type metadataDescribeInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeLayersInput struct {
	LayerIDs []*string `locationName:"LayerIds" type:"list"`
	StackID  *string   `locationName:"StackId" type:"string"`

	metadataDescribeLayersInput `json:"-", xml:"-"`
}

type metadataDescribeLayersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeLayersOutput struct {
	Layers []*Layer `type:"list"`

	metadataDescribeLayersOutput `json:"-", xml:"-"`
}

type metadataDescribeLayersOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeLoadBasedAutoScalingInput struct {
	LayerIDs []*string `locationName:"LayerIds" type:"list" required:"true"`

	metadataDescribeLoadBasedAutoScalingInput `json:"-", xml:"-"`
}

type metadataDescribeLoadBasedAutoScalingInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeLoadBasedAutoScalingOutput struct {
	LoadBasedAutoScalingConfigurations []*LoadBasedAutoScalingConfiguration `type:"list"`

	metadataDescribeLoadBasedAutoScalingOutput `json:"-", xml:"-"`
}

type metadataDescribeLoadBasedAutoScalingOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeMyUserProfileInput struct {
	metadataDescribeMyUserProfileInput `json:"-", xml:"-"`
}

type metadataDescribeMyUserProfileInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeMyUserProfileOutput struct {
	UserProfile *SelfUserProfile `type:"structure"`

	metadataDescribeMyUserProfileOutput `json:"-", xml:"-"`
}

type metadataDescribeMyUserProfileOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribePermissionsInput struct {
	IAMUserARN *string `locationName:"IamUserArn" type:"string"`
	StackID    *string `locationName:"StackId" type:"string"`

	metadataDescribePermissionsInput `json:"-", xml:"-"`
}

type metadataDescribePermissionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribePermissionsOutput struct {
	Permissions []*Permission `type:"list"`

	metadataDescribePermissionsOutput `json:"-", xml:"-"`
}

type metadataDescribePermissionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeRAIDArraysInput struct {
	InstanceID   *string   `locationName:"InstanceId" type:"string"`
	RAIDArrayIDs []*string `locationName:"RaidArrayIds" type:"list"`
	StackID      *string   `locationName:"StackId" type:"string"`

	metadataDescribeRAIDArraysInput `json:"-", xml:"-"`
}

type metadataDescribeRAIDArraysInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeRAIDArraysOutput struct {
	RAIDArrays []*RAIDArray `locationName:"RaidArrays" type:"list"`

	metadataDescribeRAIDArraysOutput `json:"-", xml:"-"`
}

type metadataDescribeRAIDArraysOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeRDSDBInstancesInput struct {
	RDSDBInstanceARNs []*string `locationName:"RdsDbInstanceArns" type:"list"`
	StackID           *string   `locationName:"StackId" type:"string" required:"true"`

	metadataDescribeRDSDBInstancesInput `json:"-", xml:"-"`
}

type metadataDescribeRDSDBInstancesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeRDSDBInstancesOutput struct {
	RDSDBInstances []*RDSDBInstance `locationName:"RdsDbInstances" type:"list"`

	metadataDescribeRDSDBInstancesOutput `json:"-", xml:"-"`
}

type metadataDescribeRDSDBInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeServiceErrorsInput struct {
	InstanceID      *string   `locationName:"InstanceId" type:"string"`
	ServiceErrorIDs []*string `locationName:"ServiceErrorIds" type:"list"`
	StackID         *string   `locationName:"StackId" type:"string"`

	metadataDescribeServiceErrorsInput `json:"-", xml:"-"`
}

type metadataDescribeServiceErrorsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeServiceErrorsOutput struct {
	ServiceErrors []*ServiceError `type:"list"`

	metadataDescribeServiceErrorsOutput `json:"-", xml:"-"`
}

type metadataDescribeServiceErrorsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeStackProvisioningParametersInput struct {
	StackID *string `locationName:"StackId" type:"string" required:"true"`

	metadataDescribeStackProvisioningParametersInput `json:"-", xml:"-"`
}

type metadataDescribeStackProvisioningParametersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeStackProvisioningParametersOutput struct {
	AgentInstallerURL *string             `locationName:"AgentInstallerUrl" type:"string"`
	Parameters        *map[string]*string `type:"map"`

	metadataDescribeStackProvisioningParametersOutput `json:"-", xml:"-"`
}

type metadataDescribeStackProvisioningParametersOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeStackSummaryInput struct {
	StackID *string `locationName:"StackId" type:"string" required:"true"`

	metadataDescribeStackSummaryInput `json:"-", xml:"-"`
}

type metadataDescribeStackSummaryInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeStackSummaryOutput struct {
	StackSummary *StackSummary `type:"structure"`

	metadataDescribeStackSummaryOutput `json:"-", xml:"-"`
}

type metadataDescribeStackSummaryOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeStacksInput struct {
	StackIDs []*string `locationName:"StackIds" type:"list"`

	metadataDescribeStacksInput `json:"-", xml:"-"`
}

type metadataDescribeStacksInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeStacksOutput struct {
	Stacks []*Stack `type:"list"`

	metadataDescribeStacksOutput `json:"-", xml:"-"`
}

type metadataDescribeStacksOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTimeBasedAutoScalingInput struct {
	InstanceIDs []*string `locationName:"InstanceIds" type:"list" required:"true"`

	metadataDescribeTimeBasedAutoScalingInput `json:"-", xml:"-"`
}

type metadataDescribeTimeBasedAutoScalingInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTimeBasedAutoScalingOutput struct {
	TimeBasedAutoScalingConfigurations []*TimeBasedAutoScalingConfiguration `type:"list"`

	metadataDescribeTimeBasedAutoScalingOutput `json:"-", xml:"-"`
}

type metadataDescribeTimeBasedAutoScalingOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeUserProfilesInput struct {
	IAMUserARNs []*string `locationName:"IamUserArns" type:"list"`

	metadataDescribeUserProfilesInput `json:"-", xml:"-"`
}

type metadataDescribeUserProfilesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeUserProfilesOutput struct {
	UserProfiles []*UserProfile `type:"list"`

	metadataDescribeUserProfilesOutput `json:"-", xml:"-"`
}

type metadataDescribeUserProfilesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVolumesInput struct {
	InstanceID  *string   `locationName:"InstanceId" type:"string"`
	RAIDArrayID *string   `locationName:"RaidArrayId" type:"string"`
	StackID     *string   `locationName:"StackId" type:"string"`
	VolumeIDs   []*string `locationName:"VolumeIds" type:"list"`

	metadataDescribeVolumesInput `json:"-", xml:"-"`
}

type metadataDescribeVolumesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVolumesOutput struct {
	Volumes []*Volume `type:"list"`

	metadataDescribeVolumesOutput `json:"-", xml:"-"`
}

type metadataDescribeVolumesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DetachElasticLoadBalancerInput struct {
	ElasticLoadBalancerName *string `type:"string" required:"true"`
	LayerID                 *string `locationName:"LayerId" type:"string" required:"true"`

	metadataDetachElasticLoadBalancerInput `json:"-", xml:"-"`
}

type metadataDetachElasticLoadBalancerInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DetachElasticLoadBalancerOutput struct {
	metadataDetachElasticLoadBalancerOutput `json:"-", xml:"-"`
}

type metadataDetachElasticLoadBalancerOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DisassociateElasticIPInput struct {
	ElasticIP *string `locationName:"ElasticIp" type:"string" required:"true"`

	metadataDisassociateElasticIPInput `json:"-", xml:"-"`
}

type metadataDisassociateElasticIPInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DisassociateElasticIPOutput struct {
	metadataDisassociateElasticIPOutput `json:"-", xml:"-"`
}

type metadataDisassociateElasticIPOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ElasticIP struct {
	Domain     *string `type:"string"`
	IP         *string `locationName:"Ip" type:"string"`
	InstanceID *string `locationName:"InstanceId" type:"string"`
	Name       *string `type:"string"`
	Region     *string `type:"string"`

	metadataElasticIP `json:"-", xml:"-"`
}

type metadataElasticIP struct {
	SDKShapeTraits bool `type:"structure"`
}

type ElasticLoadBalancer struct {
	AvailabilityZones       []*string `type:"list"`
	DNSName                 *string   `locationName:"DnsName" type:"string"`
	EC2InstanceIDs          []*string `locationName:"Ec2InstanceIds" type:"list"`
	ElasticLoadBalancerName *string   `type:"string"`
	LayerID                 *string   `locationName:"LayerId" type:"string"`
	Region                  *string   `type:"string"`
	StackID                 *string   `locationName:"StackId" type:"string"`
	SubnetIDs               []*string `locationName:"SubnetIds" type:"list"`
	VPCID                   *string   `locationName:"VpcId" type:"string"`

	metadataElasticLoadBalancer `json:"-", xml:"-"`
}

type metadataElasticLoadBalancer struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnvironmentVariable struct {
	Key    *string `type:"string" required:"true"`
	Secure *bool   `type:"boolean"`
	Value  *string `type:"string" required:"true"`

	metadataEnvironmentVariable `json:"-", xml:"-"`
}

type metadataEnvironmentVariable struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetHostnameSuggestionInput struct {
	LayerID *string `locationName:"LayerId" type:"string" required:"true"`

	metadataGetHostnameSuggestionInput `json:"-", xml:"-"`
}

type metadataGetHostnameSuggestionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetHostnameSuggestionOutput struct {
	Hostname *string `type:"string"`
	LayerID  *string `locationName:"LayerId" type:"string"`

	metadataGetHostnameSuggestionOutput `json:"-", xml:"-"`
}

type metadataGetHostnameSuggestionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Instance struct {
	AMIID                    *string     `locationName:"AmiId" type:"string"`
	Architecture             *string     `type:"string"`
	AutoScalingType          *string     `type:"string"`
	AvailabilityZone         *string     `type:"string"`
	CreatedAt                *string     `type:"string"`
	EBSOptimized             *bool       `locationName:"EbsOptimized" type:"boolean"`
	EC2InstanceID            *string     `locationName:"Ec2InstanceId" type:"string"`
	ElasticIP                *string     `locationName:"ElasticIp" type:"string"`
	Hostname                 *string     `type:"string"`
	InfrastructureClass      *string     `type:"string"`
	InstallUpdatesOnBoot     *bool       `type:"boolean"`
	InstanceID               *string     `locationName:"InstanceId" type:"string"`
	InstanceProfileARN       *string     `locationName:"InstanceProfileArn" type:"string"`
	InstanceType             *string     `type:"string"`
	LastServiceErrorID       *string     `locationName:"LastServiceErrorId" type:"string"`
	LayerIDs                 []*string   `locationName:"LayerIds" type:"list"`
	Os                       *string     `type:"string"`
	PrivateDNS               *string     `locationName:"PrivateDns" type:"string"`
	PrivateIP                *string     `locationName:"PrivateIp" type:"string"`
	PublicDNS                *string     `locationName:"PublicDns" type:"string"`
	PublicIP                 *string     `locationName:"PublicIp" type:"string"`
	RegisteredBy             *string     `type:"string"`
	ReportedOs               *ReportedOs `type:"structure"`
	RootDeviceType           *string     `type:"string"`
	RootDeviceVolumeID       *string     `locationName:"RootDeviceVolumeId" type:"string"`
	SSHHostDSAKeyFingerprint *string     `locationName:"SshHostDsaKeyFingerprint" type:"string"`
	SSHHostRSAKeyFingerprint *string     `locationName:"SshHostRsaKeyFingerprint" type:"string"`
	SSHKeyName               *string     `locationName:"SshKeyName" type:"string"`
	SecurityGroupIDs         []*string   `locationName:"SecurityGroupIds" type:"list"`
	StackID                  *string     `locationName:"StackId" type:"string"`
	Status                   *string     `type:"string"`
	SubnetID                 *string     `locationName:"SubnetId" type:"string"`
	VirtualizationType       *string     `type:"string"`

	metadataInstance `json:"-", xml:"-"`
}

type metadataInstance struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceIdentity struct {
	Document  *string `type:"string"`
	Signature *string `type:"string"`

	metadataInstanceIdentity `json:"-", xml:"-"`
}

type metadataInstanceIdentity struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstancesCount struct {
	Assigning      *int64 `type:"integer"`
	Booting        *int64 `type:"integer"`
	ConnectionLost *int64 `type:"integer"`
	Deregistering  *int64 `type:"integer"`
	Online         *int64 `type:"integer"`
	Pending        *int64 `type:"integer"`
	Rebooting      *int64 `type:"integer"`
	Registered     *int64 `type:"integer"`
	Registering    *int64 `type:"integer"`
	Requested      *int64 `type:"integer"`
	RunningSetup   *int64 `type:"integer"`
	SetupFailed    *int64 `type:"integer"`
	ShuttingDown   *int64 `type:"integer"`
	StartFailed    *int64 `type:"integer"`
	Stopped        *int64 `type:"integer"`
	Stopping       *int64 `type:"integer"`
	Terminated     *int64 `type:"integer"`
	Terminating    *int64 `type:"integer"`
	Unassigning    *int64 `type:"integer"`

	metadataInstancesCount `json:"-", xml:"-"`
}

type metadataInstancesCount struct {
	SDKShapeTraits bool `type:"structure"`
}

type Layer struct {
	Attributes                  *map[string]*string          `type:"map"`
	AutoAssignElasticIPs        *bool                        `locationName:"AutoAssignElasticIps" type:"boolean"`
	AutoAssignPublicIPs         *bool                        `locationName:"AutoAssignPublicIps" type:"boolean"`
	CreatedAt                   *string                      `type:"string"`
	CustomInstanceProfileARN    *string                      `locationName:"CustomInstanceProfileArn" type:"string"`
	CustomRecipes               *Recipes                     `type:"structure"`
	CustomSecurityGroupIDs      []*string                    `locationName:"CustomSecurityGroupIds" type:"list"`
	DefaultRecipes              *Recipes                     `type:"structure"`
	DefaultSecurityGroupNames   []*string                    `type:"list"`
	EnableAutoHealing           *bool                        `type:"boolean"`
	InstallUpdatesOnBoot        *bool                        `type:"boolean"`
	LayerID                     *string                      `locationName:"LayerId" type:"string"`
	LifecycleEventConfiguration *LifecycleEventConfiguration `type:"structure"`
	Name                        *string                      `type:"string"`
	Packages                    []*string                    `type:"list"`
	Shortname                   *string                      `type:"string"`
	StackID                     *string                      `locationName:"StackId" type:"string"`
	Type                        *string                      `type:"string"`
	UseEBSOptimizedInstances    *bool                        `locationName:"UseEbsOptimizedInstances" type:"boolean"`
	VolumeConfigurations        []*VolumeConfiguration       `type:"list"`

	metadataLayer `json:"-", xml:"-"`
}

type metadataLayer struct {
	SDKShapeTraits bool `type:"structure"`
}

type LifecycleEventConfiguration struct {
	Shutdown *ShutdownEventConfiguration `type:"structure"`

	metadataLifecycleEventConfiguration `json:"-", xml:"-"`
}

type metadataLifecycleEventConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type LoadBasedAutoScalingConfiguration struct {
	DownScaling *AutoScalingThresholds `type:"structure"`
	Enable      *bool                  `type:"boolean"`
	LayerID     *string                `locationName:"LayerId" type:"string"`
	UpScaling   *AutoScalingThresholds `type:"structure"`

	metadataLoadBasedAutoScalingConfiguration `json:"-", xml:"-"`
}

type metadataLoadBasedAutoScalingConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type Permission struct {
	AllowSSH   *bool   `locationName:"AllowSsh" type:"boolean"`
	AllowSudo  *bool   `type:"boolean"`
	IAMUserARN *string `locationName:"IamUserArn" type:"string"`
	Level      *string `type:"string"`
	StackID    *string `locationName:"StackId" type:"string"`

	metadataPermission `json:"-", xml:"-"`
}

type metadataPermission struct {
	SDKShapeTraits bool `type:"structure"`
}

type RAIDArray struct {
	AvailabilityZone *string `type:"string"`
	CreatedAt        *string `type:"string"`
	Device           *string `type:"string"`
	IOPS             *int64  `locationName:"Iops" type:"integer"`
	InstanceID       *string `locationName:"InstanceId" type:"string"`
	MountPoint       *string `type:"string"`
	Name             *string `type:"string"`
	NumberOfDisks    *int64  `type:"integer"`
	RAIDArrayID      *string `locationName:"RaidArrayId" type:"string"`
	RAIDLevel        *int64  `locationName:"RaidLevel" type:"integer"`
	Size             *int64  `type:"integer"`
	StackID          *string `locationName:"StackId" type:"string"`
	VolumeType       *string `type:"string"`

	metadataRAIDArray `json:"-", xml:"-"`
}

type metadataRAIDArray struct {
	SDKShapeTraits bool `type:"structure"`
}

type RDSDBInstance struct {
	Address              *string `type:"string"`
	DBInstanceIdentifier *string `locationName:"DbInstanceIdentifier" type:"string"`
	DBPassword           *string `locationName:"DbPassword" type:"string"`
	DBUser               *string `locationName:"DbUser" type:"string"`
	Engine               *string `type:"string"`
	MissingOnRDS         *bool   `locationName:"MissingOnRds" type:"boolean"`
	RDSDBInstanceARN     *string `locationName:"RdsDbInstanceArn" type:"string"`
	Region               *string `type:"string"`
	StackID              *string `locationName:"StackId" type:"string"`

	metadataRDSDBInstance `json:"-", xml:"-"`
}

type metadataRDSDBInstance struct {
	SDKShapeTraits bool `type:"structure"`
}

type RebootInstanceInput struct {
	InstanceID *string `locationName:"InstanceId" type:"string" required:"true"`

	metadataRebootInstanceInput `json:"-", xml:"-"`
}

type metadataRebootInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RebootInstanceOutput struct {
	metadataRebootInstanceOutput `json:"-", xml:"-"`
}

type metadataRebootInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Recipes struct {
	Configure []*string `type:"list"`
	Deploy    []*string `type:"list"`
	Setup     []*string `type:"list"`
	Shutdown  []*string `type:"list"`
	Undeploy  []*string `type:"list"`

	metadataRecipes `json:"-", xml:"-"`
}

type metadataRecipes struct {
	SDKShapeTraits bool `type:"structure"`
}

type RegisterElasticIPInput struct {
	ElasticIP *string `locationName:"ElasticIp" type:"string" required:"true"`
	StackID   *string `locationName:"StackId" type:"string" required:"true"`

	metadataRegisterElasticIPInput `json:"-", xml:"-"`
}

type metadataRegisterElasticIPInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RegisterElasticIPOutput struct {
	ElasticIP *string `locationName:"ElasticIp" type:"string"`

	metadataRegisterElasticIPOutput `json:"-", xml:"-"`
}

type metadataRegisterElasticIPOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RegisterInstanceInput struct {
	Hostname                *string           `type:"string"`
	InstanceIdentity        *InstanceIdentity `type:"structure"`
	PrivateIP               *string           `locationName:"PrivateIp" type:"string"`
	PublicIP                *string           `locationName:"PublicIp" type:"string"`
	RSAPublicKey            *string           `locationName:"RsaPublicKey" type:"string"`
	RSAPublicKeyFingerprint *string           `locationName:"RsaPublicKeyFingerprint" type:"string"`
	StackID                 *string           `locationName:"StackId" type:"string" required:"true"`

	metadataRegisterInstanceInput `json:"-", xml:"-"`
}

type metadataRegisterInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RegisterInstanceOutput struct {
	InstanceID *string `locationName:"InstanceId" type:"string"`

	metadataRegisterInstanceOutput `json:"-", xml:"-"`
}

type metadataRegisterInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RegisterRDSDBInstanceInput struct {
	DBPassword       *string `locationName:"DbPassword" type:"string" required:"true"`
	DBUser           *string `locationName:"DbUser" type:"string" required:"true"`
	RDSDBInstanceARN *string `locationName:"RdsDbInstanceArn" type:"string" required:"true"`
	StackID          *string `locationName:"StackId" type:"string" required:"true"`

	metadataRegisterRDSDBInstanceInput `json:"-", xml:"-"`
}

type metadataRegisterRDSDBInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RegisterRDSDBInstanceOutput struct {
	metadataRegisterRDSDBInstanceOutput `json:"-", xml:"-"`
}

type metadataRegisterRDSDBInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RegisterVolumeInput struct {
	EC2VolumeID *string `locationName:"Ec2VolumeId" type:"string"`
	StackID     *string `locationName:"StackId" type:"string" required:"true"`

	metadataRegisterVolumeInput `json:"-", xml:"-"`
}

type metadataRegisterVolumeInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RegisterVolumeOutput struct {
	VolumeID *string `locationName:"VolumeId" type:"string"`

	metadataRegisterVolumeOutput `json:"-", xml:"-"`
}

type metadataRegisterVolumeOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReportedOs struct {
	Family  *string `type:"string"`
	Name    *string `type:"string"`
	Version *string `type:"string"`

	metadataReportedOs `json:"-", xml:"-"`
}

type metadataReportedOs struct {
	SDKShapeTraits bool `type:"structure"`
}

type SSLConfiguration struct {
	Certificate *string `type:"string" required:"true"`
	Chain       *string `type:"string"`
	PrivateKey  *string `type:"string" required:"true"`

	metadataSSLConfiguration `json:"-", xml:"-"`
}

type metadataSSLConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type SelfUserProfile struct {
	IAMUserARN   *string `locationName:"IamUserArn" type:"string"`
	Name         *string `type:"string"`
	SSHPublicKey *string `locationName:"SshPublicKey" type:"string"`
	SSHUsername  *string `locationName:"SshUsername" type:"string"`

	metadataSelfUserProfile `json:"-", xml:"-"`
}

type metadataSelfUserProfile struct {
	SDKShapeTraits bool `type:"structure"`
}

type ServiceError struct {
	CreatedAt      *string `type:"string"`
	InstanceID     *string `locationName:"InstanceId" type:"string"`
	Message        *string `type:"string"`
	ServiceErrorID *string `locationName:"ServiceErrorId" type:"string"`
	StackID        *string `locationName:"StackId" type:"string"`
	Type           *string `type:"string"`

	metadataServiceError `json:"-", xml:"-"`
}

type metadataServiceError struct {
	SDKShapeTraits bool `type:"structure"`
}

type SetLoadBasedAutoScalingInput struct {
	DownScaling *AutoScalingThresholds `type:"structure"`
	Enable      *bool                  `type:"boolean"`
	LayerID     *string                `locationName:"LayerId" type:"string" required:"true"`
	UpScaling   *AutoScalingThresholds `type:"structure"`

	metadataSetLoadBasedAutoScalingInput `json:"-", xml:"-"`
}

type metadataSetLoadBasedAutoScalingInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type SetLoadBasedAutoScalingOutput struct {
	metadataSetLoadBasedAutoScalingOutput `json:"-", xml:"-"`
}

type metadataSetLoadBasedAutoScalingOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type SetPermissionInput struct {
	AllowSSH   *bool   `locationName:"AllowSsh" type:"boolean"`
	AllowSudo  *bool   `type:"boolean"`
	IAMUserARN *string `locationName:"IamUserArn" type:"string" required:"true"`
	Level      *string `type:"string"`
	StackID    *string `locationName:"StackId" type:"string" required:"true"`

	metadataSetPermissionInput `json:"-", xml:"-"`
}

type metadataSetPermissionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type SetPermissionOutput struct {
	metadataSetPermissionOutput `json:"-", xml:"-"`
}

type metadataSetPermissionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type SetTimeBasedAutoScalingInput struct {
	AutoScalingSchedule *WeeklyAutoScalingSchedule `type:"structure"`
	InstanceID          *string                    `locationName:"InstanceId" type:"string" required:"true"`

	metadataSetTimeBasedAutoScalingInput `json:"-", xml:"-"`
}

type metadataSetTimeBasedAutoScalingInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type SetTimeBasedAutoScalingOutput struct {
	metadataSetTimeBasedAutoScalingOutput `json:"-", xml:"-"`
}

type metadataSetTimeBasedAutoScalingOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ShutdownEventConfiguration struct {
	DelayUntilELBConnectionsDrained *bool  `locationName:"DelayUntilElbConnectionsDrained" type:"boolean"`
	ExecutionTimeout                *int64 `type:"integer"`

	metadataShutdownEventConfiguration `json:"-", xml:"-"`
}

type metadataShutdownEventConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type Source struct {
	Password *string `type:"string"`
	Revision *string `type:"string"`
	SSHKey   *string `locationName:"SshKey" type:"string"`
	Type     *string `type:"string"`
	URL      *string `locationName:"Url" type:"string"`
	Username *string `type:"string"`

	metadataSource `json:"-", xml:"-"`
}

type metadataSource struct {
	SDKShapeTraits bool `type:"structure"`
}

type Stack struct {
	ARN                       *string                    `locationName:"Arn" type:"string"`
	Attributes                *map[string]*string        `type:"map"`
	ChefConfiguration         *ChefConfiguration         `type:"structure"`
	ConfigurationManager      *StackConfigurationManager `type:"structure"`
	CreatedAt                 *string                    `type:"string"`
	CustomCookbooksSource     *Source                    `type:"structure"`
	CustomJSON                *string                    `locationName:"CustomJson" type:"string"`
	DefaultAvailabilityZone   *string                    `type:"string"`
	DefaultInstanceProfileARN *string                    `locationName:"DefaultInstanceProfileArn" type:"string"`
	DefaultOs                 *string                    `type:"string"`
	DefaultRootDeviceType     *string                    `type:"string"`
	DefaultSSHKeyName         *string                    `locationName:"DefaultSshKeyName" type:"string"`
	DefaultSubnetID           *string                    `locationName:"DefaultSubnetId" type:"string"`
	HostnameTheme             *string                    `type:"string"`
	Name                      *string                    `type:"string"`
	Region                    *string                    `type:"string"`
	ServiceRoleARN            *string                    `locationName:"ServiceRoleArn" type:"string"`
	StackID                   *string                    `locationName:"StackId" type:"string"`
	UseCustomCookbooks        *bool                      `type:"boolean"`
	UseOpsWorksSecurityGroups *bool                      `locationName:"UseOpsworksSecurityGroups" type:"boolean"`
	VPCID                     *string                    `locationName:"VpcId" type:"string"`

	metadataStack `json:"-", xml:"-"`
}

type metadataStack struct {
	SDKShapeTraits bool `type:"structure"`
}

type StackConfigurationManager struct {
	Name    *string `type:"string"`
	Version *string `type:"string"`

	metadataStackConfigurationManager `json:"-", xml:"-"`
}

type metadataStackConfigurationManager struct {
	SDKShapeTraits bool `type:"structure"`
}

type StackSummary struct {
	ARN            *string         `locationName:"Arn" type:"string"`
	AppsCount      *int64          `type:"integer"`
	InstancesCount *InstancesCount `type:"structure"`
	LayersCount    *int64          `type:"integer"`
	Name           *string         `type:"string"`
	StackID        *string         `locationName:"StackId" type:"string"`

	metadataStackSummary `json:"-", xml:"-"`
}

type metadataStackSummary struct {
	SDKShapeTraits bool `type:"structure"`
}

type StartInstanceInput struct {
	InstanceID *string `locationName:"InstanceId" type:"string" required:"true"`

	metadataStartInstanceInput `json:"-", xml:"-"`
}

type metadataStartInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type StartInstanceOutput struct {
	metadataStartInstanceOutput `json:"-", xml:"-"`
}

type metadataStartInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type StartStackInput struct {
	StackID *string `locationName:"StackId" type:"string" required:"true"`

	metadataStartStackInput `json:"-", xml:"-"`
}

type metadataStartStackInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type StartStackOutput struct {
	metadataStartStackOutput `json:"-", xml:"-"`
}

type metadataStartStackOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type StopInstanceInput struct {
	InstanceID *string `locationName:"InstanceId" type:"string" required:"true"`

	metadataStopInstanceInput `json:"-", xml:"-"`
}

type metadataStopInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type StopInstanceOutput struct {
	metadataStopInstanceOutput `json:"-", xml:"-"`
}

type metadataStopInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type StopStackInput struct {
	StackID *string `locationName:"StackId" type:"string" required:"true"`

	metadataStopStackInput `json:"-", xml:"-"`
}

type metadataStopStackInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type StopStackOutput struct {
	metadataStopStackOutput `json:"-", xml:"-"`
}

type metadataStopStackOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type TimeBasedAutoScalingConfiguration struct {
	AutoScalingSchedule *WeeklyAutoScalingSchedule `type:"structure"`
	InstanceID          *string                    `locationName:"InstanceId" type:"string"`

	metadataTimeBasedAutoScalingConfiguration `json:"-", xml:"-"`
}

type metadataTimeBasedAutoScalingConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type UnassignInstanceInput struct {
	InstanceID *string `locationName:"InstanceId" type:"string" required:"true"`

	metadataUnassignInstanceInput `json:"-", xml:"-"`
}

type metadataUnassignInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UnassignInstanceOutput struct {
	metadataUnassignInstanceOutput `json:"-", xml:"-"`
}

type metadataUnassignInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UnassignVolumeInput struct {
	VolumeID *string `locationName:"VolumeId" type:"string" required:"true"`

	metadataUnassignVolumeInput `json:"-", xml:"-"`
}

type metadataUnassignVolumeInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UnassignVolumeOutput struct {
	metadataUnassignVolumeOutput `json:"-", xml:"-"`
}

type metadataUnassignVolumeOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateAppInput struct {
	AppID            *string                `locationName:"AppId" type:"string" required:"true"`
	AppSource        *Source                `type:"structure"`
	Attributes       *map[string]*string    `type:"map"`
	DataSources      []*DataSource          `type:"list"`
	Description      *string                `type:"string"`
	Domains          []*string              `type:"list"`
	EnableSSL        *bool                  `locationName:"EnableSsl" type:"boolean"`
	Environment      []*EnvironmentVariable `type:"list"`
	Name             *string                `type:"string"`
	SSLConfiguration *SSLConfiguration      `locationName:"SslConfiguration" type:"structure"`
	Type             *string                `type:"string"`

	metadataUpdateAppInput `json:"-", xml:"-"`
}

type metadataUpdateAppInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateAppOutput struct {
	metadataUpdateAppOutput `json:"-", xml:"-"`
}

type metadataUpdateAppOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateElasticIPInput struct {
	ElasticIP *string `locationName:"ElasticIp" type:"string" required:"true"`
	Name      *string `type:"string"`

	metadataUpdateElasticIPInput `json:"-", xml:"-"`
}

type metadataUpdateElasticIPInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateElasticIPOutput struct {
	metadataUpdateElasticIPOutput `json:"-", xml:"-"`
}

type metadataUpdateElasticIPOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateInstanceInput struct {
	AMIID                *string   `locationName:"AmiId" type:"string"`
	Architecture         *string   `type:"string"`
	AutoScalingType      *string   `type:"string"`
	EBSOptimized         *bool     `locationName:"EbsOptimized" type:"boolean"`
	Hostname             *string   `type:"string"`
	InstallUpdatesOnBoot *bool     `type:"boolean"`
	InstanceID           *string   `locationName:"InstanceId" type:"string" required:"true"`
	InstanceType         *string   `type:"string"`
	LayerIDs             []*string `locationName:"LayerIds" type:"list"`
	Os                   *string   `type:"string"`
	SSHKeyName           *string   `locationName:"SshKeyName" type:"string"`

	metadataUpdateInstanceInput `json:"-", xml:"-"`
}

type metadataUpdateInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateInstanceOutput struct {
	metadataUpdateInstanceOutput `json:"-", xml:"-"`
}

type metadataUpdateInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateLayerInput struct {
	Attributes                  *map[string]*string          `type:"map"`
	AutoAssignElasticIPs        *bool                        `locationName:"AutoAssignElasticIps" type:"boolean"`
	AutoAssignPublicIPs         *bool                        `locationName:"AutoAssignPublicIps" type:"boolean"`
	CustomInstanceProfileARN    *string                      `locationName:"CustomInstanceProfileArn" type:"string"`
	CustomRecipes               *Recipes                     `type:"structure"`
	CustomSecurityGroupIDs      []*string                    `locationName:"CustomSecurityGroupIds" type:"list"`
	EnableAutoHealing           *bool                        `type:"boolean"`
	InstallUpdatesOnBoot        *bool                        `type:"boolean"`
	LayerID                     *string                      `locationName:"LayerId" type:"string" required:"true"`
	LifecycleEventConfiguration *LifecycleEventConfiguration `type:"structure"`
	Name                        *string                      `type:"string"`
	Packages                    []*string                    `type:"list"`
	Shortname                   *string                      `type:"string"`
	UseEBSOptimizedInstances    *bool                        `locationName:"UseEbsOptimizedInstances" type:"boolean"`
	VolumeConfigurations        []*VolumeConfiguration       `type:"list"`

	metadataUpdateLayerInput `json:"-", xml:"-"`
}

type metadataUpdateLayerInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateLayerOutput struct {
	metadataUpdateLayerOutput `json:"-", xml:"-"`
}

type metadataUpdateLayerOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateMyUserProfileInput struct {
	SSHPublicKey *string `locationName:"SshPublicKey" type:"string"`

	metadataUpdateMyUserProfileInput `json:"-", xml:"-"`
}

type metadataUpdateMyUserProfileInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateMyUserProfileOutput struct {
	metadataUpdateMyUserProfileOutput `json:"-", xml:"-"`
}

type metadataUpdateMyUserProfileOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateRDSDBInstanceInput struct {
	DBPassword       *string `locationName:"DbPassword" type:"string"`
	DBUser           *string `locationName:"DbUser" type:"string"`
	RDSDBInstanceARN *string `locationName:"RdsDbInstanceArn" type:"string" required:"true"`

	metadataUpdateRDSDBInstanceInput `json:"-", xml:"-"`
}

type metadataUpdateRDSDBInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateRDSDBInstanceOutput struct {
	metadataUpdateRDSDBInstanceOutput `json:"-", xml:"-"`
}

type metadataUpdateRDSDBInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateStackInput struct {
	Attributes                *map[string]*string        `type:"map"`
	ChefConfiguration         *ChefConfiguration         `type:"structure"`
	ConfigurationManager      *StackConfigurationManager `type:"structure"`
	CustomCookbooksSource     *Source                    `type:"structure"`
	CustomJSON                *string                    `locationName:"CustomJson" type:"string"`
	DefaultAvailabilityZone   *string                    `type:"string"`
	DefaultInstanceProfileARN *string                    `locationName:"DefaultInstanceProfileArn" type:"string"`
	DefaultOs                 *string                    `type:"string"`
	DefaultRootDeviceType     *string                    `type:"string"`
	DefaultSSHKeyName         *string                    `locationName:"DefaultSshKeyName" type:"string"`
	DefaultSubnetID           *string                    `locationName:"DefaultSubnetId" type:"string"`
	HostnameTheme             *string                    `type:"string"`
	Name                      *string                    `type:"string"`
	ServiceRoleARN            *string                    `locationName:"ServiceRoleArn" type:"string"`
	StackID                   *string                    `locationName:"StackId" type:"string" required:"true"`
	UseCustomCookbooks        *bool                      `type:"boolean"`
	UseOpsWorksSecurityGroups *bool                      `locationName:"UseOpsworksSecurityGroups" type:"boolean"`

	metadataUpdateStackInput `json:"-", xml:"-"`
}

type metadataUpdateStackInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateStackOutput struct {
	metadataUpdateStackOutput `json:"-", xml:"-"`
}

type metadataUpdateStackOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateUserProfileInput struct {
	AllowSelfManagement *bool   `type:"boolean"`
	IAMUserARN          *string `locationName:"IamUserArn" type:"string" required:"true"`
	SSHPublicKey        *string `locationName:"SshPublicKey" type:"string"`
	SSHUsername         *string `locationName:"SshUsername" type:"string"`

	metadataUpdateUserProfileInput `json:"-", xml:"-"`
}

type metadataUpdateUserProfileInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateUserProfileOutput struct {
	metadataUpdateUserProfileOutput `json:"-", xml:"-"`
}

type metadataUpdateUserProfileOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateVolumeInput struct {
	MountPoint *string `type:"string"`
	Name       *string `type:"string"`
	VolumeID   *string `locationName:"VolumeId" type:"string" required:"true"`

	metadataUpdateVolumeInput `json:"-", xml:"-"`
}

type metadataUpdateVolumeInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateVolumeOutput struct {
	metadataUpdateVolumeOutput `json:"-", xml:"-"`
}

type metadataUpdateVolumeOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UserProfile struct {
	AllowSelfManagement *bool   `type:"boolean"`
	IAMUserARN          *string `locationName:"IamUserArn" type:"string"`
	Name                *string `type:"string"`
	SSHPublicKey        *string `locationName:"SshPublicKey" type:"string"`
	SSHUsername         *string `locationName:"SshUsername" type:"string"`

	metadataUserProfile `json:"-", xml:"-"`
}

type metadataUserProfile struct {
	SDKShapeTraits bool `type:"structure"`
}

type Volume struct {
	AvailabilityZone *string `type:"string"`
	Device           *string `type:"string"`
	EC2VolumeID      *string `locationName:"Ec2VolumeId" type:"string"`
	IOPS             *int64  `locationName:"Iops" type:"integer"`
	InstanceID       *string `locationName:"InstanceId" type:"string"`
	MountPoint       *string `type:"string"`
	Name             *string `type:"string"`
	RAIDArrayID      *string `locationName:"RaidArrayId" type:"string"`
	Region           *string `type:"string"`
	Size             *int64  `type:"integer"`
	Status           *string `type:"string"`
	VolumeID         *string `locationName:"VolumeId" type:"string"`
	VolumeType       *string `type:"string"`

	metadataVolume `json:"-", xml:"-"`
}

type metadataVolume struct {
	SDKShapeTraits bool `type:"structure"`
}

type VolumeConfiguration struct {
	IOPS          *int64  `locationName:"Iops" type:"integer"`
	MountPoint    *string `type:"string" required:"true"`
	NumberOfDisks *int64  `type:"integer" required:"true"`
	RAIDLevel     *int64  `locationName:"RaidLevel" type:"integer"`
	Size          *int64  `type:"integer" required:"true"`
	VolumeType    *string `type:"string"`

	metadataVolumeConfiguration `json:"-", xml:"-"`
}

type metadataVolumeConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type WeeklyAutoScalingSchedule struct {
	Friday    *map[string]*string `type:"map"`
	Monday    *map[string]*string `type:"map"`
	Saturday  *map[string]*string `type:"map"`
	Sunday    *map[string]*string `type:"map"`
	Thursday  *map[string]*string `type:"map"`
	Tuesday   *map[string]*string `type:"map"`
	Wednesday *map[string]*string `type:"map"`

	metadataWeeklyAutoScalingSchedule `json:"-", xml:"-"`
}

type metadataWeeklyAutoScalingSchedule struct {
	SDKShapeTraits bool `type:"structure"`
}