// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package rds

import (
	"github.com/awslabs/aws-sdk-go/internal/waiter"
)
var waiterDBInstanceAvailable *waiter.Config

func (c *RDS) WaitUntilDBInstanceAvailable(input *DescribeDBInstancesInput) error {
	if waiterDBInstanceAvailable == nil {
		waiterDBInstanceAvailable = &waiter.Config{
			Operation:   "DescribeDBInstances",
			Delay:       30,
			MaxAttempts: 60,
			Acceptors: []waiter.WaitAcceptor{
				waiter.WaitAcceptor{
					State:    "success",
					Matcher:  "pathAll",
					Argument: "DBInstances[].DBInstanceStatus",
					Expected: available,
				},
				waiter.WaitAcceptor{
					State:    "failure",
					Matcher:  "pathAny",
					Argument: "DBInstances[].DBInstanceStatus",
					Expected: deleted,
				},
				waiter.WaitAcceptor{
					State:    "failure",
					Matcher:  "pathAny",
					Argument: "DBInstances[].DBInstanceStatus",
					Expected: deleting,
				},
				waiter.WaitAcceptor{
					State:    "failure",
					Matcher:  "pathAny",
					Argument: "DBInstances[].DBInstanceStatus",
					Expected: failed,
				},
				waiter.WaitAcceptor{
					State:    "failure",
					Matcher:  "pathAny",
					Argument: "DBInstances[].DBInstanceStatus",
					Expected: incompatible-restore,
				},
				waiter.WaitAcceptor{
					State:    "failure",
					Matcher:  "pathAny",
					Argument: "DBInstances[].DBInstanceStatus",
					Expected: incompatible-parameters,
				},
				waiter.WaitAcceptor{
					State:    "failure",
					Matcher:  "pathAny",
					Argument: "DBInstances[].DBInstanceStatus",
					Expected: incompatible-parameters,
				},
				waiter.WaitAcceptor{
					State:    "failure",
					Matcher:  "pathAny",
					Argument: "DBInstances[].DBInstanceStatus",
					Expected: incompatible-restore,
				},
				
			},
		}
	}

	w := waiter.Waiter{
		Client: c,
		Input:  input,
		Config: waiterDBInstanceAvailable,
	}
	return w.Wait()
}

var waiterDBInstanceDeleted *waiter.Config

func (c *RDS) WaitUntilDBInstanceDeleted(input *DescribeDBInstancesInput) error {
	if waiterDBInstanceDeleted == nil {
		waiterDBInstanceDeleted = &waiter.Config{
			Operation:   "DescribeDBInstances",
			Delay:       30,
			MaxAttempts: 60,
			Acceptors: []waiter.WaitAcceptor{
				waiter.WaitAcceptor{
					State:    "success",
					Matcher:  "error",
					Argument: "",
					Expected: DBInstanceNotFound,
				},
				waiter.WaitAcceptor{
					State:    "success",
					Matcher:  "pathAll",
					Argument: "DBInstances[].DBInstanceStatus",
					Expected: deleted,
				},
				waiter.WaitAcceptor{
					State:    "failure",
					Matcher:  "pathAny",
					Argument: "DBInstances[].DBInstanceStatus",
					Expected: creating,
				},
				waiter.WaitAcceptor{
					State:    "failure",
					Matcher:  "pathAny",
					Argument: "DBInstances[].DBInstanceStatus",
					Expected: modifying,
				},
				waiter.WaitAcceptor{
					State:    "failure",
					Matcher:  "pathAny",
					Argument: "DBInstances[].DBInstanceStatus",
					Expected: rebooting,
				},
				waiter.WaitAcceptor{
					State:    "failure",
					Matcher:  "pathAny",
					Argument: "DBInstances[].DBInstanceStatus",
					Expected: resetting-master-credentials,
				},
				
			},
		}
	}

	w := waiter.Waiter{
		Client: c,
		Input:  input,
		Config: waiterDBInstanceDeleted,
	}
	return w.Wait()
}
