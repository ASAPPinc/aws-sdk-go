package rds

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"time"

	"github.com/awslabs/aws-sdk-go/aws"
)

// AddSourceIdentifierToSubscriptionRequest generates a request for the AddSourceIdentifierToSubscription operation.
func (c *RDS) AddSourceIdentifierToSubscriptionRequest(input *AddSourceIdentifierToSubscriptionInput) (req *aws.Request, output *AddSourceIdentifierToSubscriptionOutput) {
	if opAddSourceIdentifierToSubscription == nil {
		opAddSourceIdentifierToSubscription = &aws.Operation{
			Name:       "AddSourceIdentifierToSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAddSourceIdentifierToSubscription, input, output)
	output = &AddSourceIdentifierToSubscriptionOutput{}
	req.Data = output
	return
}

func (c *RDS) AddSourceIdentifierToSubscription(input *AddSourceIdentifierToSubscriptionInput) (output *AddSourceIdentifierToSubscriptionOutput, err error) {
	req, out := c.AddSourceIdentifierToSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opAddSourceIdentifierToSubscription *aws.Operation

// AddTagsToResourceRequest generates a request for the AddTagsToResource operation.
func (c *RDS) AddTagsToResourceRequest(input *AddTagsToResourceInput) (req *aws.Request, output *AddTagsToResourceOutput) {
	if opAddTagsToResource == nil {
		opAddTagsToResource = &aws.Operation{
			Name:       "AddTagsToResource",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAddTagsToResource, input, output)
	output = &AddTagsToResourceOutput{}
	req.Data = output
	return
}

func (c *RDS) AddTagsToResource(input *AddTagsToResourceInput) (output *AddTagsToResourceOutput, err error) {
	req, out := c.AddTagsToResourceRequest(input)
	output = out
	err = req.Send()
	return
}

var opAddTagsToResource *aws.Operation

// ApplyPendingMaintenanceActionRequest generates a request for the ApplyPendingMaintenanceAction operation.
func (c *RDS) ApplyPendingMaintenanceActionRequest(input *ApplyPendingMaintenanceActionInput) (req *aws.Request, output *ApplyPendingMaintenanceActionOutput) {
	if opApplyPendingMaintenanceAction == nil {
		opApplyPendingMaintenanceAction = &aws.Operation{
			Name:       "ApplyPendingMaintenanceAction",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opApplyPendingMaintenanceAction, input, output)
	output = &ApplyPendingMaintenanceActionOutput{}
	req.Data = output
	return
}

func (c *RDS) ApplyPendingMaintenanceAction(input *ApplyPendingMaintenanceActionInput) (output *ApplyPendingMaintenanceActionOutput, err error) {
	req, out := c.ApplyPendingMaintenanceActionRequest(input)
	output = out
	err = req.Send()
	return
}

var opApplyPendingMaintenanceAction *aws.Operation

// AuthorizeDBSecurityGroupIngressRequest generates a request for the AuthorizeDBSecurityGroupIngress operation.
func (c *RDS) AuthorizeDBSecurityGroupIngressRequest(input *AuthorizeDBSecurityGroupIngressInput) (req *aws.Request, output *AuthorizeDBSecurityGroupIngressOutput) {
	if opAuthorizeDBSecurityGroupIngress == nil {
		opAuthorizeDBSecurityGroupIngress = &aws.Operation{
			Name:       "AuthorizeDBSecurityGroupIngress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAuthorizeDBSecurityGroupIngress, input, output)
	output = &AuthorizeDBSecurityGroupIngressOutput{}
	req.Data = output
	return
}

func (c *RDS) AuthorizeDBSecurityGroupIngress(input *AuthorizeDBSecurityGroupIngressInput) (output *AuthorizeDBSecurityGroupIngressOutput, err error) {
	req, out := c.AuthorizeDBSecurityGroupIngressRequest(input)
	output = out
	err = req.Send()
	return
}

var opAuthorizeDBSecurityGroupIngress *aws.Operation

// CopyDBParameterGroupRequest generates a request for the CopyDBParameterGroup operation.
func (c *RDS) CopyDBParameterGroupRequest(input *CopyDBParameterGroupInput) (req *aws.Request, output *CopyDBParameterGroupOutput) {
	if opCopyDBParameterGroup == nil {
		opCopyDBParameterGroup = &aws.Operation{
			Name:       "CopyDBParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCopyDBParameterGroup, input, output)
	output = &CopyDBParameterGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) CopyDBParameterGroup(input *CopyDBParameterGroupInput) (output *CopyDBParameterGroupOutput, err error) {
	req, out := c.CopyDBParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCopyDBParameterGroup *aws.Operation

// CopyDBSnapshotRequest generates a request for the CopyDBSnapshot operation.
func (c *RDS) CopyDBSnapshotRequest(input *CopyDBSnapshotInput) (req *aws.Request, output *CopyDBSnapshotOutput) {
	if opCopyDBSnapshot == nil {
		opCopyDBSnapshot = &aws.Operation{
			Name:       "CopyDBSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCopyDBSnapshot, input, output)
	output = &CopyDBSnapshotOutput{}
	req.Data = output
	return
}

func (c *RDS) CopyDBSnapshot(input *CopyDBSnapshotInput) (output *CopyDBSnapshotOutput, err error) {
	req, out := c.CopyDBSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opCopyDBSnapshot *aws.Operation

// CopyOptionGroupRequest generates a request for the CopyOptionGroup operation.
func (c *RDS) CopyOptionGroupRequest(input *CopyOptionGroupInput) (req *aws.Request, output *CopyOptionGroupOutput) {
	if opCopyOptionGroup == nil {
		opCopyOptionGroup = &aws.Operation{
			Name:       "CopyOptionGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCopyOptionGroup, input, output)
	output = &CopyOptionGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) CopyOptionGroup(input *CopyOptionGroupInput) (output *CopyOptionGroupOutput, err error) {
	req, out := c.CopyOptionGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCopyOptionGroup *aws.Operation

// CreateDBInstanceRequest generates a request for the CreateDBInstance operation.
func (c *RDS) CreateDBInstanceRequest(input *CreateDBInstanceInput) (req *aws.Request, output *CreateDBInstanceOutput) {
	if opCreateDBInstance == nil {
		opCreateDBInstance = &aws.Operation{
			Name:       "CreateDBInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDBInstance, input, output)
	output = &CreateDBInstanceOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateDBInstance(input *CreateDBInstanceInput) (output *CreateDBInstanceOutput, err error) {
	req, out := c.CreateDBInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDBInstance *aws.Operation

// CreateDBInstanceReadReplicaRequest generates a request for the CreateDBInstanceReadReplica operation.
func (c *RDS) CreateDBInstanceReadReplicaRequest(input *CreateDBInstanceReadReplicaInput) (req *aws.Request, output *CreateDBInstanceReadReplicaOutput) {
	if opCreateDBInstanceReadReplica == nil {
		opCreateDBInstanceReadReplica = &aws.Operation{
			Name:       "CreateDBInstanceReadReplica",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDBInstanceReadReplica, input, output)
	output = &CreateDBInstanceReadReplicaOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateDBInstanceReadReplica(input *CreateDBInstanceReadReplicaInput) (output *CreateDBInstanceReadReplicaOutput, err error) {
	req, out := c.CreateDBInstanceReadReplicaRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDBInstanceReadReplica *aws.Operation

// CreateDBParameterGroupRequest generates a request for the CreateDBParameterGroup operation.
func (c *RDS) CreateDBParameterGroupRequest(input *CreateDBParameterGroupInput) (req *aws.Request, output *CreateDBParameterGroupOutput) {
	if opCreateDBParameterGroup == nil {
		opCreateDBParameterGroup = &aws.Operation{
			Name:       "CreateDBParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDBParameterGroup, input, output)
	output = &CreateDBParameterGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateDBParameterGroup(input *CreateDBParameterGroupInput) (output *CreateDBParameterGroupOutput, err error) {
	req, out := c.CreateDBParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDBParameterGroup *aws.Operation

// CreateDBSecurityGroupRequest generates a request for the CreateDBSecurityGroup operation.
func (c *RDS) CreateDBSecurityGroupRequest(input *CreateDBSecurityGroupInput) (req *aws.Request, output *CreateDBSecurityGroupOutput) {
	if opCreateDBSecurityGroup == nil {
		opCreateDBSecurityGroup = &aws.Operation{
			Name:       "CreateDBSecurityGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDBSecurityGroup, input, output)
	output = &CreateDBSecurityGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateDBSecurityGroup(input *CreateDBSecurityGroupInput) (output *CreateDBSecurityGroupOutput, err error) {
	req, out := c.CreateDBSecurityGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDBSecurityGroup *aws.Operation

// CreateDBSnapshotRequest generates a request for the CreateDBSnapshot operation.
func (c *RDS) CreateDBSnapshotRequest(input *CreateDBSnapshotInput) (req *aws.Request, output *CreateDBSnapshotOutput) {
	if opCreateDBSnapshot == nil {
		opCreateDBSnapshot = &aws.Operation{
			Name:       "CreateDBSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDBSnapshot, input, output)
	output = &CreateDBSnapshotOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateDBSnapshot(input *CreateDBSnapshotInput) (output *CreateDBSnapshotOutput, err error) {
	req, out := c.CreateDBSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDBSnapshot *aws.Operation

// CreateDBSubnetGroupRequest generates a request for the CreateDBSubnetGroup operation.
func (c *RDS) CreateDBSubnetGroupRequest(input *CreateDBSubnetGroupInput) (req *aws.Request, output *CreateDBSubnetGroupOutput) {
	if opCreateDBSubnetGroup == nil {
		opCreateDBSubnetGroup = &aws.Operation{
			Name:       "CreateDBSubnetGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDBSubnetGroup, input, output)
	output = &CreateDBSubnetGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateDBSubnetGroup(input *CreateDBSubnetGroupInput) (output *CreateDBSubnetGroupOutput, err error) {
	req, out := c.CreateDBSubnetGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDBSubnetGroup *aws.Operation

// CreateEventSubscriptionRequest generates a request for the CreateEventSubscription operation.
func (c *RDS) CreateEventSubscriptionRequest(input *CreateEventSubscriptionInput) (req *aws.Request, output *CreateEventSubscriptionOutput) {
	if opCreateEventSubscription == nil {
		opCreateEventSubscription = &aws.Operation{
			Name:       "CreateEventSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateEventSubscription, input, output)
	output = &CreateEventSubscriptionOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateEventSubscription(input *CreateEventSubscriptionInput) (output *CreateEventSubscriptionOutput, err error) {
	req, out := c.CreateEventSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateEventSubscription *aws.Operation

// CreateOptionGroupRequest generates a request for the CreateOptionGroup operation.
func (c *RDS) CreateOptionGroupRequest(input *CreateOptionGroupInput) (req *aws.Request, output *CreateOptionGroupOutput) {
	if opCreateOptionGroup == nil {
		opCreateOptionGroup = &aws.Operation{
			Name:       "CreateOptionGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateOptionGroup, input, output)
	output = &CreateOptionGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateOptionGroup(input *CreateOptionGroupInput) (output *CreateOptionGroupOutput, err error) {
	req, out := c.CreateOptionGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateOptionGroup *aws.Operation

// DeleteDBInstanceRequest generates a request for the DeleteDBInstance operation.
func (c *RDS) DeleteDBInstanceRequest(input *DeleteDBInstanceInput) (req *aws.Request, output *DeleteDBInstanceOutput) {
	if opDeleteDBInstance == nil {
		opDeleteDBInstance = &aws.Operation{
			Name:       "DeleteDBInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDBInstance, input, output)
	output = &DeleteDBInstanceOutput{}
	req.Data = output
	return
}

func (c *RDS) DeleteDBInstance(input *DeleteDBInstanceInput) (output *DeleteDBInstanceOutput, err error) {
	req, out := c.DeleteDBInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteDBInstance *aws.Operation

// DeleteDBParameterGroupRequest generates a request for the DeleteDBParameterGroup operation.
func (c *RDS) DeleteDBParameterGroupRequest(input *DeleteDBParameterGroupInput) (req *aws.Request, output *DeleteDBParameterGroupOutput) {
	if opDeleteDBParameterGroup == nil {
		opDeleteDBParameterGroup = &aws.Operation{
			Name:       "DeleteDBParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDBParameterGroup, input, output)
	output = &DeleteDBParameterGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) DeleteDBParameterGroup(input *DeleteDBParameterGroupInput) (output *DeleteDBParameterGroupOutput, err error) {
	req, out := c.DeleteDBParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteDBParameterGroup *aws.Operation

// DeleteDBSecurityGroupRequest generates a request for the DeleteDBSecurityGroup operation.
func (c *RDS) DeleteDBSecurityGroupRequest(input *DeleteDBSecurityGroupInput) (req *aws.Request, output *DeleteDBSecurityGroupOutput) {
	if opDeleteDBSecurityGroup == nil {
		opDeleteDBSecurityGroup = &aws.Operation{
			Name:       "DeleteDBSecurityGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDBSecurityGroup, input, output)
	output = &DeleteDBSecurityGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) DeleteDBSecurityGroup(input *DeleteDBSecurityGroupInput) (output *DeleteDBSecurityGroupOutput, err error) {
	req, out := c.DeleteDBSecurityGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteDBSecurityGroup *aws.Operation

// DeleteDBSnapshotRequest generates a request for the DeleteDBSnapshot operation.
func (c *RDS) DeleteDBSnapshotRequest(input *DeleteDBSnapshotInput) (req *aws.Request, output *DeleteDBSnapshotOutput) {
	if opDeleteDBSnapshot == nil {
		opDeleteDBSnapshot = &aws.Operation{
			Name:       "DeleteDBSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDBSnapshot, input, output)
	output = &DeleteDBSnapshotOutput{}
	req.Data = output
	return
}

func (c *RDS) DeleteDBSnapshot(input *DeleteDBSnapshotInput) (output *DeleteDBSnapshotOutput, err error) {
	req, out := c.DeleteDBSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteDBSnapshot *aws.Operation

// DeleteDBSubnetGroupRequest generates a request for the DeleteDBSubnetGroup operation.
func (c *RDS) DeleteDBSubnetGroupRequest(input *DeleteDBSubnetGroupInput) (req *aws.Request, output *DeleteDBSubnetGroupOutput) {
	if opDeleteDBSubnetGroup == nil {
		opDeleteDBSubnetGroup = &aws.Operation{
			Name:       "DeleteDBSubnetGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDBSubnetGroup, input, output)
	output = &DeleteDBSubnetGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) DeleteDBSubnetGroup(input *DeleteDBSubnetGroupInput) (output *DeleteDBSubnetGroupOutput, err error) {
	req, out := c.DeleteDBSubnetGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteDBSubnetGroup *aws.Operation

// DeleteEventSubscriptionRequest generates a request for the DeleteEventSubscription operation.
func (c *RDS) DeleteEventSubscriptionRequest(input *DeleteEventSubscriptionInput) (req *aws.Request, output *DeleteEventSubscriptionOutput) {
	if opDeleteEventSubscription == nil {
		opDeleteEventSubscription = &aws.Operation{
			Name:       "DeleteEventSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteEventSubscription, input, output)
	output = &DeleteEventSubscriptionOutput{}
	req.Data = output
	return
}

func (c *RDS) DeleteEventSubscription(input *DeleteEventSubscriptionInput) (output *DeleteEventSubscriptionOutput, err error) {
	req, out := c.DeleteEventSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteEventSubscription *aws.Operation

// DeleteOptionGroupRequest generates a request for the DeleteOptionGroup operation.
func (c *RDS) DeleteOptionGroupRequest(input *DeleteOptionGroupInput) (req *aws.Request, output *DeleteOptionGroupOutput) {
	if opDeleteOptionGroup == nil {
		opDeleteOptionGroup = &aws.Operation{
			Name:       "DeleteOptionGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteOptionGroup, input, output)
	output = &DeleteOptionGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) DeleteOptionGroup(input *DeleteOptionGroupInput) (output *DeleteOptionGroupOutput, err error) {
	req, out := c.DeleteOptionGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteOptionGroup *aws.Operation

// DescribeDBEngineVersionsRequest generates a request for the DescribeDBEngineVersions operation.
func (c *RDS) DescribeDBEngineVersionsRequest(input *DescribeDBEngineVersionsInput) (req *aws.Request, output *DescribeDBEngineVersionsOutput) {
	if opDescribeDBEngineVersions == nil {
		opDescribeDBEngineVersions = &aws.Operation{
			Name:       "DescribeDBEngineVersions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBEngineVersions, input, output)
	output = &DescribeDBEngineVersionsOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBEngineVersions(input *DescribeDBEngineVersionsInput) (output *DescribeDBEngineVersionsOutput, err error) {
	req, out := c.DescribeDBEngineVersionsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeDBEngineVersionsPages(input *DescribeDBEngineVersionsInput) <-chan *DescribeDBEngineVersionsOutput {
	page, _ := c.DescribeDBEngineVersionsRequest(input)
	ch := make(chan *DescribeDBEngineVersionsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeDBEngineVersionsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeDBEngineVersions *aws.Operation

// DescribeDBInstancesRequest generates a request for the DescribeDBInstances operation.
func (c *RDS) DescribeDBInstancesRequest(input *DescribeDBInstancesInput) (req *aws.Request, output *DescribeDBInstancesOutput) {
	if opDescribeDBInstances == nil {
		opDescribeDBInstances = &aws.Operation{
			Name:       "DescribeDBInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBInstances, input, output)
	output = &DescribeDBInstancesOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBInstances(input *DescribeDBInstancesInput) (output *DescribeDBInstancesOutput, err error) {
	req, out := c.DescribeDBInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeDBInstancesPages(input *DescribeDBInstancesInput) <-chan *DescribeDBInstancesOutput {
	page, _ := c.DescribeDBInstancesRequest(input)
	ch := make(chan *DescribeDBInstancesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeDBInstancesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeDBInstances *aws.Operation

// DescribeDBLogFilesRequest generates a request for the DescribeDBLogFiles operation.
func (c *RDS) DescribeDBLogFilesRequest(input *DescribeDBLogFilesInput) (req *aws.Request, output *DescribeDBLogFilesOutput) {
	if opDescribeDBLogFiles == nil {
		opDescribeDBLogFiles = &aws.Operation{
			Name:       "DescribeDBLogFiles",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBLogFiles, input, output)
	output = &DescribeDBLogFilesOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBLogFiles(input *DescribeDBLogFilesInput) (output *DescribeDBLogFilesOutput, err error) {
	req, out := c.DescribeDBLogFilesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeDBLogFilesPages(input *DescribeDBLogFilesInput) <-chan *DescribeDBLogFilesOutput {
	page, _ := c.DescribeDBLogFilesRequest(input)
	ch := make(chan *DescribeDBLogFilesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeDBLogFilesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeDBLogFiles *aws.Operation

// DescribeDBParameterGroupsRequest generates a request for the DescribeDBParameterGroups operation.
func (c *RDS) DescribeDBParameterGroupsRequest(input *DescribeDBParameterGroupsInput) (req *aws.Request, output *DescribeDBParameterGroupsOutput) {
	if opDescribeDBParameterGroups == nil {
		opDescribeDBParameterGroups = &aws.Operation{
			Name:       "DescribeDBParameterGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBParameterGroups, input, output)
	output = &DescribeDBParameterGroupsOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBParameterGroups(input *DescribeDBParameterGroupsInput) (output *DescribeDBParameterGroupsOutput, err error) {
	req, out := c.DescribeDBParameterGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeDBParameterGroupsPages(input *DescribeDBParameterGroupsInput) <-chan *DescribeDBParameterGroupsOutput {
	page, _ := c.DescribeDBParameterGroupsRequest(input)
	ch := make(chan *DescribeDBParameterGroupsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeDBParameterGroupsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeDBParameterGroups *aws.Operation

// DescribeDBParametersRequest generates a request for the DescribeDBParameters operation.
func (c *RDS) DescribeDBParametersRequest(input *DescribeDBParametersInput) (req *aws.Request, output *DescribeDBParametersOutput) {
	if opDescribeDBParameters == nil {
		opDescribeDBParameters = &aws.Operation{
			Name:       "DescribeDBParameters",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBParameters, input, output)
	output = &DescribeDBParametersOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBParameters(input *DescribeDBParametersInput) (output *DescribeDBParametersOutput, err error) {
	req, out := c.DescribeDBParametersRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeDBParametersPages(input *DescribeDBParametersInput) <-chan *DescribeDBParametersOutput {
	page, _ := c.DescribeDBParametersRequest(input)
	ch := make(chan *DescribeDBParametersOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeDBParametersOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeDBParameters *aws.Operation

// DescribeDBSecurityGroupsRequest generates a request for the DescribeDBSecurityGroups operation.
func (c *RDS) DescribeDBSecurityGroupsRequest(input *DescribeDBSecurityGroupsInput) (req *aws.Request, output *DescribeDBSecurityGroupsOutput) {
	if opDescribeDBSecurityGroups == nil {
		opDescribeDBSecurityGroups = &aws.Operation{
			Name:       "DescribeDBSecurityGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBSecurityGroups, input, output)
	output = &DescribeDBSecurityGroupsOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBSecurityGroups(input *DescribeDBSecurityGroupsInput) (output *DescribeDBSecurityGroupsOutput, err error) {
	req, out := c.DescribeDBSecurityGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeDBSecurityGroupsPages(input *DescribeDBSecurityGroupsInput) <-chan *DescribeDBSecurityGroupsOutput {
	page, _ := c.DescribeDBSecurityGroupsRequest(input)
	ch := make(chan *DescribeDBSecurityGroupsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeDBSecurityGroupsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeDBSecurityGroups *aws.Operation

// DescribeDBSnapshotsRequest generates a request for the DescribeDBSnapshots operation.
func (c *RDS) DescribeDBSnapshotsRequest(input *DescribeDBSnapshotsInput) (req *aws.Request, output *DescribeDBSnapshotsOutput) {
	if opDescribeDBSnapshots == nil {
		opDescribeDBSnapshots = &aws.Operation{
			Name:       "DescribeDBSnapshots",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBSnapshots, input, output)
	output = &DescribeDBSnapshotsOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBSnapshots(input *DescribeDBSnapshotsInput) (output *DescribeDBSnapshotsOutput, err error) {
	req, out := c.DescribeDBSnapshotsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeDBSnapshotsPages(input *DescribeDBSnapshotsInput) <-chan *DescribeDBSnapshotsOutput {
	page, _ := c.DescribeDBSnapshotsRequest(input)
	ch := make(chan *DescribeDBSnapshotsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeDBSnapshotsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeDBSnapshots *aws.Operation

// DescribeDBSubnetGroupsRequest generates a request for the DescribeDBSubnetGroups operation.
func (c *RDS) DescribeDBSubnetGroupsRequest(input *DescribeDBSubnetGroupsInput) (req *aws.Request, output *DescribeDBSubnetGroupsOutput) {
	if opDescribeDBSubnetGroups == nil {
		opDescribeDBSubnetGroups = &aws.Operation{
			Name:       "DescribeDBSubnetGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBSubnetGroups, input, output)
	output = &DescribeDBSubnetGroupsOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBSubnetGroups(input *DescribeDBSubnetGroupsInput) (output *DescribeDBSubnetGroupsOutput, err error) {
	req, out := c.DescribeDBSubnetGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeDBSubnetGroupsPages(input *DescribeDBSubnetGroupsInput) <-chan *DescribeDBSubnetGroupsOutput {
	page, _ := c.DescribeDBSubnetGroupsRequest(input)
	ch := make(chan *DescribeDBSubnetGroupsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeDBSubnetGroupsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeDBSubnetGroups *aws.Operation

// DescribeEngineDefaultParametersRequest generates a request for the DescribeEngineDefaultParameters operation.
func (c *RDS) DescribeEngineDefaultParametersRequest(input *DescribeEngineDefaultParametersInput) (req *aws.Request, output *DescribeEngineDefaultParametersOutput) {
	if opDescribeEngineDefaultParameters == nil {
		opDescribeEngineDefaultParameters = &aws.Operation{
			Name:       "DescribeEngineDefaultParameters",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "EngineDefaults.Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEngineDefaultParameters, input, output)
	output = &DescribeEngineDefaultParametersOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeEngineDefaultParameters(input *DescribeEngineDefaultParametersInput) (output *DescribeEngineDefaultParametersOutput, err error) {
	req, out := c.DescribeEngineDefaultParametersRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeEngineDefaultParametersPages(input *DescribeEngineDefaultParametersInput) <-chan *DescribeEngineDefaultParametersOutput {
	page, _ := c.DescribeEngineDefaultParametersRequest(input)
	ch := make(chan *DescribeEngineDefaultParametersOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeEngineDefaultParametersOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeEngineDefaultParameters *aws.Operation

// DescribeEventCategoriesRequest generates a request for the DescribeEventCategories operation.
func (c *RDS) DescribeEventCategoriesRequest(input *DescribeEventCategoriesInput) (req *aws.Request, output *DescribeEventCategoriesOutput) {
	if opDescribeEventCategories == nil {
		opDescribeEventCategories = &aws.Operation{
			Name:       "DescribeEventCategories",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEventCategories, input, output)
	output = &DescribeEventCategoriesOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeEventCategories(input *DescribeEventCategoriesInput) (output *DescribeEventCategoriesOutput, err error) {
	req, out := c.DescribeEventCategoriesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeEventCategories *aws.Operation

// DescribeEventSubscriptionsRequest generates a request for the DescribeEventSubscriptions operation.
func (c *RDS) DescribeEventSubscriptionsRequest(input *DescribeEventSubscriptionsInput) (req *aws.Request, output *DescribeEventSubscriptionsOutput) {
	if opDescribeEventSubscriptions == nil {
		opDescribeEventSubscriptions = &aws.Operation{
			Name:       "DescribeEventSubscriptions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEventSubscriptions, input, output)
	output = &DescribeEventSubscriptionsOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeEventSubscriptions(input *DescribeEventSubscriptionsInput) (output *DescribeEventSubscriptionsOutput, err error) {
	req, out := c.DescribeEventSubscriptionsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeEventSubscriptionsPages(input *DescribeEventSubscriptionsInput) <-chan *DescribeEventSubscriptionsOutput {
	page, _ := c.DescribeEventSubscriptionsRequest(input)
	ch := make(chan *DescribeEventSubscriptionsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeEventSubscriptionsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeEventSubscriptions *aws.Operation

// DescribeEventsRequest generates a request for the DescribeEvents operation.
func (c *RDS) DescribeEventsRequest(input *DescribeEventsInput) (req *aws.Request, output *DescribeEventsOutput) {
	if opDescribeEvents == nil {
		opDescribeEvents = &aws.Operation{
			Name:       "DescribeEvents",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEvents, input, output)
	output = &DescribeEventsOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeEvents(input *DescribeEventsInput) (output *DescribeEventsOutput, err error) {
	req, out := c.DescribeEventsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeEventsPages(input *DescribeEventsInput) <-chan *DescribeEventsOutput {
	page, _ := c.DescribeEventsRequest(input)
	ch := make(chan *DescribeEventsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeEventsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeEvents *aws.Operation

// DescribeOptionGroupOptionsRequest generates a request for the DescribeOptionGroupOptions operation.
func (c *RDS) DescribeOptionGroupOptionsRequest(input *DescribeOptionGroupOptionsInput) (req *aws.Request, output *DescribeOptionGroupOptionsOutput) {
	if opDescribeOptionGroupOptions == nil {
		opDescribeOptionGroupOptions = &aws.Operation{
			Name:       "DescribeOptionGroupOptions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeOptionGroupOptions, input, output)
	output = &DescribeOptionGroupOptionsOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeOptionGroupOptions(input *DescribeOptionGroupOptionsInput) (output *DescribeOptionGroupOptionsOutput, err error) {
	req, out := c.DescribeOptionGroupOptionsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeOptionGroupOptionsPages(input *DescribeOptionGroupOptionsInput) <-chan *DescribeOptionGroupOptionsOutput {
	page, _ := c.DescribeOptionGroupOptionsRequest(input)
	ch := make(chan *DescribeOptionGroupOptionsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeOptionGroupOptionsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeOptionGroupOptions *aws.Operation

// DescribeOptionGroupsRequest generates a request for the DescribeOptionGroups operation.
func (c *RDS) DescribeOptionGroupsRequest(input *DescribeOptionGroupsInput) (req *aws.Request, output *DescribeOptionGroupsOutput) {
	if opDescribeOptionGroups == nil {
		opDescribeOptionGroups = &aws.Operation{
			Name:       "DescribeOptionGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeOptionGroups, input, output)
	output = &DescribeOptionGroupsOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeOptionGroups(input *DescribeOptionGroupsInput) (output *DescribeOptionGroupsOutput, err error) {
	req, out := c.DescribeOptionGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeOptionGroupsPages(input *DescribeOptionGroupsInput) <-chan *DescribeOptionGroupsOutput {
	page, _ := c.DescribeOptionGroupsRequest(input)
	ch := make(chan *DescribeOptionGroupsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeOptionGroupsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeOptionGroups *aws.Operation

// DescribeOrderableDBInstanceOptionsRequest generates a request for the DescribeOrderableDBInstanceOptions operation.
func (c *RDS) DescribeOrderableDBInstanceOptionsRequest(input *DescribeOrderableDBInstanceOptionsInput) (req *aws.Request, output *DescribeOrderableDBInstanceOptionsOutput) {
	if opDescribeOrderableDBInstanceOptions == nil {
		opDescribeOrderableDBInstanceOptions = &aws.Operation{
			Name:       "DescribeOrderableDBInstanceOptions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeOrderableDBInstanceOptions, input, output)
	output = &DescribeOrderableDBInstanceOptionsOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeOrderableDBInstanceOptions(input *DescribeOrderableDBInstanceOptionsInput) (output *DescribeOrderableDBInstanceOptionsOutput, err error) {
	req, out := c.DescribeOrderableDBInstanceOptionsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeOrderableDBInstanceOptionsPages(input *DescribeOrderableDBInstanceOptionsInput) <-chan *DescribeOrderableDBInstanceOptionsOutput {
	page, _ := c.DescribeOrderableDBInstanceOptionsRequest(input)
	ch := make(chan *DescribeOrderableDBInstanceOptionsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeOrderableDBInstanceOptionsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeOrderableDBInstanceOptions *aws.Operation

// DescribePendingMaintenanceActionsRequest generates a request for the DescribePendingMaintenanceActions operation.
func (c *RDS) DescribePendingMaintenanceActionsRequest(input *DescribePendingMaintenanceActionsInput) (req *aws.Request, output *DescribePendingMaintenanceActionsOutput) {
	if opDescribePendingMaintenanceActions == nil {
		opDescribePendingMaintenanceActions = &aws.Operation{
			Name:       "DescribePendingMaintenanceActions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribePendingMaintenanceActions, input, output)
	output = &DescribePendingMaintenanceActionsOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribePendingMaintenanceActions(input *DescribePendingMaintenanceActionsInput) (output *DescribePendingMaintenanceActionsOutput, err error) {
	req, out := c.DescribePendingMaintenanceActionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribePendingMaintenanceActions *aws.Operation

// DescribeReservedDBInstancesRequest generates a request for the DescribeReservedDBInstances operation.
func (c *RDS) DescribeReservedDBInstancesRequest(input *DescribeReservedDBInstancesInput) (req *aws.Request, output *DescribeReservedDBInstancesOutput) {
	if opDescribeReservedDBInstances == nil {
		opDescribeReservedDBInstances = &aws.Operation{
			Name:       "DescribeReservedDBInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeReservedDBInstances, input, output)
	output = &DescribeReservedDBInstancesOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeReservedDBInstances(input *DescribeReservedDBInstancesInput) (output *DescribeReservedDBInstancesOutput, err error) {
	req, out := c.DescribeReservedDBInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeReservedDBInstancesPages(input *DescribeReservedDBInstancesInput) <-chan *DescribeReservedDBInstancesOutput {
	page, _ := c.DescribeReservedDBInstancesRequest(input)
	ch := make(chan *DescribeReservedDBInstancesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeReservedDBInstancesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeReservedDBInstances *aws.Operation

// DescribeReservedDBInstancesOfferingsRequest generates a request for the DescribeReservedDBInstancesOfferings operation.
func (c *RDS) DescribeReservedDBInstancesOfferingsRequest(input *DescribeReservedDBInstancesOfferingsInput) (req *aws.Request, output *DescribeReservedDBInstancesOfferingsOutput) {
	if opDescribeReservedDBInstancesOfferings == nil {
		opDescribeReservedDBInstancesOfferings = &aws.Operation{
			Name:       "DescribeReservedDBInstancesOfferings",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "MaxRecords",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDescribeReservedDBInstancesOfferings, input, output)
	output = &DescribeReservedDBInstancesOfferingsOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeReservedDBInstancesOfferings(input *DescribeReservedDBInstancesOfferingsInput) (output *DescribeReservedDBInstancesOfferingsOutput, err error) {
	req, out := c.DescribeReservedDBInstancesOfferingsRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DescribeReservedDBInstancesOfferingsPages(input *DescribeReservedDBInstancesOfferingsInput) <-chan *DescribeReservedDBInstancesOfferingsOutput {
	page, _ := c.DescribeReservedDBInstancesOfferingsRequest(input)
	ch := make(chan *DescribeReservedDBInstancesOfferingsOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DescribeReservedDBInstancesOfferingsOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDescribeReservedDBInstancesOfferings *aws.Operation

// DownloadDBLogFilePortionRequest generates a request for the DownloadDBLogFilePortion operation.
func (c *RDS) DownloadDBLogFilePortionRequest(input *DownloadDBLogFilePortionInput) (req *aws.Request, output *DownloadDBLogFilePortionOutput) {
	if opDownloadDBLogFilePortion == nil {
		opDownloadDBLogFilePortion = &aws.Operation{
			Name:       "DownloadDBLogFilePortion",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "Marker",
				OutputToken:     "Marker",
				LimitToken:      "NumberOfLines",
				TruncationToken: "AdditionalDataPending",
			},
		}
	}

	req = aws.NewRequest(c.Service, opDownloadDBLogFilePortion, input, output)
	output = &DownloadDBLogFilePortionOutput{}
	req.Data = output
	return
}

func (c *RDS) DownloadDBLogFilePortion(input *DownloadDBLogFilePortionInput) (output *DownloadDBLogFilePortionOutput, err error) {
	req, out := c.DownloadDBLogFilePortionRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) DownloadDBLogFilePortionPages(input *DownloadDBLogFilePortionInput) <-chan *DownloadDBLogFilePortionOutput {
	page, _ := c.DownloadDBLogFilePortionRequest(input)
	ch := make(chan *DownloadDBLogFilePortionOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*DownloadDBLogFilePortionOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opDownloadDBLogFilePortion *aws.Operation

// ListTagsForResourceRequest generates a request for the ListTagsForResource operation.
func (c *RDS) ListTagsForResourceRequest(input *ListTagsForResourceInput) (req *aws.Request, output *ListTagsForResourceOutput) {
	if opListTagsForResource == nil {
		opListTagsForResource = &aws.Operation{
			Name:       "ListTagsForResource",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "",
				OutputToken:     "",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListTagsForResource, input, output)
	output = &ListTagsForResourceOutput{}
	req.Data = output
	return
}

func (c *RDS) ListTagsForResource(input *ListTagsForResourceInput) (output *ListTagsForResourceOutput, err error) {
	req, out := c.ListTagsForResourceRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *RDS) ListTagsForResourcePages(input *ListTagsForResourceInput) <-chan *ListTagsForResourceOutput {
	page, _ := c.ListTagsForResourceRequest(input)
	ch := make(chan *ListTagsForResourceOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListTagsForResourceOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListTagsForResource *aws.Operation

// ModifyDBInstanceRequest generates a request for the ModifyDBInstance operation.
func (c *RDS) ModifyDBInstanceRequest(input *ModifyDBInstanceInput) (req *aws.Request, output *ModifyDBInstanceOutput) {
	if opModifyDBInstance == nil {
		opModifyDBInstance = &aws.Operation{
			Name:       "ModifyDBInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyDBInstance, input, output)
	output = &ModifyDBInstanceOutput{}
	req.Data = output
	return
}

func (c *RDS) ModifyDBInstance(input *ModifyDBInstanceInput) (output *ModifyDBInstanceOutput, err error) {
	req, out := c.ModifyDBInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyDBInstance *aws.Operation

// ModifyDBParameterGroupRequest generates a request for the ModifyDBParameterGroup operation.
func (c *RDS) ModifyDBParameterGroupRequest(input *ModifyDBParameterGroupInput) (req *aws.Request, output *DBParameterGroupNameMessage) {
	if opModifyDBParameterGroup == nil {
		opModifyDBParameterGroup = &aws.Operation{
			Name:       "ModifyDBParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyDBParameterGroup, input, output)
	output = &DBParameterGroupNameMessage{}
	req.Data = output
	return
}

func (c *RDS) ModifyDBParameterGroup(input *ModifyDBParameterGroupInput) (output *DBParameterGroupNameMessage, err error) {
	req, out := c.ModifyDBParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyDBParameterGroup *aws.Operation

// ModifyDBSubnetGroupRequest generates a request for the ModifyDBSubnetGroup operation.
func (c *RDS) ModifyDBSubnetGroupRequest(input *ModifyDBSubnetGroupInput) (req *aws.Request, output *ModifyDBSubnetGroupOutput) {
	if opModifyDBSubnetGroup == nil {
		opModifyDBSubnetGroup = &aws.Operation{
			Name:       "ModifyDBSubnetGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyDBSubnetGroup, input, output)
	output = &ModifyDBSubnetGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) ModifyDBSubnetGroup(input *ModifyDBSubnetGroupInput) (output *ModifyDBSubnetGroupOutput, err error) {
	req, out := c.ModifyDBSubnetGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyDBSubnetGroup *aws.Operation

// ModifyEventSubscriptionRequest generates a request for the ModifyEventSubscription operation.
func (c *RDS) ModifyEventSubscriptionRequest(input *ModifyEventSubscriptionInput) (req *aws.Request, output *ModifyEventSubscriptionOutput) {
	if opModifyEventSubscription == nil {
		opModifyEventSubscription = &aws.Operation{
			Name:       "ModifyEventSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyEventSubscription, input, output)
	output = &ModifyEventSubscriptionOutput{}
	req.Data = output
	return
}

func (c *RDS) ModifyEventSubscription(input *ModifyEventSubscriptionInput) (output *ModifyEventSubscriptionOutput, err error) {
	req, out := c.ModifyEventSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyEventSubscription *aws.Operation

// ModifyOptionGroupRequest generates a request for the ModifyOptionGroup operation.
func (c *RDS) ModifyOptionGroupRequest(input *ModifyOptionGroupInput) (req *aws.Request, output *ModifyOptionGroupOutput) {
	if opModifyOptionGroup == nil {
		opModifyOptionGroup = &aws.Operation{
			Name:       "ModifyOptionGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyOptionGroup, input, output)
	output = &ModifyOptionGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) ModifyOptionGroup(input *ModifyOptionGroupInput) (output *ModifyOptionGroupOutput, err error) {
	req, out := c.ModifyOptionGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyOptionGroup *aws.Operation

// PromoteReadReplicaRequest generates a request for the PromoteReadReplica operation.
func (c *RDS) PromoteReadReplicaRequest(input *PromoteReadReplicaInput) (req *aws.Request, output *PromoteReadReplicaOutput) {
	if opPromoteReadReplica == nil {
		opPromoteReadReplica = &aws.Operation{
			Name:       "PromoteReadReplica",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPromoteReadReplica, input, output)
	output = &PromoteReadReplicaOutput{}
	req.Data = output
	return
}

func (c *RDS) PromoteReadReplica(input *PromoteReadReplicaInput) (output *PromoteReadReplicaOutput, err error) {
	req, out := c.PromoteReadReplicaRequest(input)
	output = out
	err = req.Send()
	return
}

var opPromoteReadReplica *aws.Operation

// PurchaseReservedDBInstancesOfferingRequest generates a request for the PurchaseReservedDBInstancesOffering operation.
func (c *RDS) PurchaseReservedDBInstancesOfferingRequest(input *PurchaseReservedDBInstancesOfferingInput) (req *aws.Request, output *PurchaseReservedDBInstancesOfferingOutput) {
	if opPurchaseReservedDBInstancesOffering == nil {
		opPurchaseReservedDBInstancesOffering = &aws.Operation{
			Name:       "PurchaseReservedDBInstancesOffering",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPurchaseReservedDBInstancesOffering, input, output)
	output = &PurchaseReservedDBInstancesOfferingOutput{}
	req.Data = output
	return
}

func (c *RDS) PurchaseReservedDBInstancesOffering(input *PurchaseReservedDBInstancesOfferingInput) (output *PurchaseReservedDBInstancesOfferingOutput, err error) {
	req, out := c.PurchaseReservedDBInstancesOfferingRequest(input)
	output = out
	err = req.Send()
	return
}

var opPurchaseReservedDBInstancesOffering *aws.Operation

// RebootDBInstanceRequest generates a request for the RebootDBInstance operation.
func (c *RDS) RebootDBInstanceRequest(input *RebootDBInstanceInput) (req *aws.Request, output *RebootDBInstanceOutput) {
	if opRebootDBInstance == nil {
		opRebootDBInstance = &aws.Operation{
			Name:       "RebootDBInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRebootDBInstance, input, output)
	output = &RebootDBInstanceOutput{}
	req.Data = output
	return
}

func (c *RDS) RebootDBInstance(input *RebootDBInstanceInput) (output *RebootDBInstanceOutput, err error) {
	req, out := c.RebootDBInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opRebootDBInstance *aws.Operation

// RemoveSourceIdentifierFromSubscriptionRequest generates a request for the RemoveSourceIdentifierFromSubscription operation.
func (c *RDS) RemoveSourceIdentifierFromSubscriptionRequest(input *RemoveSourceIdentifierFromSubscriptionInput) (req *aws.Request, output *RemoveSourceIdentifierFromSubscriptionOutput) {
	if opRemoveSourceIdentifierFromSubscription == nil {
		opRemoveSourceIdentifierFromSubscription = &aws.Operation{
			Name:       "RemoveSourceIdentifierFromSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRemoveSourceIdentifierFromSubscription, input, output)
	output = &RemoveSourceIdentifierFromSubscriptionOutput{}
	req.Data = output
	return
}

func (c *RDS) RemoveSourceIdentifierFromSubscription(input *RemoveSourceIdentifierFromSubscriptionInput) (output *RemoveSourceIdentifierFromSubscriptionOutput, err error) {
	req, out := c.RemoveSourceIdentifierFromSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opRemoveSourceIdentifierFromSubscription *aws.Operation

// RemoveTagsFromResourceRequest generates a request for the RemoveTagsFromResource operation.
func (c *RDS) RemoveTagsFromResourceRequest(input *RemoveTagsFromResourceInput) (req *aws.Request, output *RemoveTagsFromResourceOutput) {
	if opRemoveTagsFromResource == nil {
		opRemoveTagsFromResource = &aws.Operation{
			Name:       "RemoveTagsFromResource",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRemoveTagsFromResource, input, output)
	output = &RemoveTagsFromResourceOutput{}
	req.Data = output
	return
}

func (c *RDS) RemoveTagsFromResource(input *RemoveTagsFromResourceInput) (output *RemoveTagsFromResourceOutput, err error) {
	req, out := c.RemoveTagsFromResourceRequest(input)
	output = out
	err = req.Send()
	return
}

var opRemoveTagsFromResource *aws.Operation

// ResetDBParameterGroupRequest generates a request for the ResetDBParameterGroup operation.
func (c *RDS) ResetDBParameterGroupRequest(input *ResetDBParameterGroupInput) (req *aws.Request, output *DBParameterGroupNameMessage) {
	if opResetDBParameterGroup == nil {
		opResetDBParameterGroup = &aws.Operation{
			Name:       "ResetDBParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opResetDBParameterGroup, input, output)
	output = &DBParameterGroupNameMessage{}
	req.Data = output
	return
}

func (c *RDS) ResetDBParameterGroup(input *ResetDBParameterGroupInput) (output *DBParameterGroupNameMessage, err error) {
	req, out := c.ResetDBParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opResetDBParameterGroup *aws.Operation

// RestoreDBInstanceFromDBSnapshotRequest generates a request for the RestoreDBInstanceFromDBSnapshot operation.
func (c *RDS) RestoreDBInstanceFromDBSnapshotRequest(input *RestoreDBInstanceFromDBSnapshotInput) (req *aws.Request, output *RestoreDBInstanceFromDBSnapshotOutput) {
	if opRestoreDBInstanceFromDBSnapshot == nil {
		opRestoreDBInstanceFromDBSnapshot = &aws.Operation{
			Name:       "RestoreDBInstanceFromDBSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRestoreDBInstanceFromDBSnapshot, input, output)
	output = &RestoreDBInstanceFromDBSnapshotOutput{}
	req.Data = output
	return
}

func (c *RDS) RestoreDBInstanceFromDBSnapshot(input *RestoreDBInstanceFromDBSnapshotInput) (output *RestoreDBInstanceFromDBSnapshotOutput, err error) {
	req, out := c.RestoreDBInstanceFromDBSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opRestoreDBInstanceFromDBSnapshot *aws.Operation

// RestoreDBInstanceToPointInTimeRequest generates a request for the RestoreDBInstanceToPointInTime operation.
func (c *RDS) RestoreDBInstanceToPointInTimeRequest(input *RestoreDBInstanceToPointInTimeInput) (req *aws.Request, output *RestoreDBInstanceToPointInTimeOutput) {
	if opRestoreDBInstanceToPointInTime == nil {
		opRestoreDBInstanceToPointInTime = &aws.Operation{
			Name:       "RestoreDBInstanceToPointInTime",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRestoreDBInstanceToPointInTime, input, output)
	output = &RestoreDBInstanceToPointInTimeOutput{}
	req.Data = output
	return
}

func (c *RDS) RestoreDBInstanceToPointInTime(input *RestoreDBInstanceToPointInTimeInput) (output *RestoreDBInstanceToPointInTimeOutput, err error) {
	req, out := c.RestoreDBInstanceToPointInTimeRequest(input)
	output = out
	err = req.Send()
	return
}

var opRestoreDBInstanceToPointInTime *aws.Operation

// RevokeDBSecurityGroupIngressRequest generates a request for the RevokeDBSecurityGroupIngress operation.
func (c *RDS) RevokeDBSecurityGroupIngressRequest(input *RevokeDBSecurityGroupIngressInput) (req *aws.Request, output *RevokeDBSecurityGroupIngressOutput) {
	if opRevokeDBSecurityGroupIngress == nil {
		opRevokeDBSecurityGroupIngress = &aws.Operation{
			Name:       "RevokeDBSecurityGroupIngress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRevokeDBSecurityGroupIngress, input, output)
	output = &RevokeDBSecurityGroupIngressOutput{}
	req.Data = output
	return
}

func (c *RDS) RevokeDBSecurityGroupIngress(input *RevokeDBSecurityGroupIngressInput) (output *RevokeDBSecurityGroupIngressOutput, err error) {
	req, out := c.RevokeDBSecurityGroupIngressRequest(input)
	output = out
	err = req.Send()
	return
}

var opRevokeDBSecurityGroupIngress *aws.Operation

type AddSourceIdentifierToSubscriptionInput struct {
	SourceIdentifier *string `type:"string" required:"true"`
	SubscriptionName *string `type:"string" required:"true"`

	metadataAddSourceIdentifierToSubscriptionInput `json:"-", xml:"-"`
}

type metadataAddSourceIdentifierToSubscriptionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AddSourceIdentifierToSubscriptionOutput struct {
	EventSubscription *EventSubscription `type:"structure"`

	metadataAddSourceIdentifierToSubscriptionOutput `json:"-", xml:"-"`
}

type metadataAddSourceIdentifierToSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AddTagsToResourceInput struct {
	ResourceName *string `type:"string" required:"true"`
	Tags         []*Tag  `locationNameList:"Tag" type:"list" required:"true"`

	metadataAddTagsToResourceInput `json:"-", xml:"-"`
}

type metadataAddTagsToResourceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AddTagsToResourceOutput struct {
	metadataAddTagsToResourceOutput `json:"-", xml:"-"`
}

type metadataAddTagsToResourceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ApplyPendingMaintenanceActionInput struct {
	ApplyAction        *string `type:"string" required:"true"`
	OptInType          *string `type:"string" required:"true"`
	ResourceIdentifier *string `type:"string" required:"true"`

	metadataApplyPendingMaintenanceActionInput `json:"-", xml:"-"`
}

type metadataApplyPendingMaintenanceActionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ApplyPendingMaintenanceActionOutput struct {
	ResourcePendingMaintenanceActions *ResourcePendingMaintenanceActions `type:"structure"`

	metadataApplyPendingMaintenanceActionOutput `json:"-", xml:"-"`
}

type metadataApplyPendingMaintenanceActionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AuthorizeDBSecurityGroupIngressInput struct {
	CIDRIP                  *string `type:"string"`
	DBSecurityGroupName     *string `type:"string" required:"true"`
	EC2SecurityGroupID      *string `locationName:"EC2SecurityGroupId" type:"string"`
	EC2SecurityGroupName    *string `type:"string"`
	EC2SecurityGroupOwnerID *string `locationName:"EC2SecurityGroupOwnerId" type:"string"`

	metadataAuthorizeDBSecurityGroupIngressInput `json:"-", xml:"-"`
}

type metadataAuthorizeDBSecurityGroupIngressInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AuthorizeDBSecurityGroupIngressOutput struct {
	DBSecurityGroup *DBSecurityGroup `type:"structure"`

	metadataAuthorizeDBSecurityGroupIngressOutput `json:"-", xml:"-"`
}

type metadataAuthorizeDBSecurityGroupIngressOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AvailabilityZone struct {
	Name *string `type:"string"`

	metadataAvailabilityZone `json:"-", xml:"-"`
}

type metadataAvailabilityZone struct {
	SDKShapeTraits bool `type:"structure"`
}

type CharacterSet struct {
	CharacterSetDescription *string `type:"string"`
	CharacterSetName        *string `type:"string"`

	metadataCharacterSet `json:"-", xml:"-"`
}

type metadataCharacterSet struct {
	SDKShapeTraits bool `type:"structure"`
}

type CopyDBParameterGroupInput struct {
	SourceDBParameterGroupIdentifier  *string `type:"string" required:"true"`
	Tags                              []*Tag  `locationNameList:"Tag" type:"list"`
	TargetDBParameterGroupDescription *string `type:"string" required:"true"`
	TargetDBParameterGroupIdentifier  *string `type:"string" required:"true"`

	metadataCopyDBParameterGroupInput `json:"-", xml:"-"`
}

type metadataCopyDBParameterGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CopyDBParameterGroupOutput struct {
	DBParameterGroup *DBParameterGroup `type:"structure"`

	metadataCopyDBParameterGroupOutput `json:"-", xml:"-"`
}

type metadataCopyDBParameterGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CopyDBSnapshotInput struct {
	SourceDBSnapshotIdentifier *string `type:"string" required:"true"`
	Tags                       []*Tag  `locationNameList:"Tag" type:"list"`
	TargetDBSnapshotIdentifier *string `type:"string" required:"true"`

	metadataCopyDBSnapshotInput `json:"-", xml:"-"`
}

type metadataCopyDBSnapshotInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CopyDBSnapshotOutput struct {
	DBSnapshot *DBSnapshot `type:"structure"`

	metadataCopyDBSnapshotOutput `json:"-", xml:"-"`
}

type metadataCopyDBSnapshotOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CopyOptionGroupInput struct {
	SourceOptionGroupIdentifier  *string `type:"string" required:"true"`
	Tags                         []*Tag  `locationNameList:"Tag" type:"list"`
	TargetOptionGroupDescription *string `type:"string" required:"true"`
	TargetOptionGroupIdentifier  *string `type:"string" required:"true"`

	metadataCopyOptionGroupInput `json:"-", xml:"-"`
}

type metadataCopyOptionGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CopyOptionGroupOutput struct {
	OptionGroup *OptionGroup `type:"structure"`

	metadataCopyOptionGroupOutput `json:"-", xml:"-"`
}

type metadataCopyOptionGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDBInstanceInput struct {
	AllocatedStorage           *int64    `type:"integer" required:"true"`
	AutoMinorVersionUpgrade    *bool     `type:"boolean"`
	AvailabilityZone           *string   `type:"string"`
	BackupRetentionPeriod      *int64    `type:"integer"`
	CharacterSetName           *string   `type:"string"`
	DBInstanceClass            *string   `type:"string" required:"true"`
	DBInstanceIdentifier       *string   `type:"string" required:"true"`
	DBName                     *string   `type:"string"`
	DBParameterGroupName       *string   `type:"string"`
	DBSecurityGroups           []*string `locationNameList:"DBSecurityGroupName" type:"list"`
	DBSubnetGroupName          *string   `type:"string"`
	Engine                     *string   `type:"string" required:"true"`
	EngineVersion              *string   `type:"string"`
	IOPS                       *int64    `locationName:"Iops" type:"integer"`
	KMSKeyID                   *string   `locationName:"KmsKeyId" type:"string"`
	LicenseModel               *string   `type:"string"`
	MasterUserPassword         *string   `type:"string" required:"true"`
	MasterUsername             *string   `type:"string" required:"true"`
	MultiAZ                    *bool     `type:"boolean"`
	OptionGroupName            *string   `type:"string"`
	Port                       *int64    `type:"integer"`
	PreferredBackupWindow      *string   `type:"string"`
	PreferredMaintenanceWindow *string   `type:"string"`
	PubliclyAccessible         *bool     `type:"boolean"`
	StorageEncrypted           *bool     `type:"boolean"`
	StorageType                *string   `type:"string"`
	TDECredentialARN           *string   `locationName:"TdeCredentialArn" type:"string"`
	TDECredentialPassword      *string   `locationName:"TdeCredentialPassword" type:"string"`
	Tags                       []*Tag    `locationNameList:"Tag" type:"list"`
	VPCSecurityGroupIDs        []*string `locationName:"VpcSecurityGroupIds" locationNameList:"VpcSecurityGroupId" type:"list"`

	metadataCreateDBInstanceInput `json:"-", xml:"-"`
}

type metadataCreateDBInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDBInstanceOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataCreateDBInstanceOutput `json:"-", xml:"-"`
}

type metadataCreateDBInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDBInstanceReadReplicaInput struct {
	AutoMinorVersionUpgrade    *bool   `type:"boolean"`
	AvailabilityZone           *string `type:"string"`
	DBInstanceClass            *string `type:"string"`
	DBInstanceIdentifier       *string `type:"string" required:"true"`
	DBSubnetGroupName          *string `type:"string"`
	IOPS                       *int64  `locationName:"Iops" type:"integer"`
	OptionGroupName            *string `type:"string"`
	Port                       *int64  `type:"integer"`
	PubliclyAccessible         *bool   `type:"boolean"`
	SourceDBInstanceIdentifier *string `type:"string" required:"true"`
	StorageType                *string `type:"string"`
	Tags                       []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateDBInstanceReadReplicaInput `json:"-", xml:"-"`
}

type metadataCreateDBInstanceReadReplicaInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDBInstanceReadReplicaOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataCreateDBInstanceReadReplicaOutput `json:"-", xml:"-"`
}

type metadataCreateDBInstanceReadReplicaOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDBParameterGroupInput struct {
	DBParameterGroupFamily *string `type:"string" required:"true"`
	DBParameterGroupName   *string `type:"string" required:"true"`
	Description            *string `type:"string" required:"true"`
	Tags                   []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateDBParameterGroupInput `json:"-", xml:"-"`
}

type metadataCreateDBParameterGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDBParameterGroupOutput struct {
	DBParameterGroup *DBParameterGroup `type:"structure"`

	metadataCreateDBParameterGroupOutput `json:"-", xml:"-"`
}

type metadataCreateDBParameterGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDBSecurityGroupInput struct {
	DBSecurityGroupDescription *string `type:"string" required:"true"`
	DBSecurityGroupName        *string `type:"string" required:"true"`
	Tags                       []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateDBSecurityGroupInput `json:"-", xml:"-"`
}

type metadataCreateDBSecurityGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDBSecurityGroupOutput struct {
	DBSecurityGroup *DBSecurityGroup `type:"structure"`

	metadataCreateDBSecurityGroupOutput `json:"-", xml:"-"`
}

type metadataCreateDBSecurityGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDBSnapshotInput struct {
	DBInstanceIdentifier *string `type:"string" required:"true"`
	DBSnapshotIdentifier *string `type:"string" required:"true"`
	Tags                 []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateDBSnapshotInput `json:"-", xml:"-"`
}

type metadataCreateDBSnapshotInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDBSnapshotOutput struct {
	DBSnapshot *DBSnapshot `type:"structure"`

	metadataCreateDBSnapshotOutput `json:"-", xml:"-"`
}

type metadataCreateDBSnapshotOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDBSubnetGroupInput struct {
	DBSubnetGroupDescription *string   `type:"string" required:"true"`
	DBSubnetGroupName        *string   `type:"string" required:"true"`
	SubnetIDs                []*string `locationName:"SubnetIds" locationNameList:"SubnetIdentifier" type:"list" required:"true"`
	Tags                     []*Tag    `locationNameList:"Tag" type:"list"`

	metadataCreateDBSubnetGroupInput `json:"-", xml:"-"`
}

type metadataCreateDBSubnetGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDBSubnetGroupOutput struct {
	DBSubnetGroup *DBSubnetGroup `type:"structure"`

	metadataCreateDBSubnetGroupOutput `json:"-", xml:"-"`
}

type metadataCreateDBSubnetGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateEventSubscriptionInput struct {
	Enabled          *bool     `type:"boolean"`
	EventCategories  []*string `locationNameList:"EventCategory" type:"list"`
	SNSTopicARN      *string   `locationName:"SnsTopicArn" type:"string" required:"true"`
	SourceIDs        []*string `locationName:"SourceIds" locationNameList:"SourceId" type:"list"`
	SourceType       *string   `type:"string"`
	SubscriptionName *string   `type:"string" required:"true"`
	Tags             []*Tag    `locationNameList:"Tag" type:"list"`

	metadataCreateEventSubscriptionInput `json:"-", xml:"-"`
}

type metadataCreateEventSubscriptionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateEventSubscriptionOutput struct {
	EventSubscription *EventSubscription `type:"structure"`

	metadataCreateEventSubscriptionOutput `json:"-", xml:"-"`
}

type metadataCreateEventSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateOptionGroupInput struct {
	EngineName             *string `type:"string" required:"true"`
	MajorEngineVersion     *string `type:"string" required:"true"`
	OptionGroupDescription *string `type:"string" required:"true"`
	OptionGroupName        *string `type:"string" required:"true"`
	Tags                   []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateOptionGroupInput `json:"-", xml:"-"`
}

type metadataCreateOptionGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateOptionGroupOutput struct {
	OptionGroup *OptionGroup `type:"structure"`

	metadataCreateOptionGroupOutput `json:"-", xml:"-"`
}

type metadataCreateOptionGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBEngineVersion struct {
	DBEngineDescription        *string         `type:"string"`
	DBEngineVersionDescription *string         `type:"string"`
	DBParameterGroupFamily     *string         `type:"string"`
	DefaultCharacterSet        *CharacterSet   `type:"structure"`
	Engine                     *string         `type:"string"`
	EngineVersion              *string         `type:"string"`
	SupportedCharacterSets     []*CharacterSet `locationNameList:"CharacterSet" type:"list"`

	metadataDBEngineVersion `json:"-", xml:"-"`
}

type metadataDBEngineVersion struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBInstance struct {
	AllocatedStorage                      *int64                        `type:"integer"`
	AutoMinorVersionUpgrade               *bool                         `type:"boolean"`
	AvailabilityZone                      *string                       `type:"string"`
	BackupRetentionPeriod                 *int64                        `type:"integer"`
	CharacterSetName                      *string                       `type:"string"`
	DBInstanceClass                       *string                       `type:"string"`
	DBInstanceIdentifier                  *string                       `type:"string"`
	DBInstanceStatus                      *string                       `type:"string"`
	DBName                                *string                       `type:"string"`
	DBParameterGroups                     []*DBParameterGroupStatus     `locationNameList:"DBParameterGroup" type:"list"`
	DBSecurityGroups                      []*DBSecurityGroupMembership  `locationNameList:"DBSecurityGroup" type:"list"`
	DBSubnetGroup                         *DBSubnetGroup                `type:"structure"`
	DBiResourceID                         *string                       `locationName:"DbiResourceId" type:"string"`
	Endpoint                              *Endpoint                     `type:"structure"`
	Engine                                *string                       `type:"string"`
	EngineVersion                         *string                       `type:"string"`
	IOPS                                  *int64                        `locationName:"Iops" type:"integer"`
	InstanceCreateTime                    *time.Time                    `type:"timestamp" timestampFormat:"iso8601"`
	KMSKeyID                              *string                       `locationName:"KmsKeyId" type:"string"`
	LatestRestorableTime                  *time.Time                    `type:"timestamp" timestampFormat:"iso8601"`
	LicenseModel                          *string                       `type:"string"`
	MasterUsername                        *string                       `type:"string"`
	MultiAZ                               *bool                         `type:"boolean"`
	OptionGroupMemberships                []*OptionGroupMembership      `locationNameList:"OptionGroupMembership" type:"list"`
	PendingModifiedValues                 *PendingModifiedValues        `type:"structure"`
	PreferredBackupWindow                 *string                       `type:"string"`
	PreferredMaintenanceWindow            *string                       `type:"string"`
	PubliclyAccessible                    *bool                         `type:"boolean"`
	ReadReplicaDBInstanceIdentifiers      []*string                     `locationNameList:"ReadReplicaDBInstanceIdentifier" type:"list"`
	ReadReplicaSourceDBInstanceIdentifier *string                       `type:"string"`
	SecondaryAvailabilityZone             *string                       `type:"string"`
	StatusInfos                           []*DBInstanceStatusInfo       `locationNameList:"DBInstanceStatusInfo" type:"list"`
	StorageEncrypted                      *bool                         `type:"boolean"`
	StorageType                           *string                       `type:"string"`
	TDECredentialARN                      *string                       `locationName:"TdeCredentialArn" type:"string"`
	VPCSecurityGroups                     []*VPCSecurityGroupMembership `locationName:"VpcSecurityGroups" locationNameList:"VpcSecurityGroupMembership" type:"list"`

	metadataDBInstance `json:"-", xml:"-"`
}

type metadataDBInstance struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBInstanceStatusInfo struct {
	Message    *string `type:"string"`
	Normal     *bool   `type:"boolean"`
	Status     *string `type:"string"`
	StatusType *string `type:"string"`

	metadataDBInstanceStatusInfo `json:"-", xml:"-"`
}

type metadataDBInstanceStatusInfo struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBParameterGroup struct {
	DBParameterGroupFamily *string `type:"string"`
	DBParameterGroupName   *string `type:"string"`
	Description            *string `type:"string"`

	metadataDBParameterGroup `json:"-", xml:"-"`
}

type metadataDBParameterGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBParameterGroupNameMessage struct {
	DBParameterGroupName *string `type:"string"`

	metadataDBParameterGroupNameMessage `json:"-", xml:"-"`
}

type metadataDBParameterGroupNameMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBParameterGroupStatus struct {
	DBParameterGroupName *string `type:"string"`
	ParameterApplyStatus *string `type:"string"`

	metadataDBParameterGroupStatus `json:"-", xml:"-"`
}

type metadataDBParameterGroupStatus struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSecurityGroup struct {
	DBSecurityGroupDescription *string             `type:"string"`
	DBSecurityGroupName        *string             `type:"string"`
	EC2SecurityGroups          []*EC2SecurityGroup `locationNameList:"EC2SecurityGroup" type:"list"`
	IPRanges                   []*IPRange          `locationNameList:"IPRange" type:"list"`
	OwnerID                    *string             `locationName:"OwnerId" type:"string"`
	VPCID                      *string             `locationName:"VpcId" type:"string"`

	metadataDBSecurityGroup `json:"-", xml:"-"`
}

type metadataDBSecurityGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSecurityGroupMembership struct {
	DBSecurityGroupName *string `type:"string"`
	Status              *string `type:"string"`

	metadataDBSecurityGroupMembership `json:"-", xml:"-"`
}

type metadataDBSecurityGroupMembership struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSnapshot struct {
	AllocatedStorage     *int64     `type:"integer"`
	AvailabilityZone     *string    `type:"string"`
	DBInstanceIdentifier *string    `type:"string"`
	DBSnapshotIdentifier *string    `type:"string"`
	Encrypted            *bool      `type:"boolean"`
	Engine               *string    `type:"string"`
	EngineVersion        *string    `type:"string"`
	IOPS                 *int64     `locationName:"Iops" type:"integer"`
	InstanceCreateTime   *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	KMSKeyID             *string    `locationName:"KmsKeyId" type:"string"`
	LicenseModel         *string    `type:"string"`
	MasterUsername       *string    `type:"string"`
	OptionGroupName      *string    `type:"string"`
	PercentProgress      *int64     `type:"integer"`
	Port                 *int64     `type:"integer"`
	SnapshotCreateTime   *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	SnapshotType         *string    `type:"string"`
	SourceRegion         *string    `type:"string"`
	Status               *string    `type:"string"`
	StorageType          *string    `type:"string"`
	TDECredentialARN     *string    `locationName:"TdeCredentialArn" type:"string"`
	VPCID                *string    `locationName:"VpcId" type:"string"`

	metadataDBSnapshot `json:"-", xml:"-"`
}

type metadataDBSnapshot struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSubnetGroup struct {
	DBSubnetGroupDescription *string   `type:"string"`
	DBSubnetGroupName        *string   `type:"string"`
	SubnetGroupStatus        *string   `type:"string"`
	Subnets                  []*Subnet `locationNameList:"Subnet" type:"list"`
	VPCID                    *string   `locationName:"VpcId" type:"string"`

	metadataDBSubnetGroup `json:"-", xml:"-"`
}

type metadataDBSubnetGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDBInstanceInput struct {
	DBInstanceIdentifier      *string `type:"string" required:"true"`
	FinalDBSnapshotIdentifier *string `type:"string"`
	SkipFinalSnapshot         *bool   `type:"boolean"`

	metadataDeleteDBInstanceInput `json:"-", xml:"-"`
}

type metadataDeleteDBInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDBInstanceOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataDeleteDBInstanceOutput `json:"-", xml:"-"`
}

type metadataDeleteDBInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDBParameterGroupInput struct {
	DBParameterGroupName *string `type:"string" required:"true"`

	metadataDeleteDBParameterGroupInput `json:"-", xml:"-"`
}

type metadataDeleteDBParameterGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDBParameterGroupOutput struct {
	metadataDeleteDBParameterGroupOutput `json:"-", xml:"-"`
}

type metadataDeleteDBParameterGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDBSecurityGroupInput struct {
	DBSecurityGroupName *string `type:"string" required:"true"`

	metadataDeleteDBSecurityGroupInput `json:"-", xml:"-"`
}

type metadataDeleteDBSecurityGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDBSecurityGroupOutput struct {
	metadataDeleteDBSecurityGroupOutput `json:"-", xml:"-"`
}

type metadataDeleteDBSecurityGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDBSnapshotInput struct {
	DBSnapshotIdentifier *string `type:"string" required:"true"`

	metadataDeleteDBSnapshotInput `json:"-", xml:"-"`
}

type metadataDeleteDBSnapshotInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDBSnapshotOutput struct {
	DBSnapshot *DBSnapshot `type:"structure"`

	metadataDeleteDBSnapshotOutput `json:"-", xml:"-"`
}

type metadataDeleteDBSnapshotOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDBSubnetGroupInput struct {
	DBSubnetGroupName *string `type:"string" required:"true"`

	metadataDeleteDBSubnetGroupInput `json:"-", xml:"-"`
}

type metadataDeleteDBSubnetGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDBSubnetGroupOutput struct {
	metadataDeleteDBSubnetGroupOutput `json:"-", xml:"-"`
}

type metadataDeleteDBSubnetGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteEventSubscriptionInput struct {
	SubscriptionName *string `type:"string" required:"true"`

	metadataDeleteEventSubscriptionInput `json:"-", xml:"-"`
}

type metadataDeleteEventSubscriptionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteEventSubscriptionOutput struct {
	EventSubscription *EventSubscription `type:"structure"`

	metadataDeleteEventSubscriptionOutput `json:"-", xml:"-"`
}

type metadataDeleteEventSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteOptionGroupInput struct {
	OptionGroupName *string `type:"string" required:"true"`

	metadataDeleteOptionGroupInput `json:"-", xml:"-"`
}

type metadataDeleteOptionGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteOptionGroupOutput struct {
	metadataDeleteOptionGroupOutput `json:"-", xml:"-"`
}

type metadataDeleteOptionGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBEngineVersionsInput struct {
	DBParameterGroupFamily     *string   `type:"string"`
	DefaultOnly                *bool     `type:"boolean"`
	Engine                     *string   `type:"string"`
	EngineVersion              *string   `type:"string"`
	Filters                    []*Filter `locationNameList:"Filter" type:"list"`
	ListSupportedCharacterSets *bool     `type:"boolean"`
	Marker                     *string   `type:"string"`
	MaxRecords                 *int64    `type:"integer"`

	metadataDescribeDBEngineVersionsInput `json:"-", xml:"-"`
}

type metadataDescribeDBEngineVersionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBEngineVersionsOutput struct {
	DBEngineVersions []*DBEngineVersion `locationNameList:"DBEngineVersion" type:"list"`
	Marker           *string            `type:"string"`

	metadataDescribeDBEngineVersionsOutput `json:"-", xml:"-"`
}

type metadataDescribeDBEngineVersionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBInstancesInput struct {
	DBInstanceIdentifier *string   `type:"string"`
	Filters              []*Filter `locationNameList:"Filter" type:"list"`
	Marker               *string   `type:"string"`
	MaxRecords           *int64    `type:"integer"`

	metadataDescribeDBInstancesInput `json:"-", xml:"-"`
}

type metadataDescribeDBInstancesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBInstancesOutput struct {
	DBInstances []*DBInstance `locationNameList:"DBInstance" type:"list"`
	Marker      *string       `type:"string"`

	metadataDescribeDBInstancesOutput `json:"-", xml:"-"`
}

type metadataDescribeDBInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBLogFilesDetails struct {
	LastWritten *int64  `type:"long"`
	LogFileName *string `type:"string"`
	Size        *int64  `type:"long"`

	metadataDescribeDBLogFilesDetails `json:"-", xml:"-"`
}

type metadataDescribeDBLogFilesDetails struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBLogFilesInput struct {
	DBInstanceIdentifier *string   `type:"string" required:"true"`
	FileLastWritten      *int64    `type:"long"`
	FileSize             *int64    `type:"long"`
	FilenameContains     *string   `type:"string"`
	Filters              []*Filter `locationNameList:"Filter" type:"list"`
	Marker               *string   `type:"string"`
	MaxRecords           *int64    `type:"integer"`

	metadataDescribeDBLogFilesInput `json:"-", xml:"-"`
}

type metadataDescribeDBLogFilesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBLogFilesOutput struct {
	DescribeDBLogFiles []*DescribeDBLogFilesDetails `locationNameList:"DescribeDBLogFilesDetails" type:"list"`
	Marker             *string                      `type:"string"`

	metadataDescribeDBLogFilesOutput `json:"-", xml:"-"`
}

type metadataDescribeDBLogFilesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBParameterGroupsInput struct {
	DBParameterGroupName *string   `type:"string"`
	Filters              []*Filter `locationNameList:"Filter" type:"list"`
	Marker               *string   `type:"string"`
	MaxRecords           *int64    `type:"integer"`

	metadataDescribeDBParameterGroupsInput `json:"-", xml:"-"`
}

type metadataDescribeDBParameterGroupsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBParameterGroupsOutput struct {
	DBParameterGroups []*DBParameterGroup `locationNameList:"DBParameterGroup" type:"list"`
	Marker            *string             `type:"string"`

	metadataDescribeDBParameterGroupsOutput `json:"-", xml:"-"`
}

type metadataDescribeDBParameterGroupsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBParametersInput struct {
	DBParameterGroupName *string   `type:"string" required:"true"`
	Filters              []*Filter `locationNameList:"Filter" type:"list"`
	Marker               *string   `type:"string"`
	MaxRecords           *int64    `type:"integer"`
	Source               *string   `type:"string"`

	metadataDescribeDBParametersInput `json:"-", xml:"-"`
}

type metadataDescribeDBParametersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBParametersOutput struct {
	Marker     *string      `type:"string"`
	Parameters []*Parameter `locationNameList:"Parameter" type:"list"`

	metadataDescribeDBParametersOutput `json:"-", xml:"-"`
}

type metadataDescribeDBParametersOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBSecurityGroupsInput struct {
	DBSecurityGroupName *string   `type:"string"`
	Filters             []*Filter `locationNameList:"Filter" type:"list"`
	Marker              *string   `type:"string"`
	MaxRecords          *int64    `type:"integer"`

	metadataDescribeDBSecurityGroupsInput `json:"-", xml:"-"`
}

type metadataDescribeDBSecurityGroupsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBSecurityGroupsOutput struct {
	DBSecurityGroups []*DBSecurityGroup `locationNameList:"DBSecurityGroup" type:"list"`
	Marker           *string            `type:"string"`

	metadataDescribeDBSecurityGroupsOutput `json:"-", xml:"-"`
}

type metadataDescribeDBSecurityGroupsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBSnapshotsInput struct {
	DBInstanceIdentifier *string   `type:"string"`
	DBSnapshotIdentifier *string   `type:"string"`
	Filters              []*Filter `locationNameList:"Filter" type:"list"`
	Marker               *string   `type:"string"`
	MaxRecords           *int64    `type:"integer"`
	SnapshotType         *string   `type:"string"`

	metadataDescribeDBSnapshotsInput `json:"-", xml:"-"`
}

type metadataDescribeDBSnapshotsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBSnapshotsOutput struct {
	DBSnapshots []*DBSnapshot `locationNameList:"DBSnapshot" type:"list"`
	Marker      *string       `type:"string"`

	metadataDescribeDBSnapshotsOutput `json:"-", xml:"-"`
}

type metadataDescribeDBSnapshotsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBSubnetGroupsInput struct {
	DBSubnetGroupName *string   `type:"string"`
	Filters           []*Filter `locationNameList:"Filter" type:"list"`
	Marker            *string   `type:"string"`
	MaxRecords        *int64    `type:"integer"`

	metadataDescribeDBSubnetGroupsInput `json:"-", xml:"-"`
}

type metadataDescribeDBSubnetGroupsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBSubnetGroupsOutput struct {
	DBSubnetGroups []*DBSubnetGroup `locationNameList:"DBSubnetGroup" type:"list"`
	Marker         *string          `type:"string"`

	metadataDescribeDBSubnetGroupsOutput `json:"-", xml:"-"`
}

type metadataDescribeDBSubnetGroupsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEngineDefaultParametersInput struct {
	DBParameterGroupFamily *string   `type:"string" required:"true"`
	Filters                []*Filter `locationNameList:"Filter" type:"list"`
	Marker                 *string   `type:"string"`
	MaxRecords             *int64    `type:"integer"`

	metadataDescribeEngineDefaultParametersInput `json:"-", xml:"-"`
}

type metadataDescribeEngineDefaultParametersInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEngineDefaultParametersOutput struct {
	EngineDefaults *EngineDefaults `type:"structure"`

	metadataDescribeEngineDefaultParametersOutput `json:"-", xml:"-"`
}

type metadataDescribeEngineDefaultParametersOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventCategoriesInput struct {
	Filters    []*Filter `locationNameList:"Filter" type:"list"`
	SourceType *string   `type:"string"`

	metadataDescribeEventCategoriesInput `json:"-", xml:"-"`
}

type metadataDescribeEventCategoriesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventCategoriesOutput struct {
	EventCategoriesMapList []*EventCategoriesMap `locationNameList:"EventCategoriesMap" type:"list"`

	metadataDescribeEventCategoriesOutput `json:"-", xml:"-"`
}

type metadataDescribeEventCategoriesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventSubscriptionsInput struct {
	Filters          []*Filter `locationNameList:"Filter" type:"list"`
	Marker           *string   `type:"string"`
	MaxRecords       *int64    `type:"integer"`
	SubscriptionName *string   `type:"string"`

	metadataDescribeEventSubscriptionsInput `json:"-", xml:"-"`
}

type metadataDescribeEventSubscriptionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventSubscriptionsOutput struct {
	EventSubscriptionsList []*EventSubscription `locationNameList:"EventSubscription" type:"list"`
	Marker                 *string              `type:"string"`

	metadataDescribeEventSubscriptionsOutput `json:"-", xml:"-"`
}

type metadataDescribeEventSubscriptionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventsInput struct {
	Duration         *int64     `type:"integer"`
	EndTime          *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	EventCategories  []*string  `locationNameList:"EventCategory" type:"list"`
	Filters          []*Filter  `locationNameList:"Filter" type:"list"`
	Marker           *string    `type:"string"`
	MaxRecords       *int64     `type:"integer"`
	SourceIdentifier *string    `type:"string"`
	SourceType       *string    `type:"string"`
	StartTime        *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataDescribeEventsInput `json:"-", xml:"-"`
}

type metadataDescribeEventsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventsOutput struct {
	Events []*Event `locationNameList:"Event" type:"list"`
	Marker *string  `type:"string"`

	metadataDescribeEventsOutput `json:"-", xml:"-"`
}

type metadataDescribeEventsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeOptionGroupOptionsInput struct {
	EngineName         *string   `type:"string" required:"true"`
	Filters            []*Filter `locationNameList:"Filter" type:"list"`
	MajorEngineVersion *string   `type:"string"`
	Marker             *string   `type:"string"`
	MaxRecords         *int64    `type:"integer"`

	metadataDescribeOptionGroupOptionsInput `json:"-", xml:"-"`
}

type metadataDescribeOptionGroupOptionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeOptionGroupOptionsOutput struct {
	Marker             *string              `type:"string"`
	OptionGroupOptions []*OptionGroupOption `locationNameList:"OptionGroupOption" type:"list"`

	metadataDescribeOptionGroupOptionsOutput `json:"-", xml:"-"`
}

type metadataDescribeOptionGroupOptionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeOptionGroupsInput struct {
	EngineName         *string   `type:"string"`
	Filters            []*Filter `locationNameList:"Filter" type:"list"`
	MajorEngineVersion *string   `type:"string"`
	Marker             *string   `type:"string"`
	MaxRecords         *int64    `type:"integer"`
	OptionGroupName    *string   `type:"string"`

	metadataDescribeOptionGroupsInput `json:"-", xml:"-"`
}

type metadataDescribeOptionGroupsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeOptionGroupsOutput struct {
	Marker           *string        `type:"string"`
	OptionGroupsList []*OptionGroup `locationNameList:"OptionGroup" type:"list"`

	metadataDescribeOptionGroupsOutput `json:"-", xml:"-"`
}

type metadataDescribeOptionGroupsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeOrderableDBInstanceOptionsInput struct {
	DBInstanceClass *string   `type:"string"`
	Engine          *string   `type:"string" required:"true"`
	EngineVersion   *string   `type:"string"`
	Filters         []*Filter `locationNameList:"Filter" type:"list"`
	LicenseModel    *string   `type:"string"`
	Marker          *string   `type:"string"`
	MaxRecords      *int64    `type:"integer"`
	VPC             *bool     `locationName:"Vpc" type:"boolean"`

	metadataDescribeOrderableDBInstanceOptionsInput `json:"-", xml:"-"`
}

type metadataDescribeOrderableDBInstanceOptionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeOrderableDBInstanceOptionsOutput struct {
	Marker                     *string                      `type:"string"`
	OrderableDBInstanceOptions []*OrderableDBInstanceOption `locationNameList:"OrderableDBInstanceOption" type:"list"`

	metadataDescribeOrderableDBInstanceOptionsOutput `json:"-", xml:"-"`
}

type metadataDescribeOrderableDBInstanceOptionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribePendingMaintenanceActionsInput struct {
	Filters            []*Filter `locationNameList:"Filter" type:"list"`
	Marker             *string   `type:"string"`
	MaxRecords         *int64    `type:"integer"`
	ResourceIdentifier *string   `type:"string"`

	metadataDescribePendingMaintenanceActionsInput `json:"-", xml:"-"`
}

type metadataDescribePendingMaintenanceActionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribePendingMaintenanceActionsOutput struct {
	Marker                    *string                              `type:"string"`
	PendingMaintenanceActions []*ResourcePendingMaintenanceActions `locationNameList:"ResourcePendingMaintenanceActions" type:"list"`

	metadataDescribePendingMaintenanceActionsOutput `json:"-", xml:"-"`
}

type metadataDescribePendingMaintenanceActionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedDBInstancesInput struct {
	DBInstanceClass               *string   `type:"string"`
	Duration                      *string   `type:"string"`
	Filters                       []*Filter `locationNameList:"Filter" type:"list"`
	Marker                        *string   `type:"string"`
	MaxRecords                    *int64    `type:"integer"`
	MultiAZ                       *bool     `type:"boolean"`
	OfferingType                  *string   `type:"string"`
	ProductDescription            *string   `type:"string"`
	ReservedDBInstanceID          *string   `locationName:"ReservedDBInstanceId" type:"string"`
	ReservedDBInstancesOfferingID *string   `locationName:"ReservedDBInstancesOfferingId" type:"string"`

	metadataDescribeReservedDBInstancesInput `json:"-", xml:"-"`
}

type metadataDescribeReservedDBInstancesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedDBInstancesOfferingsInput struct {
	DBInstanceClass               *string   `type:"string"`
	Duration                      *string   `type:"string"`
	Filters                       []*Filter `locationNameList:"Filter" type:"list"`
	Marker                        *string   `type:"string"`
	MaxRecords                    *int64    `type:"integer"`
	MultiAZ                       *bool     `type:"boolean"`
	OfferingType                  *string   `type:"string"`
	ProductDescription            *string   `type:"string"`
	ReservedDBInstancesOfferingID *string   `locationName:"ReservedDBInstancesOfferingId" type:"string"`

	metadataDescribeReservedDBInstancesOfferingsInput `json:"-", xml:"-"`
}

type metadataDescribeReservedDBInstancesOfferingsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedDBInstancesOfferingsOutput struct {
	Marker                       *string                        `type:"string"`
	ReservedDBInstancesOfferings []*ReservedDBInstancesOffering `locationNameList:"ReservedDBInstancesOffering" type:"list"`

	metadataDescribeReservedDBInstancesOfferingsOutput `json:"-", xml:"-"`
}

type metadataDescribeReservedDBInstancesOfferingsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedDBInstancesOutput struct {
	Marker              *string               `type:"string"`
	ReservedDBInstances []*ReservedDBInstance `locationNameList:"ReservedDBInstance" type:"list"`

	metadataDescribeReservedDBInstancesOutput `json:"-", xml:"-"`
}

type metadataDescribeReservedDBInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DownloadDBLogFilePortionInput struct {
	DBInstanceIdentifier *string `type:"string" required:"true"`
	LogFileName          *string `type:"string" required:"true"`
	Marker               *string `type:"string"`
	NumberOfLines        *int64  `type:"integer"`

	metadataDownloadDBLogFilePortionInput `json:"-", xml:"-"`
}

type metadataDownloadDBLogFilePortionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DownloadDBLogFilePortionOutput struct {
	AdditionalDataPending *bool   `type:"boolean"`
	LogFileData           *string `type:"string"`
	Marker                *string `type:"string"`

	metadataDownloadDBLogFilePortionOutput `json:"-", xml:"-"`
}

type metadataDownloadDBLogFilePortionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EC2SecurityGroup struct {
	EC2SecurityGroupID      *string `locationName:"EC2SecurityGroupId" type:"string"`
	EC2SecurityGroupName    *string `type:"string"`
	EC2SecurityGroupOwnerID *string `locationName:"EC2SecurityGroupOwnerId" type:"string"`
	Status                  *string `type:"string"`

	metadataEC2SecurityGroup `json:"-", xml:"-"`
}

type metadataEC2SecurityGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type Endpoint struct {
	Address *string `type:"string"`
	Port    *int64  `type:"integer"`

	metadataEndpoint `json:"-", xml:"-"`
}

type metadataEndpoint struct {
	SDKShapeTraits bool `type:"structure"`
}

type EngineDefaults struct {
	DBParameterGroupFamily *string      `type:"string"`
	Marker                 *string      `type:"string"`
	Parameters             []*Parameter `locationNameList:"Parameter" type:"list"`

	metadataEngineDefaults `json:"-", xml:"-"`
}

type metadataEngineDefaults struct {
	SDKShapeTraits bool `type:"structure"`
}

type Event struct {
	Date             *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	EventCategories  []*string  `locationNameList:"EventCategory" type:"list"`
	Message          *string    `type:"string"`
	SourceIdentifier *string    `type:"string"`
	SourceType       *string    `type:"string"`

	metadataEvent `json:"-", xml:"-"`
}

type metadataEvent struct {
	SDKShapeTraits bool `type:"structure"`
}

type EventCategoriesMap struct {
	EventCategories []*string `locationNameList:"EventCategory" type:"list"`
	SourceType      *string   `type:"string"`

	metadataEventCategoriesMap `json:"-", xml:"-"`
}

type metadataEventCategoriesMap struct {
	SDKShapeTraits bool `type:"structure"`
}

type EventSubscription struct {
	CustSubscriptionID       *string   `locationName:"CustSubscriptionId" type:"string"`
	CustomerAWSID            *string   `locationName:"CustomerAwsId" type:"string"`
	Enabled                  *bool     `type:"boolean"`
	EventCategoriesList      []*string `locationNameList:"EventCategory" type:"list"`
	SNSTopicARN              *string   `locationName:"SnsTopicArn" type:"string"`
	SourceIDsList            []*string `locationName:"SourceIdsList" locationNameList:"SourceId" type:"list"`
	SourceType               *string   `type:"string"`
	Status                   *string   `type:"string"`
	SubscriptionCreationTime *string   `type:"string"`

	metadataEventSubscription `json:"-", xml:"-"`
}

type metadataEventSubscription struct {
	SDKShapeTraits bool `type:"structure"`
}

type Filter struct {
	Name   *string   `type:"string" required:"true"`
	Values []*string `locationNameList:"Value" type:"list" required:"true"`

	metadataFilter `json:"-", xml:"-"`
}

type metadataFilter struct {
	SDKShapeTraits bool `type:"structure"`
}

type IPRange struct {
	CIDRIP *string `type:"string"`
	Status *string `type:"string"`

	metadataIPRange `json:"-", xml:"-"`
}

type metadataIPRange struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListTagsForResourceInput struct {
	Filters      []*Filter `locationNameList:"Filter" type:"list"`
	ResourceName *string   `type:"string" required:"true"`

	metadataListTagsForResourceInput `json:"-", xml:"-"`
}

type metadataListTagsForResourceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListTagsForResourceOutput struct {
	TagList []*Tag `locationNameList:"Tag" type:"list"`

	metadataListTagsForResourceOutput `json:"-", xml:"-"`
}

type metadataListTagsForResourceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyDBInstanceInput struct {
	AllocatedStorage           *int64    `type:"integer"`
	AllowMajorVersionUpgrade   *bool     `type:"boolean"`
	ApplyImmediately           *bool     `type:"boolean"`
	AutoMinorVersionUpgrade    *bool     `type:"boolean"`
	BackupRetentionPeriod      *int64    `type:"integer"`
	DBInstanceClass            *string   `type:"string"`
	DBInstanceIdentifier       *string   `type:"string" required:"true"`
	DBParameterGroupName       *string   `type:"string"`
	DBSecurityGroups           []*string `locationNameList:"DBSecurityGroupName" type:"list"`
	EngineVersion              *string   `type:"string"`
	IOPS                       *int64    `locationName:"Iops" type:"integer"`
	MasterUserPassword         *string   `type:"string"`
	MultiAZ                    *bool     `type:"boolean"`
	NewDBInstanceIdentifier    *string   `type:"string"`
	OptionGroupName            *string   `type:"string"`
	PreferredBackupWindow      *string   `type:"string"`
	PreferredMaintenanceWindow *string   `type:"string"`
	StorageType                *string   `type:"string"`
	TDECredentialARN           *string   `locationName:"TdeCredentialArn" type:"string"`
	TDECredentialPassword      *string   `locationName:"TdeCredentialPassword" type:"string"`
	VPCSecurityGroupIDs        []*string `locationName:"VpcSecurityGroupIds" locationNameList:"VpcSecurityGroupId" type:"list"`

	metadataModifyDBInstanceInput `json:"-", xml:"-"`
}

type metadataModifyDBInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyDBInstanceOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataModifyDBInstanceOutput `json:"-", xml:"-"`
}

type metadataModifyDBInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyDBParameterGroupInput struct {
	DBParameterGroupName *string      `type:"string" required:"true"`
	Parameters           []*Parameter `locationNameList:"Parameter" type:"list" required:"true"`

	metadataModifyDBParameterGroupInput `json:"-", xml:"-"`
}

type metadataModifyDBParameterGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyDBSubnetGroupInput struct {
	DBSubnetGroupDescription *string   `type:"string"`
	DBSubnetGroupName        *string   `type:"string" required:"true"`
	SubnetIDs                []*string `locationName:"SubnetIds" locationNameList:"SubnetIdentifier" type:"list" required:"true"`

	metadataModifyDBSubnetGroupInput `json:"-", xml:"-"`
}

type metadataModifyDBSubnetGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyDBSubnetGroupOutput struct {
	DBSubnetGroup *DBSubnetGroup `type:"structure"`

	metadataModifyDBSubnetGroupOutput `json:"-", xml:"-"`
}

type metadataModifyDBSubnetGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyEventSubscriptionInput struct {
	Enabled          *bool     `type:"boolean"`
	EventCategories  []*string `locationNameList:"EventCategory" type:"list"`
	SNSTopicARN      *string   `locationName:"SnsTopicArn" type:"string"`
	SourceType       *string   `type:"string"`
	SubscriptionName *string   `type:"string" required:"true"`

	metadataModifyEventSubscriptionInput `json:"-", xml:"-"`
}

type metadataModifyEventSubscriptionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyEventSubscriptionOutput struct {
	EventSubscription *EventSubscription `type:"structure"`

	metadataModifyEventSubscriptionOutput `json:"-", xml:"-"`
}

type metadataModifyEventSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyOptionGroupInput struct {
	ApplyImmediately *bool                  `type:"boolean"`
	OptionGroupName  *string                `type:"string" required:"true"`
	OptionsToInclude []*OptionConfiguration `locationNameList:"OptionConfiguration" type:"list"`
	OptionsToRemove  []*string              `type:"list"`

	metadataModifyOptionGroupInput `json:"-", xml:"-"`
}

type metadataModifyOptionGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyOptionGroupOutput struct {
	OptionGroup *OptionGroup `type:"structure"`

	metadataModifyOptionGroupOutput `json:"-", xml:"-"`
}

type metadataModifyOptionGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Option struct {
	DBSecurityGroupMemberships  []*DBSecurityGroupMembership  `locationNameList:"DBSecurityGroup" type:"list"`
	OptionDescription           *string                       `type:"string"`
	OptionName                  *string                       `type:"string"`
	OptionSettings              []*OptionSetting              `locationNameList:"OptionSetting" type:"list"`
	Permanent                   *bool                         `type:"boolean"`
	Persistent                  *bool                         `type:"boolean"`
	Port                        *int64                        `type:"integer"`
	VPCSecurityGroupMemberships []*VPCSecurityGroupMembership `locationName:"VpcSecurityGroupMemberships" locationNameList:"VpcSecurityGroupMembership" type:"list"`

	metadataOption `json:"-", xml:"-"`
}

type metadataOption struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionConfiguration struct {
	DBSecurityGroupMemberships  []*string        `locationNameList:"DBSecurityGroupName" type:"list"`
	OptionName                  *string          `type:"string" required:"true"`
	OptionSettings              []*OptionSetting `locationNameList:"OptionSetting" type:"list"`
	Port                        *int64           `type:"integer"`
	VPCSecurityGroupMemberships []*string        `locationName:"VpcSecurityGroupMemberships" locationNameList:"VpcSecurityGroupId" type:"list"`

	metadataOptionConfiguration `json:"-", xml:"-"`
}

type metadataOptionConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionGroup struct {
	AllowsVPCAndNonVPCInstanceMemberships *bool     `locationName:"AllowsVpcAndNonVpcInstanceMemberships" type:"boolean"`
	EngineName                            *string   `type:"string"`
	MajorEngineVersion                    *string   `type:"string"`
	OptionGroupDescription                *string   `type:"string"`
	OptionGroupName                       *string   `type:"string"`
	Options                               []*Option `locationNameList:"Option" type:"list"`
	VPCID                                 *string   `locationName:"VpcId" type:"string"`

	metadataOptionGroup `json:"-", xml:"-"`
}

type metadataOptionGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionGroupMembership struct {
	OptionGroupName *string `type:"string"`
	Status          *string `type:"string"`

	metadataOptionGroupMembership `json:"-", xml:"-"`
}

type metadataOptionGroupMembership struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionGroupOption struct {
	DefaultPort                       *int64                      `type:"integer"`
	Description                       *string                     `type:"string"`
	EngineName                        *string                     `type:"string"`
	MajorEngineVersion                *string                     `type:"string"`
	MinimumRequiredMinorEngineVersion *string                     `type:"string"`
	Name                              *string                     `type:"string"`
	OptionGroupOptionSettings         []*OptionGroupOptionSetting `locationNameList:"OptionGroupOptionSetting" type:"list"`
	OptionsDependedOn                 []*string                   `locationNameList:"OptionName" type:"list"`
	Permanent                         *bool                       `type:"boolean"`
	Persistent                        *bool                       `type:"boolean"`
	PortRequired                      *bool                       `type:"boolean"`

	metadataOptionGroupOption `json:"-", xml:"-"`
}

type metadataOptionGroupOption struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionGroupOptionSetting struct {
	AllowedValues      *string `type:"string"`
	ApplyType          *string `type:"string"`
	DefaultValue       *string `type:"string"`
	IsModifiable       *bool   `type:"boolean"`
	SettingDescription *string `type:"string"`
	SettingName        *string `type:"string"`

	metadataOptionGroupOptionSetting `json:"-", xml:"-"`
}

type metadataOptionGroupOptionSetting struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionSetting struct {
	AllowedValues *string `type:"string"`
	ApplyType     *string `type:"string"`
	DataType      *string `type:"string"`
	DefaultValue  *string `type:"string"`
	Description   *string `type:"string"`
	IsCollection  *bool   `type:"boolean"`
	IsModifiable  *bool   `type:"boolean"`
	Name          *string `type:"string"`
	Value         *string `type:"string"`

	metadataOptionSetting `json:"-", xml:"-"`
}

type metadataOptionSetting struct {
	SDKShapeTraits bool `type:"structure"`
}

type OrderableDBInstanceOption struct {
	AvailabilityZones         []*AvailabilityZone `locationNameList:"AvailabilityZone" type:"list"`
	DBInstanceClass           *string             `type:"string"`
	Engine                    *string             `type:"string"`
	EngineVersion             *string             `type:"string"`
	LicenseModel              *string             `type:"string"`
	MultiAZCapable            *bool               `type:"boolean"`
	ReadReplicaCapable        *bool               `type:"boolean"`
	StorageType               *string             `type:"string"`
	SupportsIOPS              *bool               `locationName:"SupportsIops" type:"boolean"`
	SupportsStorageEncryption *bool               `type:"boolean"`
	VPC                       *bool               `locationName:"Vpc" type:"boolean"`

	metadataOrderableDBInstanceOption `json:"-", xml:"-"`
}

type metadataOrderableDBInstanceOption struct {
	SDKShapeTraits bool `type:"structure"`
}

type Parameter struct {
	AllowedValues        *string `type:"string"`
	ApplyMethod          *string `type:"string"`
	ApplyType            *string `type:"string"`
	DataType             *string `type:"string"`
	Description          *string `type:"string"`
	IsModifiable         *bool   `type:"boolean"`
	MinimumEngineVersion *string `type:"string"`
	ParameterName        *string `type:"string"`
	ParameterValue       *string `type:"string"`
	Source               *string `type:"string"`

	metadataParameter `json:"-", xml:"-"`
}

type metadataParameter struct {
	SDKShapeTraits bool `type:"structure"`
}

type PendingMaintenanceAction struct {
	Action               *string    `type:"string"`
	AutoAppliedAfterDate *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	CurrentApplyDate     *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	ForcedApplyDate      *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	OptInStatus          *string    `type:"string"`

	metadataPendingMaintenanceAction `json:"-", xml:"-"`
}

type metadataPendingMaintenanceAction struct {
	SDKShapeTraits bool `type:"structure"`
}

type PendingModifiedValues struct {
	AllocatedStorage      *int64  `type:"integer"`
	BackupRetentionPeriod *int64  `type:"integer"`
	DBInstanceClass       *string `type:"string"`
	DBInstanceIdentifier  *string `type:"string"`
	EngineVersion         *string `type:"string"`
	IOPS                  *int64  `locationName:"Iops" type:"integer"`
	MasterUserPassword    *string `type:"string"`
	MultiAZ               *bool   `type:"boolean"`
	Port                  *int64  `type:"integer"`
	StorageType           *string `type:"string"`

	metadataPendingModifiedValues `json:"-", xml:"-"`
}

type metadataPendingModifiedValues struct {
	SDKShapeTraits bool `type:"structure"`
}

type PromoteReadReplicaInput struct {
	BackupRetentionPeriod *int64  `type:"integer"`
	DBInstanceIdentifier  *string `type:"string" required:"true"`
	PreferredBackupWindow *string `type:"string"`

	metadataPromoteReadReplicaInput `json:"-", xml:"-"`
}

type metadataPromoteReadReplicaInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PromoteReadReplicaOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataPromoteReadReplicaOutput `json:"-", xml:"-"`
}

type metadataPromoteReadReplicaOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PurchaseReservedDBInstancesOfferingInput struct {
	DBInstanceCount               *int64  `type:"integer"`
	ReservedDBInstanceID          *string `locationName:"ReservedDBInstanceId" type:"string"`
	ReservedDBInstancesOfferingID *string `locationName:"ReservedDBInstancesOfferingId" type:"string" required:"true"`
	Tags                          []*Tag  `locationNameList:"Tag" type:"list"`

	metadataPurchaseReservedDBInstancesOfferingInput `json:"-", xml:"-"`
}

type metadataPurchaseReservedDBInstancesOfferingInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PurchaseReservedDBInstancesOfferingOutput struct {
	ReservedDBInstance *ReservedDBInstance `type:"structure"`

	metadataPurchaseReservedDBInstancesOfferingOutput `json:"-", xml:"-"`
}

type metadataPurchaseReservedDBInstancesOfferingOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RebootDBInstanceInput struct {
	DBInstanceIdentifier *string `type:"string" required:"true"`
	ForceFailover        *bool   `type:"boolean"`

	metadataRebootDBInstanceInput `json:"-", xml:"-"`
}

type metadataRebootDBInstanceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RebootDBInstanceOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataRebootDBInstanceOutput `json:"-", xml:"-"`
}

type metadataRebootDBInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RecurringCharge struct {
	RecurringChargeAmount    *float64 `type:"double"`
	RecurringChargeFrequency *string  `type:"string"`

	metadataRecurringCharge `json:"-", xml:"-"`
}

type metadataRecurringCharge struct {
	SDKShapeTraits bool `type:"structure"`
}

type RemoveSourceIdentifierFromSubscriptionInput struct {
	SourceIdentifier *string `type:"string" required:"true"`
	SubscriptionName *string `type:"string" required:"true"`

	metadataRemoveSourceIdentifierFromSubscriptionInput `json:"-", xml:"-"`
}

type metadataRemoveSourceIdentifierFromSubscriptionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RemoveSourceIdentifierFromSubscriptionOutput struct {
	EventSubscription *EventSubscription `type:"structure"`

	metadataRemoveSourceIdentifierFromSubscriptionOutput `json:"-", xml:"-"`
}

type metadataRemoveSourceIdentifierFromSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RemoveTagsFromResourceInput struct {
	ResourceName *string   `type:"string" required:"true"`
	TagKeys      []*string `type:"list" required:"true"`

	metadataRemoveTagsFromResourceInput `json:"-", xml:"-"`
}

type metadataRemoveTagsFromResourceInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RemoveTagsFromResourceOutput struct {
	metadataRemoveTagsFromResourceOutput `json:"-", xml:"-"`
}

type metadataRemoveTagsFromResourceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedDBInstance struct {
	CurrencyCode                  *string            `type:"string"`
	DBInstanceClass               *string            `type:"string"`
	DBInstanceCount               *int64             `type:"integer"`
	Duration                      *int64             `type:"integer"`
	FixedPrice                    *float64           `type:"double"`
	MultiAZ                       *bool              `type:"boolean"`
	OfferingType                  *string            `type:"string"`
	ProductDescription            *string            `type:"string"`
	RecurringCharges              []*RecurringCharge `locationNameList:"RecurringCharge" type:"list"`
	ReservedDBInstanceID          *string            `locationName:"ReservedDBInstanceId" type:"string"`
	ReservedDBInstancesOfferingID *string            `locationName:"ReservedDBInstancesOfferingId" type:"string"`
	StartTime                     *time.Time         `type:"timestamp" timestampFormat:"iso8601"`
	State                         *string            `type:"string"`
	UsagePrice                    *float64           `type:"double"`

	metadataReservedDBInstance `json:"-", xml:"-"`
}

type metadataReservedDBInstance struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedDBInstancesOffering struct {
	CurrencyCode                  *string            `type:"string"`
	DBInstanceClass               *string            `type:"string"`
	Duration                      *int64             `type:"integer"`
	FixedPrice                    *float64           `type:"double"`
	MultiAZ                       *bool              `type:"boolean"`
	OfferingType                  *string            `type:"string"`
	ProductDescription            *string            `type:"string"`
	RecurringCharges              []*RecurringCharge `locationNameList:"RecurringCharge" type:"list"`
	ReservedDBInstancesOfferingID *string            `locationName:"ReservedDBInstancesOfferingId" type:"string"`
	UsagePrice                    *float64           `type:"double"`

	metadataReservedDBInstancesOffering `json:"-", xml:"-"`
}

type metadataReservedDBInstancesOffering struct {
	SDKShapeTraits bool `type:"structure"`
}

type ResetDBParameterGroupInput struct {
	DBParameterGroupName *string      `type:"string" required:"true"`
	Parameters           []*Parameter `locationNameList:"Parameter" type:"list"`
	ResetAllParameters   *bool        `type:"boolean"`

	metadataResetDBParameterGroupInput `json:"-", xml:"-"`
}

type metadataResetDBParameterGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ResourcePendingMaintenanceActions struct {
	PendingMaintenanceActionDetails []*PendingMaintenanceAction `locationNameList:"PendingMaintenanceAction" type:"list"`
	ResourceIdentifier              *string                     `type:"string"`

	metadataResourcePendingMaintenanceActions `json:"-", xml:"-"`
}

type metadataResourcePendingMaintenanceActions struct {
	SDKShapeTraits bool `type:"structure"`
}

type RestoreDBInstanceFromDBSnapshotInput struct {
	AutoMinorVersionUpgrade *bool   `type:"boolean"`
	AvailabilityZone        *string `type:"string"`
	DBInstanceClass         *string `type:"string"`
	DBInstanceIdentifier    *string `type:"string" required:"true"`
	DBName                  *string `type:"string"`
	DBSnapshotIdentifier    *string `type:"string" required:"true"`
	DBSubnetGroupName       *string `type:"string"`
	Engine                  *string `type:"string"`
	IOPS                    *int64  `locationName:"Iops" type:"integer"`
	LicenseModel            *string `type:"string"`
	MultiAZ                 *bool   `type:"boolean"`
	OptionGroupName         *string `type:"string"`
	Port                    *int64  `type:"integer"`
	PubliclyAccessible      *bool   `type:"boolean"`
	StorageType             *string `type:"string"`
	TDECredentialARN        *string `locationName:"TdeCredentialArn" type:"string"`
	TDECredentialPassword   *string `locationName:"TdeCredentialPassword" type:"string"`
	Tags                    []*Tag  `locationNameList:"Tag" type:"list"`

	metadataRestoreDBInstanceFromDBSnapshotInput `json:"-", xml:"-"`
}

type metadataRestoreDBInstanceFromDBSnapshotInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RestoreDBInstanceFromDBSnapshotOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataRestoreDBInstanceFromDBSnapshotOutput `json:"-", xml:"-"`
}

type metadataRestoreDBInstanceFromDBSnapshotOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RestoreDBInstanceToPointInTimeInput struct {
	AutoMinorVersionUpgrade    *bool      `type:"boolean"`
	AvailabilityZone           *string    `type:"string"`
	DBInstanceClass            *string    `type:"string"`
	DBName                     *string    `type:"string"`
	DBSubnetGroupName          *string    `type:"string"`
	Engine                     *string    `type:"string"`
	IOPS                       *int64     `locationName:"Iops" type:"integer"`
	LicenseModel               *string    `type:"string"`
	MultiAZ                    *bool      `type:"boolean"`
	OptionGroupName            *string    `type:"string"`
	Port                       *int64     `type:"integer"`
	PubliclyAccessible         *bool      `type:"boolean"`
	RestoreTime                *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	SourceDBInstanceIdentifier *string    `type:"string" required:"true"`
	StorageType                *string    `type:"string"`
	TDECredentialARN           *string    `locationName:"TdeCredentialArn" type:"string"`
	TDECredentialPassword      *string    `locationName:"TdeCredentialPassword" type:"string"`
	Tags                       []*Tag     `locationNameList:"Tag" type:"list"`
	TargetDBInstanceIdentifier *string    `type:"string" required:"true"`
	UseLatestRestorableTime    *bool      `type:"boolean"`

	metadataRestoreDBInstanceToPointInTimeInput `json:"-", xml:"-"`
}

type metadataRestoreDBInstanceToPointInTimeInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RestoreDBInstanceToPointInTimeOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataRestoreDBInstanceToPointInTimeOutput `json:"-", xml:"-"`
}

type metadataRestoreDBInstanceToPointInTimeOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RevokeDBSecurityGroupIngressInput struct {
	CIDRIP                  *string `type:"string"`
	DBSecurityGroupName     *string `type:"string" required:"true"`
	EC2SecurityGroupID      *string `locationName:"EC2SecurityGroupId" type:"string"`
	EC2SecurityGroupName    *string `type:"string"`
	EC2SecurityGroupOwnerID *string `locationName:"EC2SecurityGroupOwnerId" type:"string"`

	metadataRevokeDBSecurityGroupIngressInput `json:"-", xml:"-"`
}

type metadataRevokeDBSecurityGroupIngressInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RevokeDBSecurityGroupIngressOutput struct {
	DBSecurityGroup *DBSecurityGroup `type:"structure"`

	metadataRevokeDBSecurityGroupIngressOutput `json:"-", xml:"-"`
}

type metadataRevokeDBSecurityGroupIngressOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Subnet struct {
	SubnetAvailabilityZone *AvailabilityZone `type:"structure"`
	SubnetIdentifier       *string           `type:"string"`
	SubnetStatus           *string           `type:"string"`

	metadataSubnet `json:"-", xml:"-"`
}

type metadataSubnet struct {
	SDKShapeTraits bool `type:"structure"`
}

type Tag struct {
	Key   *string `type:"string"`
	Value *string `type:"string"`

	metadataTag `json:"-", xml:"-"`
}

type metadataTag struct {
	SDKShapeTraits bool `type:"structure"`
}

type VPCSecurityGroupMembership struct {
	Status             *string `type:"string"`
	VPCSecurityGroupID *string `locationName:"VpcSecurityGroupId" type:"string"`

	metadataVPCSecurityGroupMembership `json:"-", xml:"-"`
}

type metadataVPCSecurityGroupMembership struct {
	SDKShapeTraits bool `type:"structure"`
}