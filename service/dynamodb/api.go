package dynamodb

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"time"

	"github.com/awslabs/aws-sdk-go/aws"
)

// BatchGetItemRequest generates a request for the BatchGetItem operation.
func (c *DynamoDB) BatchGetItemRequest(input *BatchGetItemInput) (req *aws.Request, output *BatchGetItemOutput) {
	if opBatchGetItem == nil {
		opBatchGetItem = &aws.Operation{
			Name:       "BatchGetItem",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "RequestItems",
				OutputToken:     "UnprocessedKeys",
				LimitToken:      "",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opBatchGetItem, input, output)
	output = &BatchGetItemOutput{}
	req.Data = output
	return
}

func (c *DynamoDB) BatchGetItem(input *BatchGetItemInput) (output *BatchGetItemOutput, err error) {
	req, out := c.BatchGetItemRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *DynamoDB) BatchGetItemPages(input *BatchGetItemInput) <-chan *BatchGetItemOutput {
	page, _ := c.BatchGetItemRequest(input)
	ch := make(chan *BatchGetItemOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*BatchGetItemOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opBatchGetItem *aws.Operation

// BatchWriteItemRequest generates a request for the BatchWriteItem operation.
func (c *DynamoDB) BatchWriteItemRequest(input *BatchWriteItemInput) (req *aws.Request, output *BatchWriteItemOutput) {
	if opBatchWriteItem == nil {
		opBatchWriteItem = &aws.Operation{
			Name:       "BatchWriteItem",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opBatchWriteItem, input, output)
	output = &BatchWriteItemOutput{}
	req.Data = output
	return
}

func (c *DynamoDB) BatchWriteItem(input *BatchWriteItemInput) (output *BatchWriteItemOutput, err error) {
	req, out := c.BatchWriteItemRequest(input)
	output = out
	err = req.Send()
	return
}

var opBatchWriteItem *aws.Operation

// CreateTableRequest generates a request for the CreateTable operation.
func (c *DynamoDB) CreateTableRequest(input *CreateTableInput) (req *aws.Request, output *CreateTableOutput) {
	if opCreateTable == nil {
		opCreateTable = &aws.Operation{
			Name:       "CreateTable",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateTable, input, output)
	output = &CreateTableOutput{}
	req.Data = output
	return
}

func (c *DynamoDB) CreateTable(input *CreateTableInput) (output *CreateTableOutput, err error) {
	req, out := c.CreateTableRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateTable *aws.Operation

// DeleteItemRequest generates a request for the DeleteItem operation.
func (c *DynamoDB) DeleteItemRequest(input *DeleteItemInput) (req *aws.Request, output *DeleteItemOutput) {
	if opDeleteItem == nil {
		opDeleteItem = &aws.Operation{
			Name:       "DeleteItem",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteItem, input, output)
	output = &DeleteItemOutput{}
	req.Data = output
	return
}

func (c *DynamoDB) DeleteItem(input *DeleteItemInput) (output *DeleteItemOutput, err error) {
	req, out := c.DeleteItemRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteItem *aws.Operation

// DeleteTableRequest generates a request for the DeleteTable operation.
func (c *DynamoDB) DeleteTableRequest(input *DeleteTableInput) (req *aws.Request, output *DeleteTableOutput) {
	if opDeleteTable == nil {
		opDeleteTable = &aws.Operation{
			Name:       "DeleteTable",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteTable, input, output)
	output = &DeleteTableOutput{}
	req.Data = output
	return
}

func (c *DynamoDB) DeleteTable(input *DeleteTableInput) (output *DeleteTableOutput, err error) {
	req, out := c.DeleteTableRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteTable *aws.Operation

// DescribeTableRequest generates a request for the DescribeTable operation.
func (c *DynamoDB) DescribeTableRequest(input *DescribeTableInput) (req *aws.Request, output *DescribeTableOutput) {
	if opDescribeTable == nil {
		opDescribeTable = &aws.Operation{
			Name:       "DescribeTable",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeTable, input, output)
	output = &DescribeTableOutput{}
	req.Data = output
	return
}

func (c *DynamoDB) DescribeTable(input *DescribeTableInput) (output *DescribeTableOutput, err error) {
	req, out := c.DescribeTableRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeTable *aws.Operation

// GetItemRequest generates a request for the GetItem operation.
func (c *DynamoDB) GetItemRequest(input *GetItemInput) (req *aws.Request, output *GetItemOutput) {
	if opGetItem == nil {
		opGetItem = &aws.Operation{
			Name:       "GetItem",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetItem, input, output)
	output = &GetItemOutput{}
	req.Data = output
	return
}

func (c *DynamoDB) GetItem(input *GetItemInput) (output *GetItemOutput, err error) {
	req, out := c.GetItemRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetItem *aws.Operation

// ListTablesRequest generates a request for the ListTables operation.
func (c *DynamoDB) ListTablesRequest(input *ListTablesInput) (req *aws.Request, output *ListTablesOutput) {
	if opListTables == nil {
		opListTables = &aws.Operation{
			Name:       "ListTables",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "ExclusiveStartTableName",
				OutputToken:     "LastEvaluatedTableName",
				LimitToken:      "Limit",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opListTables, input, output)
	output = &ListTablesOutput{}
	req.Data = output
	return
}

func (c *DynamoDB) ListTables(input *ListTablesInput) (output *ListTablesOutput, err error) {
	req, out := c.ListTablesRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *DynamoDB) ListTablesPages(input *ListTablesInput) <-chan *ListTablesOutput {
	page, _ := c.ListTablesRequest(input)
	ch := make(chan *ListTablesOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ListTablesOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opListTables *aws.Operation

// PutItemRequest generates a request for the PutItem operation.
func (c *DynamoDB) PutItemRequest(input *PutItemInput) (req *aws.Request, output *PutItemOutput) {
	if opPutItem == nil {
		opPutItem = &aws.Operation{
			Name:       "PutItem",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPutItem, input, output)
	output = &PutItemOutput{}
	req.Data = output
	return
}

func (c *DynamoDB) PutItem(input *PutItemInput) (output *PutItemOutput, err error) {
	req, out := c.PutItemRequest(input)
	output = out
	err = req.Send()
	return
}

var opPutItem *aws.Operation

// QueryRequest generates a request for the Query operation.
func (c *DynamoDB) QueryRequest(input *QueryInput) (req *aws.Request, output *QueryOutput) {
	if opQuery == nil {
		opQuery = &aws.Operation{
			Name:       "Query",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "ExclusiveStartKey",
				OutputToken:     "LastEvaluatedKey",
				LimitToken:      "Limit",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opQuery, input, output)
	output = &QueryOutput{}
	req.Data = output
	return
}

func (c *DynamoDB) Query(input *QueryInput) (output *QueryOutput, err error) {
	req, out := c.QueryRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *DynamoDB) QueryPages(input *QueryInput) <-chan *QueryOutput {
	page, _ := c.QueryRequest(input)
	ch := make(chan *QueryOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*QueryOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opQuery *aws.Operation

// ScanRequest generates a request for the Scan operation.
func (c *DynamoDB) ScanRequest(input *ScanInput) (req *aws.Request, output *ScanOutput) {
	if opScan == nil {
		opScan = &aws.Operation{
			Name:       "Scan",
			HTTPMethod: "POST",
			HTTPPath:   "/",
			Paginator: &aws.Paginator{
				InputToken:      "ExclusiveStartKey",
				OutputToken:     "LastEvaluatedKey",
				LimitToken:      "Limit",
				TruncationToken: "",
			},
		}
	}

	req = aws.NewRequest(c.Service, opScan, input, output)
	output = &ScanOutput{}
	req.Data = output
	return
}

func (c *DynamoDB) Scan(input *ScanInput) (output *ScanOutput, err error) {
	req, out := c.ScanRequest(input)
	output = out
	err = req.Send()
	return
}

func (c *DynamoDB) ScanPages(input *ScanInput) <-chan *ScanOutput {
	page, _ := c.ScanRequest(input)
	ch := make(chan *ScanOutput)
	go func() {
		for page != nil {
			page.Send()
			out := page.Data.(*ScanOutput)
			ch <- out
			page = page.NextPage()
		}
		close(ch)
	}()
	return ch
}

var opScan *aws.Operation

// UpdateItemRequest generates a request for the UpdateItem operation.
func (c *DynamoDB) UpdateItemRequest(input *UpdateItemInput) (req *aws.Request, output *UpdateItemOutput) {
	if opUpdateItem == nil {
		opUpdateItem = &aws.Operation{
			Name:       "UpdateItem",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateItem, input, output)
	output = &UpdateItemOutput{}
	req.Data = output
	return
}

func (c *DynamoDB) UpdateItem(input *UpdateItemInput) (output *UpdateItemOutput, err error) {
	req, out := c.UpdateItemRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateItem *aws.Operation

// UpdateTableRequest generates a request for the UpdateTable operation.
func (c *DynamoDB) UpdateTableRequest(input *UpdateTableInput) (req *aws.Request, output *UpdateTableOutput) {
	if opUpdateTable == nil {
		opUpdateTable = &aws.Operation{
			Name:       "UpdateTable",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateTable, input, output)
	output = &UpdateTableOutput{}
	req.Data = output
	return
}

func (c *DynamoDB) UpdateTable(input *UpdateTableInput) (output *UpdateTableOutput, err error) {
	req, out := c.UpdateTableRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateTable *aws.Operation

type AttributeDefinition struct {
	AttributeName *string `type:"string" required:"true"`
	AttributeType *string `type:"string" required:"true"`

	metadataAttributeDefinition `json:"-", xml:"-"`
}

type metadataAttributeDefinition struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttributeValue struct {
	B    []byte                      `type:"blob"`
	BOOL *bool                       `type:"boolean"`
	BS   [][]byte                    `type:"list"`
	L    []*AttributeValue           `type:"list"`
	M    *map[string]*AttributeValue `type:"map"`
	N    *string                     `type:"string"`
	NS   []*string                   `type:"list"`
	NULL *bool                       `type:"boolean"`
	S    *string                     `type:"string"`
	SS   []*string                   `type:"list"`

	metadataAttributeValue `json:"-", xml:"-"`
}

type metadataAttributeValue struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttributeValueUpdate struct {
	Action *string         `type:"string"`
	Value  *AttributeValue `type:"structure"`

	metadataAttributeValueUpdate `json:"-", xml:"-"`
}

type metadataAttributeValueUpdate struct {
	SDKShapeTraits bool `type:"structure"`
}

type BatchGetItemInput struct {
	RequestItems           *map[string]*KeysAndAttributes `type:"map" required:"true"`
	ReturnConsumedCapacity *string                        `type:"string"`

	metadataBatchGetItemInput `json:"-", xml:"-"`
}

type metadataBatchGetItemInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type BatchGetItemOutput struct {
	ConsumedCapacity []*ConsumedCapacity                       `type:"list"`
	Responses        *map[string][]*map[string]*AttributeValue `type:"map"`
	UnprocessedKeys  *map[string]*KeysAndAttributes            `type:"map"`

	metadataBatchGetItemOutput `json:"-", xml:"-"`
}

type metadataBatchGetItemOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type BatchWriteItemInput struct {
	RequestItems                *map[string][]*WriteRequest `type:"map" required:"true"`
	ReturnConsumedCapacity      *string                     `type:"string"`
	ReturnItemCollectionMetrics *string                     `type:"string"`

	metadataBatchWriteItemInput `json:"-", xml:"-"`
}

type metadataBatchWriteItemInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type BatchWriteItemOutput struct {
	ConsumedCapacity      []*ConsumedCapacity                  `type:"list"`
	ItemCollectionMetrics *map[string][]*ItemCollectionMetrics `type:"map"`
	UnprocessedItems      *map[string][]*WriteRequest          `type:"map"`

	metadataBatchWriteItemOutput `json:"-", xml:"-"`
}

type metadataBatchWriteItemOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Capacity struct {
	CapacityUnits *float64 `type:"double"`

	metadataCapacity `json:"-", xml:"-"`
}

type metadataCapacity struct {
	SDKShapeTraits bool `type:"structure"`
}

type Condition struct {
	AttributeValueList []*AttributeValue `type:"list"`
	ComparisonOperator *string           `type:"string" required:"true"`

	metadataCondition `json:"-", xml:"-"`
}

type metadataCondition struct {
	SDKShapeTraits bool `type:"structure"`
}

type ConsumedCapacity struct {
	CapacityUnits          *float64              `type:"double"`
	GlobalSecondaryIndexes *map[string]*Capacity `type:"map"`
	LocalSecondaryIndexes  *map[string]*Capacity `type:"map"`
	Table                  *Capacity             `type:"structure"`
	TableName              *string               `type:"string"`

	metadataConsumedCapacity `json:"-", xml:"-"`
}

type metadataConsumedCapacity struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateGlobalSecondaryIndexAction struct {
	IndexName             *string                `type:"string" required:"true"`
	KeySchema             []*KeySchemaElement    `type:"list" required:"true"`
	Projection            *Projection            `type:"structure" required:"true"`
	ProvisionedThroughput *ProvisionedThroughput `type:"structure" required:"true"`

	metadataCreateGlobalSecondaryIndexAction `json:"-", xml:"-"`
}

type metadataCreateGlobalSecondaryIndexAction struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateTableInput struct {
	AttributeDefinitions   []*AttributeDefinition  `type:"list" required:"true"`
	GlobalSecondaryIndexes []*GlobalSecondaryIndex `type:"list"`
	KeySchema              []*KeySchemaElement     `type:"list" required:"true"`
	LocalSecondaryIndexes  []*LocalSecondaryIndex  `type:"list"`
	ProvisionedThroughput  *ProvisionedThroughput  `type:"structure" required:"true"`
	TableName              *string                 `type:"string" required:"true"`

	metadataCreateTableInput `json:"-", xml:"-"`
}

type metadataCreateTableInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateTableOutput struct {
	TableDescription *TableDescription `type:"structure"`

	metadataCreateTableOutput `json:"-", xml:"-"`
}

type metadataCreateTableOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteGlobalSecondaryIndexAction struct {
	IndexName *string `type:"string" required:"true"`

	metadataDeleteGlobalSecondaryIndexAction `json:"-", xml:"-"`
}

type metadataDeleteGlobalSecondaryIndexAction struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteItemInput struct {
	ConditionExpression         *string                             `type:"string"`
	ConditionalOperator         *string                             `type:"string"`
	Expected                    *map[string]*ExpectedAttributeValue `type:"map"`
	ExpressionAttributeNames    *map[string]*string                 `type:"map"`
	ExpressionAttributeValues   *map[string]*AttributeValue         `type:"map"`
	Key                         *map[string]*AttributeValue         `type:"map" required:"true"`
	ReturnConsumedCapacity      *string                             `type:"string"`
	ReturnItemCollectionMetrics *string                             `type:"string"`
	ReturnValues                *string                             `type:"string"`
	TableName                   *string                             `type:"string" required:"true"`

	metadataDeleteItemInput `json:"-", xml:"-"`
}

type metadataDeleteItemInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteItemOutput struct {
	Attributes            *map[string]*AttributeValue `type:"map"`
	ConsumedCapacity      *ConsumedCapacity           `type:"structure"`
	ItemCollectionMetrics *ItemCollectionMetrics      `type:"structure"`

	metadataDeleteItemOutput `json:"-", xml:"-"`
}

type metadataDeleteItemOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteRequest struct {
	Key *map[string]*AttributeValue `type:"map" required:"true"`

	metadataDeleteRequest `json:"-", xml:"-"`
}

type metadataDeleteRequest struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteTableInput struct {
	TableName *string `type:"string" required:"true"`

	metadataDeleteTableInput `json:"-", xml:"-"`
}

type metadataDeleteTableInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteTableOutput struct {
	TableDescription *TableDescription `type:"structure"`

	metadataDeleteTableOutput `json:"-", xml:"-"`
}

type metadataDeleteTableOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTableInput struct {
	TableName *string `type:"string" required:"true"`

	metadataDescribeTableInput `json:"-", xml:"-"`
}

type metadataDescribeTableInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTableOutput struct {
	Table *TableDescription `type:"structure"`

	metadataDescribeTableOutput `json:"-", xml:"-"`
}

type metadataDescribeTableOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ExpectedAttributeValue struct {
	AttributeValueList []*AttributeValue `type:"list"`
	ComparisonOperator *string           `type:"string"`
	Exists             *bool             `type:"boolean"`
	Value              *AttributeValue   `type:"structure"`

	metadataExpectedAttributeValue `json:"-", xml:"-"`
}

type metadataExpectedAttributeValue struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetItemInput struct {
	AttributesToGet          []*string                   `type:"list"`
	ConsistentRead           *bool                       `type:"boolean"`
	ExpressionAttributeNames *map[string]*string         `type:"map"`
	Key                      *map[string]*AttributeValue `type:"map" required:"true"`
	ProjectionExpression     *string                     `type:"string"`
	ReturnConsumedCapacity   *string                     `type:"string"`
	TableName                *string                     `type:"string" required:"true"`

	metadataGetItemInput `json:"-", xml:"-"`
}

type metadataGetItemInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetItemOutput struct {
	ConsumedCapacity *ConsumedCapacity           `type:"structure"`
	Item             *map[string]*AttributeValue `type:"map"`

	metadataGetItemOutput `json:"-", xml:"-"`
}

type metadataGetItemOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GlobalSecondaryIndex struct {
	IndexName             *string                `type:"string" required:"true"`
	KeySchema             []*KeySchemaElement    `type:"list" required:"true"`
	Projection            *Projection            `type:"structure" required:"true"`
	ProvisionedThroughput *ProvisionedThroughput `type:"structure" required:"true"`

	metadataGlobalSecondaryIndex `json:"-", xml:"-"`
}

type metadataGlobalSecondaryIndex struct {
	SDKShapeTraits bool `type:"structure"`
}

type GlobalSecondaryIndexDescription struct {
	Backfilling           *bool                             `type:"boolean"`
	IndexName             *string                           `type:"string"`
	IndexSizeBytes        *int64                            `type:"long"`
	IndexStatus           *string                           `type:"string"`
	ItemCount             *int64                            `type:"long"`
	KeySchema             []*KeySchemaElement               `type:"list"`
	Projection            *Projection                       `type:"structure"`
	ProvisionedThroughput *ProvisionedThroughputDescription `type:"structure"`

	metadataGlobalSecondaryIndexDescription `json:"-", xml:"-"`
}

type metadataGlobalSecondaryIndexDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type GlobalSecondaryIndexUpdate struct {
	Create *CreateGlobalSecondaryIndexAction `type:"structure"`
	Delete *DeleteGlobalSecondaryIndexAction `type:"structure"`
	Update *UpdateGlobalSecondaryIndexAction `type:"structure"`

	metadataGlobalSecondaryIndexUpdate `json:"-", xml:"-"`
}

type metadataGlobalSecondaryIndexUpdate struct {
	SDKShapeTraits bool `type:"structure"`
}

type ItemCollectionMetrics struct {
	ItemCollectionKey   *map[string]*AttributeValue `type:"map"`
	SizeEstimateRangeGB []*float64                  `type:"list"`

	metadataItemCollectionMetrics `json:"-", xml:"-"`
}

type metadataItemCollectionMetrics struct {
	SDKShapeTraits bool `type:"structure"`
}

type KeySchemaElement struct {
	AttributeName *string `type:"string" required:"true"`
	KeyType       *string `type:"string" required:"true"`

	metadataKeySchemaElement `json:"-", xml:"-"`
}

type metadataKeySchemaElement struct {
	SDKShapeTraits bool `type:"structure"`
}

type KeysAndAttributes struct {
	AttributesToGet          []*string                     `type:"list"`
	ConsistentRead           *bool                         `type:"boolean"`
	ExpressionAttributeNames *map[string]*string           `type:"map"`
	Keys                     []*map[string]*AttributeValue `type:"list" required:"true"`
	ProjectionExpression     *string                       `type:"string"`

	metadataKeysAndAttributes `json:"-", xml:"-"`
}

type metadataKeysAndAttributes struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListTablesInput struct {
	ExclusiveStartTableName *string `type:"string"`
	Limit                   *int64  `type:"integer"`

	metadataListTablesInput `json:"-", xml:"-"`
}

type metadataListTablesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListTablesOutput struct {
	LastEvaluatedTableName *string   `type:"string"`
	TableNames             []*string `type:"list"`

	metadataListTablesOutput `json:"-", xml:"-"`
}

type metadataListTablesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type LocalSecondaryIndex struct {
	IndexName  *string             `type:"string" required:"true"`
	KeySchema  []*KeySchemaElement `type:"list" required:"true"`
	Projection *Projection         `type:"structure" required:"true"`

	metadataLocalSecondaryIndex `json:"-", xml:"-"`
}

type metadataLocalSecondaryIndex struct {
	SDKShapeTraits bool `type:"structure"`
}

type LocalSecondaryIndexDescription struct {
	IndexName      *string             `type:"string"`
	IndexSizeBytes *int64              `type:"long"`
	ItemCount      *int64              `type:"long"`
	KeySchema      []*KeySchemaElement `type:"list"`
	Projection     *Projection         `type:"structure"`

	metadataLocalSecondaryIndexDescription `json:"-", xml:"-"`
}

type metadataLocalSecondaryIndexDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type Projection struct {
	NonKeyAttributes []*string `type:"list"`
	ProjectionType   *string   `type:"string"`

	metadataProjection `json:"-", xml:"-"`
}

type metadataProjection struct {
	SDKShapeTraits bool `type:"structure"`
}

type ProvisionedThroughput struct {
	ReadCapacityUnits  *int64 `type:"long" required:"true"`
	WriteCapacityUnits *int64 `type:"long" required:"true"`

	metadataProvisionedThroughput `json:"-", xml:"-"`
}

type metadataProvisionedThroughput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ProvisionedThroughputDescription struct {
	LastDecreaseDateTime   *time.Time `type:"timestamp" timestampFormat:"unix"`
	LastIncreaseDateTime   *time.Time `type:"timestamp" timestampFormat:"unix"`
	NumberOfDecreasesToday *int64     `type:"long"`
	ReadCapacityUnits      *int64     `type:"long"`
	WriteCapacityUnits     *int64     `type:"long"`

	metadataProvisionedThroughputDescription `json:"-", xml:"-"`
}

type metadataProvisionedThroughputDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutItemInput struct {
	ConditionExpression         *string                             `type:"string"`
	ConditionalOperator         *string                             `type:"string"`
	Expected                    *map[string]*ExpectedAttributeValue `type:"map"`
	ExpressionAttributeNames    *map[string]*string                 `type:"map"`
	ExpressionAttributeValues   *map[string]*AttributeValue         `type:"map"`
	Item                        *map[string]*AttributeValue         `type:"map" required:"true"`
	ReturnConsumedCapacity      *string                             `type:"string"`
	ReturnItemCollectionMetrics *string                             `type:"string"`
	ReturnValues                *string                             `type:"string"`
	TableName                   *string                             `type:"string" required:"true"`

	metadataPutItemInput `json:"-", xml:"-"`
}

type metadataPutItemInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutItemOutput struct {
	Attributes            *map[string]*AttributeValue `type:"map"`
	ConsumedCapacity      *ConsumedCapacity           `type:"structure"`
	ItemCollectionMetrics *ItemCollectionMetrics      `type:"structure"`

	metadataPutItemOutput `json:"-", xml:"-"`
}

type metadataPutItemOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutRequest struct {
	Item *map[string]*AttributeValue `type:"map" required:"true"`

	metadataPutRequest `json:"-", xml:"-"`
}

type metadataPutRequest struct {
	SDKShapeTraits bool `type:"structure"`
}

type QueryInput struct {
	AttributesToGet           []*string                   `type:"list"`
	ConditionalOperator       *string                     `type:"string"`
	ConsistentRead            *bool                       `type:"boolean"`
	ExclusiveStartKey         *map[string]*AttributeValue `type:"map"`
	ExpressionAttributeNames  *map[string]*string         `type:"map"`
	ExpressionAttributeValues *map[string]*AttributeValue `type:"map"`
	FilterExpression          *string                     `type:"string"`
	IndexName                 *string                     `type:"string"`
	KeyConditions             *map[string]*Condition      `type:"map" required:"true"`
	Limit                     *int64                      `type:"integer"`
	ProjectionExpression      *string                     `type:"string"`
	QueryFilter               *map[string]*Condition      `type:"map"`
	ReturnConsumedCapacity    *string                     `type:"string"`
	ScanIndexForward          *bool                       `type:"boolean"`
	Select                    *string                     `type:"string"`
	TableName                 *string                     `type:"string" required:"true"`

	metadataQueryInput `json:"-", xml:"-"`
}

type metadataQueryInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type QueryOutput struct {
	ConsumedCapacity *ConsumedCapacity             `type:"structure"`
	Count            *int64                        `type:"integer"`
	Items            []*map[string]*AttributeValue `type:"list"`
	LastEvaluatedKey *map[string]*AttributeValue   `type:"map"`
	ScannedCount     *int64                        `type:"integer"`

	metadataQueryOutput `json:"-", xml:"-"`
}

type metadataQueryOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ScanInput struct {
	AttributesToGet           []*string                   `type:"list"`
	ConditionalOperator       *string                     `type:"string"`
	ExclusiveStartKey         *map[string]*AttributeValue `type:"map"`
	ExpressionAttributeNames  *map[string]*string         `type:"map"`
	ExpressionAttributeValues *map[string]*AttributeValue `type:"map"`
	FilterExpression          *string                     `type:"string"`
	IndexName                 *string                     `type:"string"`
	Limit                     *int64                      `type:"integer"`
	ProjectionExpression      *string                     `type:"string"`
	ReturnConsumedCapacity    *string                     `type:"string"`
	ScanFilter                *map[string]*Condition      `type:"map"`
	Segment                   *int64                      `type:"integer"`
	Select                    *string                     `type:"string"`
	TableName                 *string                     `type:"string" required:"true"`
	TotalSegments             *int64                      `type:"integer"`

	metadataScanInput `json:"-", xml:"-"`
}

type metadataScanInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ScanOutput struct {
	ConsumedCapacity *ConsumedCapacity             `type:"structure"`
	Count            *int64                        `type:"integer"`
	Items            []*map[string]*AttributeValue `type:"list"`
	LastEvaluatedKey *map[string]*AttributeValue   `type:"map"`
	ScannedCount     *int64                        `type:"integer"`

	metadataScanOutput `json:"-", xml:"-"`
}

type metadataScanOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type TableDescription struct {
	AttributeDefinitions   []*AttributeDefinition             `type:"list"`
	CreationDateTime       *time.Time                         `type:"timestamp" timestampFormat:"unix"`
	GlobalSecondaryIndexes []*GlobalSecondaryIndexDescription `type:"list"`
	ItemCount              *int64                             `type:"long"`
	KeySchema              []*KeySchemaElement                `type:"list"`
	LocalSecondaryIndexes  []*LocalSecondaryIndexDescription  `type:"list"`
	ProvisionedThroughput  *ProvisionedThroughputDescription  `type:"structure"`
	TableName              *string                            `type:"string"`
	TableSizeBytes         *int64                             `type:"long"`
	TableStatus            *string                            `type:"string"`

	metadataTableDescription `json:"-", xml:"-"`
}

type metadataTableDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateGlobalSecondaryIndexAction struct {
	IndexName             *string                `type:"string" required:"true"`
	ProvisionedThroughput *ProvisionedThroughput `type:"structure" required:"true"`

	metadataUpdateGlobalSecondaryIndexAction `json:"-", xml:"-"`
}

type metadataUpdateGlobalSecondaryIndexAction struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateItemInput struct {
	AttributeUpdates            *map[string]*AttributeValueUpdate   `type:"map"`
	ConditionExpression         *string                             `type:"string"`
	ConditionalOperator         *string                             `type:"string"`
	Expected                    *map[string]*ExpectedAttributeValue `type:"map"`
	ExpressionAttributeNames    *map[string]*string                 `type:"map"`
	ExpressionAttributeValues   *map[string]*AttributeValue         `type:"map"`
	Key                         *map[string]*AttributeValue         `type:"map" required:"true"`
	ReturnConsumedCapacity      *string                             `type:"string"`
	ReturnItemCollectionMetrics *string                             `type:"string"`
	ReturnValues                *string                             `type:"string"`
	TableName                   *string                             `type:"string" required:"true"`
	UpdateExpression            *string                             `type:"string"`

	metadataUpdateItemInput `json:"-", xml:"-"`
}

type metadataUpdateItemInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateItemOutput struct {
	Attributes            *map[string]*AttributeValue `type:"map"`
	ConsumedCapacity      *ConsumedCapacity           `type:"structure"`
	ItemCollectionMetrics *ItemCollectionMetrics      `type:"structure"`

	metadataUpdateItemOutput `json:"-", xml:"-"`
}

type metadataUpdateItemOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateTableInput struct {
	AttributeDefinitions        []*AttributeDefinition        `type:"list"`
	GlobalSecondaryIndexUpdates []*GlobalSecondaryIndexUpdate `type:"list"`
	ProvisionedThroughput       *ProvisionedThroughput        `type:"structure"`
	TableName                   *string                       `type:"string" required:"true"`

	metadataUpdateTableInput `json:"-", xml:"-"`
}

type metadataUpdateTableInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateTableOutput struct {
	TableDescription *TableDescription `type:"structure"`

	metadataUpdateTableOutput `json:"-", xml:"-"`
}

type metadataUpdateTableOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type WriteRequest struct {
	DeleteRequest *DeleteRequest `type:"structure"`
	PutRequest    *PutRequest    `type:"structure"`

	metadataWriteRequest `json:"-", xml:"-"`
}

type metadataWriteRequest struct {
	SDKShapeTraits bool `type:"structure"`
}